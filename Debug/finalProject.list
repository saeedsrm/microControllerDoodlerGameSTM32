
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002800  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c758  0800c758  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c758  0800c758  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c758  0800c758  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800c760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00000734  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab18  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ee  00000000  00000000  0003ac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0003df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  0003f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021341  00000000  00000000  00040ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a61d  00000000  00000000  00061e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40ee  00000000  00000000  0007c42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014051c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c18  00000000  00000000  00140570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f40 	.word	0x08009f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08009f40 	.word	0x08009f40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <BUZZER_SetTIM>:

TIM_HandleTypeDef *BUZZER_htim; 
uint32_t BUZZER_TIM_CHANNEL;

void BUZZER_SetTIM(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	BUZZER_htim = htim;
 8000ab6:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <BUZZER_SetTIM+0x24>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
	BUZZER_TIM_CHANNEL = TIM_CHANNEL;
 8000abc:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <BUZZER_SetTIM+0x28>)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000128 	.word	0x20000128
 8000ad4:	20000124 	.word	0x20000124

08000ad8 <BUZZER_Play_Doom>:

void BUZZER_Play_Doom(void)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	f5ad 5daa 	sub.w	sp, sp, #5440	; 0x1540
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
	// change this to make the song slower or faster
	int tempo = 225;
 8000ae2:	23e1      	movs	r3, #225	; 0xe1
 8000ae4:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000ae8:	f102 020c 	add.w	r2, r2, #12
 8000aec:	6013      	str	r3, [r2, #0]
	// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
	// !!negative numbers are used to represent dotted notes,
	// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
	// This code uses PROGMEM to fit the melody to flash as it was to long to fit
	// in SRAM. It may not work on other Arduino arquitectures other than AVR
	const int melody[] = 
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	3b18      	subs	r3, #24
 8000af4:	4a68      	ldr	r2, [pc, #416]	; (8000c98 <BUZZER_Play_Doom+0x1c0>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	4611      	mov	r1, r2
 8000afa:	f44f 53aa 	mov.w	r3, #5440	; 0x1540
 8000afe:	461a      	mov	r2, r3
 8000b00:	f008 f814 	bl	8008b2c <memcpy>
		NOTE_B3, -16, NOTE_G3, -16, NOTE_E3, -16, NOTE_B2, -16, NOTE_E3, -16, NOTE_G3, -16, NOTE_C4, -16, NOTE_B3, -16, NOTE_G3, -16, NOTE_B3, -16, NOTE_G3, -16, NOTE_E3, -16,  
	};

	// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
	// there are two values per note (pitch and duration), so for each note there are four bytes
	int notes = sizeof(melody) / sizeof(melody[0]) / 2;
 8000b04:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8000b08:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b0c:	f102 0208 	add.w	r2, r2, #8
 8000b10:	6013      	str	r3, [r2, #0]

	// this calculates the duration of a whole note in ms
	int wholenote = (60000 * 4) / tempo;
 8000b12:	4a62      	ldr	r2, [pc, #392]	; (8000c9c <BUZZER_Play_Doom+0x1c4>)
 8000b14:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b18:	f103 030c 	add.w	r3, r3, #12
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b22:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b26:	f102 0204 	add.w	r2, r2, #4
 8000b2a:	6013      	str	r3, [r2, #0]

	int divider = 0, noteDuration = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b3a:	f102 0214 	add.w	r2, r2, #20
 8000b3e:	6013      	str	r3, [r2, #0]

  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) 
 8000b40:	2300      	movs	r3, #0
 8000b42:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b46:	f102 0210 	add.w	r2, r2, #16
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	e08a      	b.n	8000c64 <BUZZER_Play_Doom+0x18c>
	{
    // calculates the duration of each note
    divider = pgm_read_word_near(melody+thisNote + 1);
 8000b4e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b52:	f103 0310 	add.w	r3, r3, #16
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	009a      	lsls	r2, r3, #2
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	3b18      	subs	r3, #24
 8000b62:	4413      	add	r3, r2
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b6a:	6013      	str	r3, [r2, #0]
   
		if (divider > 0) 
 8000b6c:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dd0f      	ble.n	8000b96 <BUZZER_Play_Doom+0xbe>
		{
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
 8000b76:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b7a:	f103 0304 	add.w	r3, r3, #4
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8a:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000b8e:	f102 0214 	add.w	r2, r2, #20
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e02e      	b.n	8000bf4 <BUZZER_Play_Doom+0x11c>
    } 
		else if (divider < 0) 
 8000b96:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da29      	bge.n	8000bf4 <BUZZER_Play_Doom+0x11c>
		{
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
 8000ba0:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000bb0:	f102 0204 	add.w	r2, r2, #4
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bba:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000bbe:	f102 0214 	add.w	r2, r2, #20
 8000bc2:	6013      	str	r3, [r2, #0]
      noteDuration *= 1.5; // increases the duration in half for dotted notes
 8000bc4:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000bc8:	f103 0314 	add.w	r3, r3, #20
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	f7ff fca9 	bl	8000524 <__aeabi_i2d>
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <BUZZER_Play_Doom+0x1c8>)
 8000bd8:	f7ff fd0e 	bl	80005f8 <__aeabi_dmul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff ff1a 	bl	8000a1c <__aeabi_d2iz>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000bee:	f102 0214 	add.w	r2, r2, #20
 8000bf2:	6013      	str	r3, [r2, #0]
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    Tone(pgm_read_word_near(melody+thisNote) , noteDuration * 0.9 );
 8000bf4:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000bf8:	f103 0310 	add.w	r3, r3, #16
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	009a      	lsls	r2, r3, #2
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	3b18      	subs	r3, #24
 8000c06:	4413      	add	r3, r2
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000c10:	f103 0314 	add.w	r3, r3, #20
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f7ff fc85 	bl	8000524 <__aeabi_i2d>
 8000c1a:	a31d      	add	r3, pc, #116	; (adr r3, 8000c90 <BUZZER_Play_Doom+0x1b8>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fcea 	bl	80005f8 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f7ff ff1e 	bl	8000a6c <__aeabi_d2uiz>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4619      	mov	r1, r3
 8000c34:	4620      	mov	r0, r4
 8000c36:	f000 f835 	bl	8000ca4 <Tone>

    // Wait for the specief duration before playing the next note.
    HAL_Delay(noteDuration);
 8000c3a:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000c3e:	f103 0314 	add.w	r3, r3, #20
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f899 	bl	8003d7c <HAL_Delay>

    // stop the waveform generation before the next note.
    NoTone();
 8000c4a:	f000 f8c9 	bl	8000de0 <NoTone>
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) 
 8000c4e:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000c52:	f103 0310 	add.w	r3, r3, #16
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000c5e:	f102 0210 	add.w	r2, r2, #16
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 8000c68:	f103 0308 	add.w	r3, r3, #8
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 8000c74:	f102 0210 	add.w	r2, r2, #16
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	f6ff af67 	blt.w	8000b4e <BUZZER_Play_Doom+0x76>
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	f507 57aa 	add.w	r7, r7, #5440	; 0x1540
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	cccccccd 	.word	0xcccccccd
 8000c94:	3feccccc 	.word	0x3feccccc
 8000c98:	08009f58 	.word	0x08009f58
 8000c9c:	0003a980 	.word	0x0003a980
 8000ca0:	3ff80000 	.word	0x3ff80000

08000ca4 <Tone>:
    NoTone();
  }
}

void Tone(uint32_t pwmFreq, uint32_t duration)
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	uint8_t coeff = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
	if(HAL_RCC_GetHCLKFreq() != HAL_RCC_GetPCLK1Freq())    // APB1 Prescaler is not equal to 1 thus * 2
 8000cb2:	f006 f985 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	f006 f98e 	bl	8006fd8 <HAL_RCC_GetPCLK1Freq>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	d001      	beq.n	8000cc6 <Tone+0x22>
		coeff = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	73fb      	strb	r3, [r7, #15]
	
	// Set frequency
	uint32_t timerFreq = coeff * HAL_RCC_GetPCLK1Freq();
 8000cc6:	7bfc      	ldrb	r4, [r7, #15]
 8000cc8:	f006 f986 	bl	8006fd8 <HAL_RCC_GetPCLK1Freq>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	fb03 f304 	mul.w	r3, r3, r4
 8000cd2:	60bb      	str	r3, [r7, #8]
	BUZZER_htim->Instance->PSC = ( (double)timerFreq / (double)pwmFreq )/1000 - 1;
 8000cd4:	68b8      	ldr	r0, [r7, #8]
 8000cd6:	f7ff fc15 	bl	8000504 <__aeabi_ui2d>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fc10 	bl	8000504 <__aeabi_ui2d>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff fdae 	bl	800084c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <Tone+0x12c>)
 8000cfe:	f7ff fda5 	bl	800084c <__aeabi_ddiv>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <Tone+0x130>)
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <Tone+0x134>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681c      	ldr	r4, [r3, #0]
 8000d22:	f7ff fea3 	bl	8000a6c <__aeabi_d2uiz>
 8000d26:	4603      	mov	r3, r0
 8000d28:	62a3      	str	r3, [r4, #40]	; 0x28
	BUZZER_htim->Instance->ARR = 1000 - 1;
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <Tone+0x134>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
	
	// Set CCR
	__HAL_TIM_SetCompare(BUZZER_htim, BUZZER_TIM_CHANNEL, 499);
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <Tone+0x138>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <Tone+0xa8>
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <Tone+0x134>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	e031      	b.n	8000db0 <Tone+0x10c>
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <Tone+0x138>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d106      	bne.n	8000d62 <Tone+0xbe>
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <Tone+0x134>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d5e:	6393      	str	r3, [r2, #56]	; 0x38
 8000d60:	e026      	b.n	8000db0 <Tone+0x10c>
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <Tone+0x138>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d106      	bne.n	8000d78 <Tone+0xd4>
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <Tone+0x134>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d74:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d76:	e01b      	b.n	8000db0 <Tone+0x10c>
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <Tone+0x138>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b0c      	cmp	r3, #12
 8000d7e:	d106      	bne.n	8000d8e <Tone+0xea>
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <Tone+0x134>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	e010      	b.n	8000db0 <Tone+0x10c>
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <Tone+0x138>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d106      	bne.n	8000da4 <Tone+0x100>
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <Tone+0x134>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000da0:	6593      	str	r3, [r2, #88]	; 0x58
 8000da2:	e005      	b.n	8000db0 <Tone+0x10c>
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <Tone+0x134>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000dae:	65d3      	str	r3, [r2, #92]	; 0x5c

	// Tone
	HAL_TIM_PWM_Start(BUZZER_htim,BUZZER_TIM_CHANNEL);
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <Tone+0x134>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <Tone+0x138>)
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fcd0 	bl	8007760 <HAL_TIM_PWM_Start>
	
	// Wait
	HAL_Delay(duration);
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f002 ffdb 	bl	8003d7c <HAL_Delay>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	408f4000 	.word	0x408f4000
 8000dd4:	3ff00000 	.word	0x3ff00000
 8000dd8:	20000128 	.word	0x20000128
 8000ddc:	20000124 	.word	0x20000124

08000de0 <NoTone>:

void NoTone(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(BUZZER_htim,BUZZER_TIM_CHANNEL);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <NoTone+0x18>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <NoTone+0x1c>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 fdb6 	bl	8007960 <HAL_TIM_PWM_Stop>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000128 	.word	0x20000128
 8000dfc:	20000124 	.word	0x20000124

08000e00 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af0a      	add	r7, sp, #40	; 0x28
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	817b      	strh	r3, [r7, #10]
 8000e12:	460b      	mov	r3, r1
 8000e14:	813b      	strh	r3, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <LiquidCrystal+0x90>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d019      	beq.n	8000e56 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000e22:	8939      	ldrh	r1, [r7, #8]
 8000e24:	897a      	ldrh	r2, [r7, #10]
 8000e26:	2300      	movs	r3, #0
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e38:	9304      	str	r3, [sp, #16]
 8000e3a:	8c3b      	ldrh	r3, [r7, #32]
 8000e3c:	9303      	str	r3, [sp, #12]
 8000e3e:	8bbb      	ldrh	r3, [r7, #28]
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	8b3b      	ldrh	r3, [r7, #24]
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	68f9      	ldr	r1, [r7, #12]
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f000 f820 	bl	8000e94 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000e54:	e018      	b.n	8000e88 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000e56:	8939      	ldrh	r1, [r7, #8]
 8000e58:	897a      	ldrh	r2, [r7, #10]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	9308      	str	r3, [sp, #32]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9307      	str	r3, [sp, #28]
 8000e62:	2300      	movs	r3, #0
 8000e64:	9306      	str	r3, [sp, #24]
 8000e66:	2300      	movs	r3, #0
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e6c:	9304      	str	r3, [sp, #16]
 8000e6e:	8c3b      	ldrh	r3, [r7, #32]
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	8bbb      	ldrh	r3, [r7, #28]
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	8b3b      	ldrh	r3, [r7, #24]
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f806 	bl	8000e94 <init>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000

08000e94 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	81bb      	strh	r3, [r7, #12]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <init+0x84>)
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <init+0x88>)
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <init+0x8c>)
 8000eba:	8b3b      	ldrh	r3, [r7, #24]
 8000ebc:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000ebe:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <init+0x90>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <init+0x94>)
 8000ec6:	8bbb      	ldrh	r3, [r7, #28]
 8000ec8:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <init+0x94>)
 8000ecc:	8c3b      	ldrh	r3, [r7, #32]
 8000ece:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <init+0x94>)
 8000ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed4:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <init+0x94>)
 8000ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000eda:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <init+0x94>)
 8000ede:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ee0:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <init+0x94>)
 8000ee4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ee6:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000ee8:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <init+0x94>)
 8000eea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000eec:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <init+0x94>)
 8000ef0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ef2:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e002      	b.n	8000f08 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <init+0x98>)
 8000f04:	2210      	movs	r2, #16
 8000f06:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000f08:	2102      	movs	r1, #2
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f000 f810 	bl	8000f30 <begin>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000150 	.word	0x20000150
 8000f1c:	20000130 	.word	0x20000130
 8000f20:	2000014e 	.word	0x2000014e
 8000f24:	20000134 	.word	0x20000134
 8000f28:	2000013c 	.word	0x2000013c
 8000f2c:	2000014d 	.word	0x2000014d

08000f30 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d906      	bls.n	8000f54 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000f46:	4b77      	ldr	r3, [pc, #476]	; (8001124 <begin+0x1f4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b74      	ldr	r3, [pc, #464]	; (8001124 <begin+0x1f4>)
 8000f52:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000f54:	4a74      	ldr	r2, [pc, #464]	; (8001128 <begin+0x1f8>)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	3340      	adds	r3, #64	; 0x40
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f988 	bl	8001278 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000f68:	4b70      	ldr	r3, [pc, #448]	; (800112c <begin+0x1fc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <begin+0x54>
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d106      	bne.n	8000f84 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000f76:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <begin+0x1f4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b68      	ldr	r3, [pc, #416]	; (8001124 <begin+0x1f4>)
 8000f82:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000f84:	f000 f8e4 	bl	8001150 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000f90:	4b67      	ldr	r3, [pc, #412]	; (8001130 <begin+0x200>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d01b      	beq.n	8000fd0 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <begin+0x204>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <begin+0x208>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b65      	ldr	r3, [pc, #404]	; (800113c <begin+0x20c>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <begin+0x210>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b62      	ldr	r3, [pc, #392]	; (8001140 <begin+0x210>)
 8000fb6:	885b      	ldrh	r3, [r3, #2]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b60      	ldr	r3, [pc, #384]	; (8001140 <begin+0x210>)
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <begin+0x210>)
 8000fc6:	88db      	ldrh	r3, [r3, #6]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e02a      	b.n	8001026 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <begin+0x204>)
 8000fd2:	881a      	ldrh	r2, [r3, #0]
 8000fd4:	4b58      	ldr	r3, [pc, #352]	; (8001138 <begin+0x208>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <begin+0x20c>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000fe4:	4b56      	ldr	r3, [pc, #344]	; (8001140 <begin+0x210>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000fec:	4b54      	ldr	r3, [pc, #336]	; (8001140 <begin+0x210>)
 8000fee:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <begin+0x210>)
 8000ff6:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000ffc:	4b50      	ldr	r3, [pc, #320]	; (8001140 <begin+0x210>)
 8000ffe:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001000:	4313      	orrs	r3, r2
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <begin+0x210>)
 8001006:	891b      	ldrh	r3, [r3, #8]
 8001008:	4313      	orrs	r3, r2
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <begin+0x210>)
 800100e:	895b      	ldrh	r3, [r3, #10]
 8001010:	4313      	orrs	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <begin+0x210>)
 8001016:	899b      	ldrh	r3, [r3, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <begin+0x210>)
 800101e:	89db      	ldrh	r3, [r3, #14]
 8001020:	4313      	orrs	r3, r2
 8001022:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001024:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <begin+0x214>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f004 faf7 	bl	8005624 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f002 fea0 	bl	8003d7c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 800103c:	4b41      	ldr	r3, [pc, #260]	; (8001144 <begin+0x214>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <begin+0x204>)
 8001042:	8811      	ldrh	r1, [r2, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fc7e 	bl	8005948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <begin+0x214>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a3a      	ldr	r2, [pc, #232]	; (800113c <begin+0x20c>)
 8001052:	8811      	ldrh	r1, [r2, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fc76 	bl	8005948 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <begin+0x208>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d007      	beq.n	8001074 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <begin+0x214>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a33      	ldr	r2, [pc, #204]	; (8001138 <begin+0x208>)
 800106a:	8811      	ldrh	r1, [r2, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fc6a 	bl	8005948 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <begin+0x1f4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b00      	cmp	r3, #0
 800107e:	d115      	bne.n	80010ac <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 fa45 	bl	8001510 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001086:	2005      	movs	r0, #5
 8001088:	f002 fe78 	bl	8003d7c <HAL_Delay>

    // second try
    write4bits(0x03);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 fa3f 	bl	8001510 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001092:	2005      	movs	r0, #5
 8001094:	f002 fe72 	bl	8003d7c <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fa39 	bl	8001510 <write4bits>
    HAL_Delay(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f002 fe6c 	bl	8003d7c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fa33 	bl	8001510 <write4bits>
 80010aa:	e01d      	b.n	80010e8 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <begin+0x1f4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f9a4 	bl	8001404 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80010bc:	2005      	movs	r0, #5
 80010be:	f002 fe5d 	bl	8003d7c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <begin+0x1f4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f999 	bl	8001404 <command>
    HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f002 fe52 	bl	8003d7c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <begin+0x1f4>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f98e 	bl	8001404 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <begin+0x1f4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0320 	orr.w	r3, r3, #32
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f986 	bl	8001404 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <begin+0x218>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	701a      	strb	r2, [r3, #0]
  display();
 80010fe:	f000 f917 	bl	8001330 <display>

  // clear it off
  clear();
 8001102:	f000 f8d9 	bl	80012b8 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <begin+0x21c>)
 8001108:	2202      	movs	r2, #2
 800110a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <begin+0x21c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f974 	bl	8001404 <command>

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000014d 	.word	0x2000014d
 8001128:	20000139 	.word	0x20000139
 800112c:	200000e8 	.word	0x200000e8
 8001130:	20000000 	.word	0x20000000
 8001134:	20000150 	.word	0x20000150
 8001138:	20000130 	.word	0x20000130
 800113c:	2000014e 	.word	0x2000014e
 8001140:	2000013c 	.word	0x2000013c
 8001144:	20000134 	.word	0x20000134
 8001148:	20000138 	.word	0x20000138
 800114c:	2000014c 	.word	0x2000014c

08001150 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <enableClock+0x10c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115e:	d10c      	bne.n	800117a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <enableClock+0x110>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <enableClock+0x110>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116a:	6153      	str	r3, [r2, #20]
 800116c:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <enableClock+0x110>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001178:	e06a      	b.n	8001250 <enableClock+0x100>
  else if(_port == GPIOB)
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <enableClock+0x10c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a39      	ldr	r2, [pc, #228]	; (8001264 <enableClock+0x114>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10c      	bne.n	800119e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <enableClock+0x110>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	4a35      	ldr	r2, [pc, #212]	; (8001260 <enableClock+0x110>)
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	6153      	str	r3, [r2, #20]
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <enableClock+0x110>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
}
 800119c:	e058      	b.n	8001250 <enableClock+0x100>
  else if(_port == GPIOB)
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <enableClock+0x10c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <enableClock+0x114>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d10c      	bne.n	80011c2 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <enableClock+0x110>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a2c      	ldr	r2, [pc, #176]	; (8001260 <enableClock+0x110>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b2:	6153      	str	r3, [r2, #20]
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <enableClock+0x110>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
}
 80011c0:	e046      	b.n	8001250 <enableClock+0x100>
	else if(_port == GPIOC)
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <enableClock+0x10c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <enableClock+0x118>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d10c      	bne.n	80011e6 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <enableClock+0x110>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <enableClock+0x110>)
 80011d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d6:	6153      	str	r3, [r2, #20]
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <enableClock+0x110>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
}
 80011e4:	e034      	b.n	8001250 <enableClock+0x100>
	else if(_port == GPIOD)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <enableClock+0x10c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a20      	ldr	r2, [pc, #128]	; (800126c <enableClock+0x11c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10c      	bne.n	800120a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <enableClock+0x110>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <enableClock+0x110>)
 80011f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011fa:	6153      	str	r3, [r2, #20]
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <enableClock+0x110>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	e022      	b.n	8001250 <enableClock+0x100>
	else if(_port == GPIOE)
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <enableClock+0x10c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <enableClock+0x120>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10c      	bne.n	800122e <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <enableClock+0x110>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <enableClock+0x110>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6153      	str	r3, [r2, #20]
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <enableClock+0x110>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
}
 800122c:	e010      	b.n	8001250 <enableClock+0x100>
	else if(_port == GPIOF)
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <enableClock+0x10c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <enableClock+0x124>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d10b      	bne.n	8001250 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <enableClock+0x110>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <enableClock+0x110>)
 800123e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001242:	6153      	str	r3, [r2, #20]
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <enableClock+0x110>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000134 	.word	0x20000134
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	48001000 	.word	0x48001000
 8001274:	48001400 	.word	0x48001400

08001278 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <setRowOffsets+0x3c>)
 800128c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <setRowOffsets+0x3c>)
 8001294:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <setRowOffsets+0x3c>)
 800129c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <setRowOffsets+0x3c>)
 80012a4:	70da      	strb	r2, [r3, #3]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000012c 	.word	0x2000012c

080012b8 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 f8a1 	bl	8001404 <command>
  HAL_Delay(2);  // this command takes a long time!
 80012c2:	2002      	movs	r0, #2
 80012c4:	f002 fd5a 	bl	8003d7c <HAL_Delay>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80012dc:	2304      	movs	r3, #4
 80012de:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d803      	bhi.n	80012f0 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <setCursor+0x5c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d303      	bcc.n	8001302 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <setCursor+0x5c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3b01      	subs	r3, #1
 8001300:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <setCursor+0x60>)
 8001306:	5cd2      	ldrb	r2, [r2, r3]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4413      	add	r3, r2
 800130c:	b2db      	uxtb	r3, r3
 800130e:	b25b      	sxtb	r3, r3
 8001310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f873 	bl	8001404 <command>
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000139 	.word	0x20000139
 800132c:	2000012c 	.word	0x2000012c

08001330 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <display+0x28>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <display+0x28>)
 8001340:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <display+0x28>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f859 	bl	8001404 <command>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000138 	.word	0x20000138

0800135c <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <print+0x12>
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7fe ff2c 	bl	80001d0 <strlen>
 8001378:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800137e:	e00c      	b.n	800139a <print+0x3e>
    if (write(*buffer++)) n++;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	617a      	str	r2, [r7, #20]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f849 	bl	8001420 <write>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <print+0x4a>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	613a      	str	r2, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ed      	bne.n	8001380 <print+0x24>
 80013a4:	e000      	b.n	80013a8 <print+0x4c>
    else break;
 80013a6:	bf00      	nop
  }
  return n;
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	6039      	str	r1, [r7, #0]
 80013bc:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f815 	bl	8001404 <command>
  for (int i=0; i<8; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e009      	b.n	80013f4 <createChar+0x42>
    write(charmap[i]);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f819 	bl	8001420 <write>
  for (int i=0; i<8; i++) {
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	ddf2      	ble.n	80013e0 <createChar+0x2e>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f814 	bl	8001440 <send>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <write>:

inline size_t write(uint8_t value) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f806 	bl	8001440 <send>
  return 1; // assume sucess
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <send+0x6c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <send+0x70>)
 8001456:	8811      	ldrh	r1, [r2, #0]
 8001458:	79ba      	ldrb	r2, [r7, #6]
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fa74 	bl	8005948 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <send+0x74>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	2bff      	cmp	r3, #255	; 0xff
 8001466:	d007      	beq.n	8001478 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <send+0x6c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <send+0x74>)
 800146e:	8811      	ldrh	r1, [r2, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fa68 	bl	8005948 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <send+0x78>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <send+0x4e>
    write8bits(value); 
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f86c 	bl	8001564 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800148c:	e009      	b.n	80014a2 <send+0x62>
    write4bits(value>>4);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f83b 	bl	8001510 <write4bits>
    write4bits(value);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f837 	bl	8001510 <write4bits>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000134 	.word	0x20000134
 80014b0:	20000150 	.word	0x20000150
 80014b4:	20000130 	.word	0x20000130
 80014b8:	2000014d 	.word	0x2000014d

080014bc <pulseEnable>:

void pulseEnable(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <pulseEnable+0x4c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <pulseEnable+0x50>)
 80014c6:	8811      	ldrh	r1, [r2, #0]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fa3c 	bl	8005948 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80014d0:	2001      	movs	r0, #1
 80014d2:	f002 fc53 	bl	8003d7c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <pulseEnable+0x4c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <pulseEnable+0x50>)
 80014dc:	8811      	ldrh	r1, [r2, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fa31 	bl	8005948 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80014e6:	2001      	movs	r0, #1
 80014e8:	f002 fc48 	bl	8003d7c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <pulseEnable+0x4c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <pulseEnable+0x50>)
 80014f2:	8811      	ldrh	r1, [r2, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fa26 	bl	8005948 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80014fc:	2001      	movs	r0, #1
 80014fe:	f002 fc3d 	bl	8003d7c <HAL_Delay>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000134 	.word	0x20000134
 800150c:	2000014e 	.word	0x2000014e

08001510 <write4bits>:

void write4bits(uint8_t value) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e013      	b.n	8001548 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <write4bits+0x4c>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <write4bits+0x50>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	fa42 f303 	asr.w	r3, r2, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	f004 fa03 	bl	8005948 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b03      	cmp	r3, #3
 800154c:	dde8      	ble.n	8001520 <write4bits+0x10>
  }

  pulseEnable();
 800154e:	f7ff ffb5 	bl	80014bc <pulseEnable>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000134 	.word	0x20000134
 8001560:	2000013c 	.word	0x2000013c

08001564 <write8bits>:

void write8bits(uint8_t value) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e013      	b.n	800159c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <write8bits+0x4c>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <write8bits+0x50>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	fa42 f303 	asr.w	r3, r2, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	f004 f9d9 	bl	8005948 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	dde8      	ble.n	8001574 <write8bits+0x10>
  }
  
  pulseEnable();
 80015a2:	f7ff ff8b 	bl	80014bc <pulseEnable>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000134 	.word	0x20000134
 80015b4:	2000013c 	.word	0x2000013c

080015b8 <initBoard>:

void genarateBoard(int blankRow);
/////////////////////////////kepad////////////////////
uint32_t now = 0;

void initBoard(){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
	for (int i=0;i<20;i++){
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e014      	b.n	80015ee <initBoard+0x36>
		for (int j=0;j<4;j++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	e00b      	b.n	80015e2 <initBoard+0x2a>
			board[i][j]=-1;
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <initBoard+0x4c>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	009a      	lsls	r2, r3, #2
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j=0;j<4;j++){
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	ddf0      	ble.n	80015ca <initBoard+0x12>
	for (int i=0;i<20;i++){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b13      	cmp	r3, #19
 80015f2:	dde7      	ble.n	80015c4 <initBoard+0xc>
		}
	}
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200001fc 	.word	0x200001fc

08001608 <shot>:

void shot(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  realCharactorInShotPosiotion = board[doodlerPosition[0] + 2][doodlerPosition[1]];
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <shot+0x84>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1c9a      	adds	r2, r3, #2
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <shot+0x84>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	491e      	ldr	r1, [pc, #120]	; (8001690 <shot+0x88>)
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4413      	add	r3, r2
 800161c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <shot+0x8c>)
 8001622:	6013      	str	r3, [r2, #0]
  setCursor(doodlerPosition[0] +2, doodlerPosition[1]);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <shot+0x84>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	3302      	adds	r3, #2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <shot+0x84>)
 8001630:	6852      	ldr	r2, [r2, #4]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe48 	bl	80012cc <setCursor>
  shotPosition[0] = doodlerPosition[0] +2;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <shot+0x84>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3302      	adds	r3, #2
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <shot+0x90>)
 8001644:	6013      	str	r3, [r2, #0]
  shotPosition[1] = doodlerPosition[1];
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <shot+0x84>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <shot+0x90>)
 800164c:	6053      	str	r3, [r2, #4]
  if(realCharactorInShotPosiotion == MONSTER_NUM){
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <shot+0x8c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d111      	bne.n	800167a <shot+0x72>
    print(" ");
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <shot+0x94>)
 8001658:	f7ff fe80 	bl	800135c <print>
    board[shotPosition[0]][shotPosition[1]] = EMPTY_CELL_NUM;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <shot+0x90>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <shot+0x90>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	490a      	ldr	r1, [pc, #40]	; (8001690 <shot+0x88>)
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4413      	add	r3, r2
 800166a:	f04f 32ff 	mov.w	r2, #4294967295
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    isShotInScreen = 0;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <shot+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
  } else{
    write(SHOT_NUM);
    isShotInScreen = 1;
  }
}
 8001678:	e005      	b.n	8001686 <shot+0x7e>
    write(SHOT_NUM);
 800167a:	2006      	movs	r0, #6
 800167c:	f7ff fed0 	bl	8001420 <write>
    isShotInScreen = 1;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <shot+0x98>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000f0 	.word	0x200000f0
 8001690:	200001fc 	.word	0x200001fc
 8001694:	2000033c 	.word	0x2000033c
 8001698:	2000015c 	.word	0x2000015c
 800169c:	0800c568 	.word	0x0800c568
 80016a0:	2000010c 	.word	0x2000010c

080016a4 <print1OnScreen>:

void print1OnScreen(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	setCursor(11, 1);
 80016a8:	2101      	movs	r1, #1
 80016aa:	200b      	movs	r0, #11
 80016ac:	f7ff fe0e 	bl	80012cc <setCursor>
	write(-1);
 80016b0:	20ff      	movs	r0, #255	; 0xff
 80016b2:	f7ff feb5 	bl	8001420 <write>
	setCursor(12, 2);
 80016b6:	2102      	movs	r1, #2
 80016b8:	200c      	movs	r0, #12
 80016ba:	f7ff fe07 	bl	80012cc <setCursor>
	write(-1);
 80016be:	20ff      	movs	r0, #255	; 0xff
 80016c0:	f7ff feae 	bl	8001420 <write>
	setCursor(11, 2);
 80016c4:	2102      	movs	r1, #2
 80016c6:	200b      	movs	r0, #11
 80016c8:	f7ff fe00 	bl	80012cc <setCursor>
	write(-1);
 80016cc:	20ff      	movs	r0, #255	; 0xff
 80016ce:	f7ff fea7 	bl	8001420 <write>
	setCursor(10, 2);
 80016d2:	2102      	movs	r1, #2
 80016d4:	200a      	movs	r0, #10
 80016d6:	f7ff fdf9 	bl	80012cc <setCursor>
	write(-1);
 80016da:	20ff      	movs	r0, #255	; 0xff
 80016dc:	f7ff fea0 	bl	8001420 <write>
	setCursor(9, 2);
 80016e0:	2102      	movs	r1, #2
 80016e2:	2009      	movs	r0, #9
 80016e4:	f7ff fdf2 	bl	80012cc <setCursor>
	write(-1);
 80016e8:	20ff      	movs	r0, #255	; 0xff
 80016ea:	f7ff fe99 	bl	8001420 <write>
	setCursor(8, 2);
 80016ee:	2102      	movs	r1, #2
 80016f0:	2008      	movs	r0, #8
 80016f2:	f7ff fdeb 	bl	80012cc <setCursor>
	write(-1);
 80016f6:	20ff      	movs	r0, #255	; 0xff
 80016f8:	f7ff fe92 	bl	8001420 <write>
	setCursor(7, 2);
 80016fc:	2102      	movs	r1, #2
 80016fe:	2007      	movs	r0, #7
 8001700:	f7ff fde4 	bl	80012cc <setCursor>
	write(-1);
 8001704:	20ff      	movs	r0, #255	; 0xff
 8001706:	f7ff fe8b 	bl	8001420 <write>
	setCursor(6, 2);
 800170a:	2102      	movs	r1, #2
 800170c:	2006      	movs	r0, #6
 800170e:	f7ff fddd 	bl	80012cc <setCursor>
	write(-1);
 8001712:	20ff      	movs	r0, #255	; 0xff
 8001714:	f7ff fe84 	bl	8001420 <write>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <print2OnScreen>:

void print2OnScreen(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	setCursor(12, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	200c      	movs	r0, #12
 8001724:	f7ff fdd2 	bl	80012cc <setCursor>
	write(-1);
 8001728:	20ff      	movs	r0, #255	; 0xff
 800172a:	f7ff fe79 	bl	8001420 <write>
	setCursor(12, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	200c      	movs	r0, #12
 8001732:	f7ff fdcb 	bl	80012cc <setCursor>
	write(-1);
 8001736:	20ff      	movs	r0, #255	; 0xff
 8001738:	f7ff fe72 	bl	8001420 <write>
	setCursor(12, 2);
 800173c:	2102      	movs	r1, #2
 800173e:	200c      	movs	r0, #12
 8001740:	f7ff fdc4 	bl	80012cc <setCursor>
	write(-1);
 8001744:	20ff      	movs	r0, #255	; 0xff
 8001746:	f7ff fe6b 	bl	8001420 <write>
	setCursor(12, 3);
 800174a:	2103      	movs	r1, #3
 800174c:	200c      	movs	r0, #12
 800174e:	f7ff fdbd 	bl	80012cc <setCursor>
	write(-1);
 8001752:	20ff      	movs	r0, #255	; 0xff
 8001754:	f7ff fe64 	bl	8001420 <write>
	setCursor(11, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	200b      	movs	r0, #11
 800175c:	f7ff fdb6 	bl	80012cc <setCursor>
	write(-1);
 8001760:	20ff      	movs	r0, #255	; 0xff
 8001762:	f7ff fe5d 	bl	8001420 <write>
	setCursor(11, 3);
 8001766:	2103      	movs	r1, #3
 8001768:	200b      	movs	r0, #11
 800176a:	f7ff fdaf 	bl	80012cc <setCursor>
	write(-1);
 800176e:	20ff      	movs	r0, #255	; 0xff
 8001770:	f7ff fe56 	bl	8001420 <write>
	setCursor(10, 3);
 8001774:	2103      	movs	r1, #3
 8001776:	200a      	movs	r0, #10
 8001778:	f7ff fda8 	bl	80012cc <setCursor>
	write(-1);
 800177c:	20ff      	movs	r0, #255	; 0xff
 800177e:	f7ff fe4f 	bl	8001420 <write>
	setCursor(9, 0);
 8001782:	2100      	movs	r1, #0
 8001784:	2009      	movs	r0, #9
 8001786:	f7ff fda1 	bl	80012cc <setCursor>
	write(-1);
 800178a:	20ff      	movs	r0, #255	; 0xff
 800178c:	f7ff fe48 	bl	8001420 <write>
	setCursor(9, 1);
 8001790:	2101      	movs	r1, #1
 8001792:	2009      	movs	r0, #9
 8001794:	f7ff fd9a 	bl	80012cc <setCursor>
	write(-1);
 8001798:	20ff      	movs	r0, #255	; 0xff
 800179a:	f7ff fe41 	bl	8001420 <write>
	setCursor(9, 2);
 800179e:	2102      	movs	r1, #2
 80017a0:	2009      	movs	r0, #9
 80017a2:	f7ff fd93 	bl	80012cc <setCursor>
	write(-1);
 80017a6:	20ff      	movs	r0, #255	; 0xff
 80017a8:	f7ff fe3a 	bl	8001420 <write>
	setCursor(9, 3);
 80017ac:	2103      	movs	r1, #3
 80017ae:	2009      	movs	r0, #9
 80017b0:	f7ff fd8c 	bl	80012cc <setCursor>
	write(-1);
 80017b4:	20ff      	movs	r0, #255	; 0xff
 80017b6:	f7ff fe33 	bl	8001420 <write>
	setCursor(8, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2008      	movs	r0, #8
 80017be:	f7ff fd85 	bl	80012cc <setCursor>
	write(-1);
 80017c2:	20ff      	movs	r0, #255	; 0xff
 80017c4:	f7ff fe2c 	bl	8001420 <write>
	setCursor(7, 0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2007      	movs	r0, #7
 80017cc:	f7ff fd7e 	bl	80012cc <setCursor>
	write(-1);
 80017d0:	20ff      	movs	r0, #255	; 0xff
 80017d2:	f7ff fe25 	bl	8001420 <write>
	setCursor(7, 3);
 80017d6:	2103      	movs	r1, #3
 80017d8:	2007      	movs	r0, #7
 80017da:	f7ff fd77 	bl	80012cc <setCursor>
	write(-1);
 80017de:	20ff      	movs	r0, #255	; 0xff
 80017e0:	f7ff fe1e 	bl	8001420 <write>
	setCursor(6, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	2006      	movs	r0, #6
 80017e8:	f7ff fd70 	bl	80012cc <setCursor>
	write(-1);
 80017ec:	20ff      	movs	r0, #255	; 0xff
 80017ee:	f7ff fe17 	bl	8001420 <write>
	setCursor(6, 1);
 80017f2:	2101      	movs	r1, #1
 80017f4:	2006      	movs	r0, #6
 80017f6:	f7ff fd69 	bl	80012cc <setCursor>
	write(-1);
 80017fa:	20ff      	movs	r0, #255	; 0xff
 80017fc:	f7ff fe10 	bl	8001420 <write>
	setCursor(6, 2);
 8001800:	2102      	movs	r1, #2
 8001802:	2006      	movs	r0, #6
 8001804:	f7ff fd62 	bl	80012cc <setCursor>
	write(-1);
 8001808:	20ff      	movs	r0, #255	; 0xff
 800180a:	f7ff fe09 	bl	8001420 <write>
	setCursor(6, 3);
 800180e:	2103      	movs	r1, #3
 8001810:	2006      	movs	r0, #6
 8001812:	f7ff fd5b 	bl	80012cc <setCursor>
	write(-1);
 8001816:	20ff      	movs	r0, #255	; 0xff
 8001818:	f7ff fe02 	bl	8001420 <write>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <print3OnScreen>:

void print3OnScreen(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	setCursor(12, 1);
 8001824:	2101      	movs	r1, #1
 8001826:	200c      	movs	r0, #12
 8001828:	f7ff fd50 	bl	80012cc <setCursor>
	write(-1);
 800182c:	20ff      	movs	r0, #255	; 0xff
 800182e:	f7ff fdf7 	bl	8001420 <write>
	setCursor(12, 2);
 8001832:	2102      	movs	r1, #2
 8001834:	200c      	movs	r0, #12
 8001836:	f7ff fd49 	bl	80012cc <setCursor>
	write(-1);
 800183a:	20ff      	movs	r0, #255	; 0xff
 800183c:	f7ff fdf0 	bl	8001420 <write>
	setCursor(12, 3);
 8001840:	2103      	movs	r1, #3
 8001842:	200c      	movs	r0, #12
 8001844:	f7ff fd42 	bl	80012cc <setCursor>
	write(-1);
 8001848:	20ff      	movs	r0, #255	; 0xff
 800184a:	f7ff fde9 	bl	8001420 <write>
	setCursor(11, 3);
 800184e:	2103      	movs	r1, #3
 8001850:	200b      	movs	r0, #11
 8001852:	f7ff fd3b 	bl	80012cc <setCursor>
	write(-1);
 8001856:	20ff      	movs	r0, #255	; 0xff
 8001858:	f7ff fde2 	bl	8001420 <write>
	setCursor(10, 3);
 800185c:	2103      	movs	r1, #3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff fd34 	bl	80012cc <setCursor>
	write(-1);
 8001864:	20ff      	movs	r0, #255	; 0xff
 8001866:	f7ff fddb 	bl	8001420 <write>
	setCursor(9, 1);
 800186a:	2101      	movs	r1, #1
 800186c:	2009      	movs	r0, #9
 800186e:	f7ff fd2d 	bl	80012cc <setCursor>
	write(-1);
 8001872:	20ff      	movs	r0, #255	; 0xff
 8001874:	f7ff fdd4 	bl	8001420 <write>
	setCursor(9, 2);
 8001878:	2102      	movs	r1, #2
 800187a:	2009      	movs	r0, #9
 800187c:	f7ff fd26 	bl	80012cc <setCursor>
	write(-1);
 8001880:	20ff      	movs	r0, #255	; 0xff
 8001882:	f7ff fdcd 	bl	8001420 <write>
	setCursor(9, 3);
 8001886:	2103      	movs	r1, #3
 8001888:	2009      	movs	r0, #9
 800188a:	f7ff fd1f 	bl	80012cc <setCursor>
	write(-1);
 800188e:	20ff      	movs	r0, #255	; 0xff
 8001890:	f7ff fdc6 	bl	8001420 <write>
	setCursor(8, 3);
 8001894:	2103      	movs	r1, #3
 8001896:	2008      	movs	r0, #8
 8001898:	f7ff fd18 	bl	80012cc <setCursor>
	write(-1);
 800189c:	20ff      	movs	r0, #255	; 0xff
 800189e:	f7ff fdbf 	bl	8001420 <write>
	setCursor(7, 3);
 80018a2:	2103      	movs	r1, #3
 80018a4:	2007      	movs	r0, #7
 80018a6:	f7ff fd11 	bl	80012cc <setCursor>
	write(-1);
 80018aa:	20ff      	movs	r0, #255	; 0xff
 80018ac:	f7ff fdb8 	bl	8001420 <write>
	setCursor(6, 1);
 80018b0:	2101      	movs	r1, #1
 80018b2:	2006      	movs	r0, #6
 80018b4:	f7ff fd0a 	bl	80012cc <setCursor>
	write(-1);
 80018b8:	20ff      	movs	r0, #255	; 0xff
 80018ba:	f7ff fdb1 	bl	8001420 <write>
	setCursor(6, 2);
 80018be:	2102      	movs	r1, #2
 80018c0:	2006      	movs	r0, #6
 80018c2:	f7ff fd03 	bl	80012cc <setCursor>
	write(-1);
 80018c6:	20ff      	movs	r0, #255	; 0xff
 80018c8:	f7ff fdaa 	bl	8001420 <write>
	setCursor(6, 3);
 80018cc:	2103      	movs	r1, #3
 80018ce:	2006      	movs	r0, #6
 80018d0:	f7ff fcfc 	bl	80012cc <setCursor>
	write(-1);
 80018d4:	20ff      	movs	r0, #255	; 0xff
 80018d6:	f7ff fda3 	bl	8001420 <write>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <clearScreen>:

void clearScreen() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 20; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e016      	b.n	800191a <clearScreen+0x3a>
		for(int j = 0; j < 4; j++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	e00d      	b.n	800190e <clearScreen+0x2e>
			setCursor(i, j);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fce5 	bl	80012cc <setCursor>
			print(" ");
 8001902:	480a      	ldr	r0, [pc, #40]	; (800192c <clearScreen+0x4c>)
 8001904:	f7ff fd2a 	bl	800135c <print>
		for(int j = 0; j < 4; j++) {
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b03      	cmp	r3, #3
 8001912:	ddee      	ble.n	80018f2 <clearScreen+0x12>
	for (int i = 0 ; i < 20; i++) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b13      	cmp	r3, #19
 800191e:	dde5      	ble.n	80018ec <clearScreen+0xc>
		}
	}
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	0800c568 	.word	0x0800c568

08001930 <startGame>:

void startGame(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	isInMenu = 0;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <startGame+0x44>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
	clearScreen();
 800193a:	f7ff ffd1 	bl	80018e0 <clearScreen>
	print1OnScreen();
 800193e:	f7ff feb1 	bl	80016a4 <print1OnScreen>
	clearScreen();
 8001942:	f7ff ffcd 	bl	80018e0 <clearScreen>
	print2OnScreen();
 8001946:	f7ff fee9 	bl	800171c <print2OnScreen>
	clearScreen();
 800194a:	f7ff ffc9 	bl	80018e0 <clearScreen>
	print3OnScreen();
 800194e:	f7ff ff67 	bl	8001820 <print3OnScreen>
	clearScreen();
 8001952:	f7ff ffc5 	bl	80018e0 <clearScreen>
	genarateBoard(20);
 8001956:	2014      	movs	r0, #20
 8001958:	f000 fd4e 	bl	80023f8 <genarateBoard>
	isGameStarted = 1;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <startGame+0x48>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
	lockMoving = 0;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <startGame+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <startGame+0x50>)
 800196a:	f005 fe09 	bl	8007580 <HAL_TIM_Base_Start_IT>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000100 	.word	0x20000100
 8001978:	20000108 	.word	0x20000108
 800197c:	2000004c 	.word	0x2000004c
 8001980:	20000164 	.word	0x20000164

08001984 <showGameOverView>:

void showGameOverView(){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  isGameStarted = 0;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <showGameOverView+0x9c>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  lockMoving = 1;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <showGameOverView+0xa0>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  isInOverViewPage = 1;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <showGameOverView+0xa4>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  clear();
 800199a:	f7ff fc8d 	bl	80012b8 <clear>
  setCursor(12,1);
 800199e:	2101      	movs	r1, #1
 80019a0:	200c      	movs	r0, #12
 80019a2:	f7ff fc93 	bl	80012cc <setCursor>
  print("Doolde");
 80019a6:	4821      	ldr	r0, [pc, #132]	; (8001a2c <showGameOverView+0xa8>)
 80019a8:	f7ff fcd8 	bl	800135c <print>
  setCursor(12,2);
 80019ac:	2102      	movs	r1, #2
 80019ae:	200c      	movs	r0, #12
 80019b0:	f7ff fc8c 	bl	80012cc <setCursor>
  print("Jump");
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <showGameOverView+0xac>)
 80019b6:	f7ff fcd1 	bl	800135c <print>
  setCursor(3,1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff fc85 	bl	80012cc <setCursor>
  write(DOODLER_NUM);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fd2c 	bl	8001420 <write>
  setCursor(4,1);
 80019c8:	2101      	movs	r1, #1
 80019ca:	2004      	movs	r0, #4
 80019cc:	f7ff fc7e 	bl	80012cc <setCursor>
  write(STAIR_NUM);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fd25 	bl	8001420 <write>
  setCursor(5,1);
 80019d6:	2101      	movs	r1, #1
 80019d8:	2005      	movs	r0, #5
 80019da:	f7ff fc77 	bl	80012cc <setCursor>
  write(BROKEN_STAIR_NUM);
 80019de:	2002      	movs	r0, #2
 80019e0:	f7ff fd1e 	bl	8001420 <write>
  setCursor(6,1);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2006      	movs	r0, #6
 80019e8:	f7ff fc70 	bl	80012cc <setCursor>
  write(HOLE_NUM);
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff fd17 	bl	8001420 <write>
  setCursor(7,1);
 80019f2:	2101      	movs	r1, #1
 80019f4:	2007      	movs	r0, #7
 80019f6:	f7ff fc69 	bl	80012cc <setCursor>
  write(COIL_NUM);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f7ff fd10 	bl	8001420 <write>
  setCursor(8,1);
 8001a00:	2101      	movs	r1, #1
 8001a02:	2008      	movs	r0, #8
 8001a04:	f7ff fc62 	bl	80012cc <setCursor>
  write(MONSTER_NUM);
 8001a08:	2005      	movs	r0, #5
 8001a0a:	f7ff fd09 	bl	8001420 <write>
  setCursor(3,3);
 8001a0e:	2103      	movs	r1, #3
 8001a10:	2003      	movs	r0, #3
 8001a12:	f7ff fc5b 	bl	80012cc <setCursor>
  print("5.Menu");
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <showGameOverView+0xb0>)
 8001a18:	f7ff fca0 	bl	800135c <print>
//  BUZZER_Play_GameOfThrones();
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000108 	.word	0x20000108
 8001a24:	2000004c 	.word	0x2000004c
 8001a28:	20000050 	.word	0x20000050
 8001a2c:	0800c56c 	.word	0x0800c56c
 8001a30:	0800c574 	.word	0x0800c574
 8001a34:	0800c57c 	.word	0x0800c57c

08001a38 <menu>:

void menu(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  isInOverViewPage = 0;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <menu+0x3c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  isInMembersPage = 0;
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <menu+0x40>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
  isInMenu = 1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <menu+0x44>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
  clear();
 8001a4e:	f7ff fc33 	bl	80012b8 <clear>
  setCursor(6,0);
 8001a52:	2100      	movs	r1, #0
 8001a54:	2006      	movs	r0, #6
 8001a56:	f7ff fc39 	bl	80012cc <setCursor>
  print("2.Start");
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <menu+0x48>)
 8001a5c:	f7ff fc7e 	bl	800135c <print>
  setCursor(6,2);
 8001a60:	2102      	movs	r1, #2
 8001a62:	2006      	movs	r0, #6
 8001a64:	f7ff fc32 	bl	80012cc <setCursor>
  print("3.About");
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <menu+0x4c>)
 8001a6a:	f7ff fc77 	bl	800135c <print>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000050 	.word	0x20000050
 8001a78:	20000104 	.word	0x20000104
 8001a7c:	20000100 	.word	0x20000100
 8001a80:	0800c584 	.word	0x0800c584
 8001a84:	0800c58c 	.word	0x0800c58c

08001a88 <showGroupMembersName>:

void showGroupMembersName(){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  isInMenu = 0;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <showGroupMembersName+0x44>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  isInMembersPage = 1;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <showGroupMembersName+0x48>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  clear();
 8001a98:	f7ff fc0e 	bl	80012b8 <clear>
  setCursor(5,0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2005      	movs	r0, #5
 8001aa0:	f7ff fc14 	bl	80012cc <setCursor>
  print("SaeedRahmani");
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <showGroupMembersName+0x4c>)
 8001aa6:	f7ff fc59 	bl	800135c <print>
  setCursor(5,1);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2005      	movs	r0, #5
 8001aae:	f7ff fc0d 	bl	80012cc <setCursor>
  print("MohammadRaee");
 8001ab2:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <showGroupMembersName+0x50>)
 8001ab4:	f7ff fc52 	bl	800135c <print>
  setCursor(8,3);
 8001ab8:	2103      	movs	r1, #3
 8001aba:	2008      	movs	r0, #8
 8001abc:	f7ff fc06 	bl	80012cc <setCursor>
  print("6.Menu");
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <showGroupMembersName+0x54>)
 8001ac2:	f7ff fc4b 	bl	800135c <print>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000100 	.word	0x20000100
 8001ad0:	20000104 	.word	0x20000104
 8001ad4:	0800c594 	.word	0x0800c594
 8001ad8:	0800c5a4 	.word	0x0800c5a4
 8001adc:	0800c5b4 	.word	0x0800c5b4

08001ae0 <changeBoard>:

void changeBoard(int lastPosition [], int curPosotion [],int charNum , int moveOrRemoveOrWrite){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  if(moveOrRemoveOrWrite == MOVE){
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d117      	bne.n	8001b24 <changeBoard+0x44>
    board[lastPosition[0]][lastPosition[1]] = EMPTY_CELL_NUM;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	491b      	ldr	r1, [pc, #108]	; (8001b6c <changeBoard+0x8c>)
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    board[curPosotion[0]][curPosotion[1]] = charNum;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	3304      	adds	r3, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4915      	ldr	r1, [pc, #84]	; (8001b6c <changeBoard+0x8c>)
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  } else if(moveOrRemoveOrWrite == REMOVE){
    board[lastPosition[0]][lastPosition[1]] = EMPTY_CELL_NUM;
  } else if(moveOrRemoveOrWrite == WRITE){
    board[curPosotion[0]][curPosotion[1]] = charNum;
  }
}
 8001b22:	e01d      	b.n	8001b60 <changeBoard+0x80>
  } else if(moveOrRemoveOrWrite == REMOVE){
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <changeBoard+0x64>
    board[lastPosition[0]][lastPosition[1]] = EMPTY_CELL_NUM;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3304      	adds	r3, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	490d      	ldr	r1, [pc, #52]	; (8001b6c <changeBoard+0x8c>)
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b42:	e00d      	b.n	8001b60 <changeBoard+0x80>
  } else if(moveOrRemoveOrWrite == WRITE){
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d10a      	bne.n	8001b60 <changeBoard+0x80>
    board[curPosotion[0]][curPosotion[1]] = charNum;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3304      	adds	r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4905      	ldr	r1, [pc, #20]	; (8001b6c <changeBoard+0x8c>)
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	200001fc 	.word	0x200001fc

08001b70 <horizontalMoving>:

void horizontalMoving(int direction){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  changeBoard(doodlerPosition,doodlerPosition,EMPTY_CELL_NUM,WRITE);
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	4923      	ldr	r1, [pc, #140]	; (8001c0c <horizontalMoving+0x9c>)
 8001b80:	4822      	ldr	r0, [pc, #136]	; (8001c0c <horizontalMoving+0x9c>)
 8001b82:	f7ff ffad 	bl	8001ae0 <changeBoard>
  setCursor(doodlerPosition[0],doodlerPosition[1]);
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <horizontalMoving+0x9c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <horizontalMoving+0x9c>)
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fb99 	bl	80012cc <setCursor>
  print(" ");
 8001b9a:	481d      	ldr	r0, [pc, #116]	; (8001c10 <horizontalMoving+0xa0>)
 8001b9c:	f7ff fbde 	bl	800135c <print>
  if(direction == LEFT){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d10d      	bne.n	8001bc4 <horizontalMoving+0x54>
    if(doodlerPosition[1] > 0){
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <horizontalMoving+0x9c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd05      	ble.n	8001bbc <horizontalMoving+0x4c>
      doodlerPosition[1] -= 1;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <horizontalMoving+0x9c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <horizontalMoving+0x9c>)
 8001bb8:	6053      	str	r3, [r2, #4]
 8001bba:	e010      	b.n	8001bde <horizontalMoving+0x6e>
    }else {
      doodlerPosition[1] = 3;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <horizontalMoving+0x9c>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	e00c      	b.n	8001bde <horizontalMoving+0x6e>
    }
  }else {
    if(doodlerPosition[1] < 3){
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <horizontalMoving+0x9c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	dc05      	bgt.n	8001bd8 <horizontalMoving+0x68>
      doodlerPosition[1] += 1;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <horizontalMoving+0x9c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <horizontalMoving+0x9c>)
 8001bd4:	6053      	str	r3, [r2, #4]
 8001bd6:	e002      	b.n	8001bde <horizontalMoving+0x6e>
    }else {
      doodlerPosition[1] = 0;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <horizontalMoving+0x9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
    }
  }
  changeBoard(doodlerPosition,doodlerPosition,DOODLER_NUM,WRITE);
 8001bde:	2302      	movs	r3, #2
 8001be0:	2200      	movs	r2, #0
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <horizontalMoving+0x9c>)
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <horizontalMoving+0x9c>)
 8001be6:	f7ff ff7b 	bl	8001ae0 <changeBoard>
  setCursor(doodlerPosition[0],doodlerPosition[1]);
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <horizontalMoving+0x9c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <horizontalMoving+0x9c>)
 8001bf2:	6852      	ldr	r2, [r2, #4]
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb67 	bl	80012cc <setCursor>
  write(DOODLER_NUM);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fc0e 	bl	8001420 <write>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200000f0 	.word	0x200000f0
 8001c10:	0800c568 	.word	0x0800c568

08001c14 <Rows_Set_Mode>:

void Rows_Set_Mode(uint8_t mode)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, mode ? (GPIO_PIN_SET) : (GPIO_PIN_RESET));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c30:	4815      	ldr	r0, [pc, #84]	; (8001c88 <Rows_Set_Mode+0x74>)
 8001c32:	f003 fe89 	bl	8005948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, mode ? (GPIO_PIN_SET) : (GPIO_PIN_RESET));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <Rows_Set_Mode+0x74>)
 8001c4a:	f003 fe7d 	bl	8005948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, mode ? (GPIO_PIN_SET) : (GPIO_PIN_RESET));
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <Rows_Set_Mode+0x74>)
 8001c62:	f003 fe71 	bl	8005948 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, mode ? (GPIO_PIN_SET) : (GPIO_PIN_RESET));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <Rows_Set_Mode+0x74>)
 8001c7a:	f003 fe65 	bl	8005948 <HAL_GPIO_WritePin>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	48000400 	.word	0x48000400

08001c8c <Get_Pressed_Row>:


uint8_t Get_Pressed_Row(uint16_t GPIO_Pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
	Rows_Set_Mode(0);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff ffbc 	bl	8001c14 <Rows_Set_Mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	482b      	ldr	r0, [pc, #172]	; (8001d50 <Get_Pressed_Row+0xc4>)
 8001ca4:	f003 fe50 	bl	8005948 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin)==1){
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4829      	ldr	r0, [pc, #164]	; (8001d54 <Get_Pressed_Row+0xc8>)
 8001cae:	f003 fe33 	bl	8005918 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d104      	bne.n	8001cc2 <Get_Pressed_Row+0x36>
		Rows_Set_Mode(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ffab 	bl	8001c14 <Rows_Set_Mode>
		return 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e042      	b.n	8001d48 <Get_Pressed_Row+0xbc>

	}
	Rows_Set_Mode(0);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff ffa6 	bl	8001c14 <Rows_Set_Mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cce:	4820      	ldr	r0, [pc, #128]	; (8001d50 <Get_Pressed_Row+0xc4>)
 8001cd0:	f003 fe3a 	bl	8005948 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin)==1){
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <Get_Pressed_Row+0xc8>)
 8001cda:	f003 fe1d 	bl	8005918 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d104      	bne.n	8001cee <Get_Pressed_Row+0x62>
		Rows_Set_Mode(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff ff95 	bl	8001c14 <Rows_Set_Mode>
		return 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e02c      	b.n	8001d48 <Get_Pressed_Row+0xbc>
	}
	Rows_Set_Mode(0);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff ff90 	bl	8001c14 <Rows_Set_Mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfa:	4815      	ldr	r0, [pc, #84]	; (8001d50 <Get_Pressed_Row+0xc4>)
 8001cfc:	f003 fe24 	bl	8005948 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin)==1){
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4813      	ldr	r0, [pc, #76]	; (8001d54 <Get_Pressed_Row+0xc8>)
 8001d06:	f003 fe07 	bl	8005918 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d104      	bne.n	8001d1a <Get_Pressed_Row+0x8e>
		Rows_Set_Mode(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff ff7f 	bl	8001c14 <Rows_Set_Mode>
		return 2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	e016      	b.n	8001d48 <Get_Pressed_Row+0xbc>
	}
	Rows_Set_Mode(0);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff ff7a 	bl	8001c14 <Rows_Set_Mode>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d26:	480a      	ldr	r0, [pc, #40]	; (8001d50 <Get_Pressed_Row+0xc4>)
 8001d28:	f003 fe0e 	bl	8005948 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin)==1){
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <Get_Pressed_Row+0xc8>)
 8001d32:	f003 fdf1 	bl	8005918 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d104      	bne.n	8001d46 <Get_Pressed_Row+0xba>
		Rows_Set_Mode(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff ff69 	bl	8001c14 <Rows_Set_Mode>
		return 3;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e000      	b.n	8001d48 <Get_Pressed_Row+0xbc>
	}
	return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	48000400 	.word	0x48000400
 8001d54:	48000800 	.word	0x48000800

08001d58 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]

	if((HAL_GetTick() - now ) < 600){
 8001d62:	f001 ffff 	bl	8003d64 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d72:	f0c0 808a 	bcc.w	8001e8a <HAL_GPIO_EXTI_Callback+0x132>
		return;
	}
	//LED On board
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8001d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7a:	4847      	ldr	r0, [pc, #284]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x140>)
 8001d7c:	f003 fdfc 	bl	8005978 <HAL_GPIO_TogglePin>

	int number = 0, row;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
	row = Get_Pressed_Row(GPIO_Pin);
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff80 	bl	8001c8c <Get_Pressed_Row>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60bb      	str	r3, [r7, #8]
	switch(GPIO_Pin)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d827      	bhi.n	8001de8 <HAL_GPIO_EXTI_Callback+0x90>
 8001d98:	a201      	add	r2, pc, #4	; (adr r2, 8001da0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001dc1 	.word	0x08001dc1
 8001da4:	08001dcb 	.word	0x08001dcb
 8001da8:	08001de9 	.word	0x08001de9
 8001dac:	08001dd5 	.word	0x08001dd5
 8001db0:	08001de9 	.word	0x08001de9
 8001db4:	08001de9 	.word	0x08001de9
 8001db8:	08001de9 	.word	0x08001de9
 8001dbc:	08001ddf 	.word	0x08001ddf
	{
		case GPIO_PIN_0:{
			number = 4 * row + 1;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
			break;
 8001dc8:	e00e      	b.n	8001de8 <HAL_GPIO_EXTI_Callback+0x90>
		}

		case GPIO_PIN_1:{
			number = 4 * row + 2;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
			break;
 8001dd2:	e009      	b.n	8001de8 <HAL_GPIO_EXTI_Callback+0x90>
		}
		case GPIO_PIN_2:{
			number = 4 * row + 3;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3303      	adds	r3, #3
 8001dda:	60fb      	str	r3, [r7, #12]
			break;
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_EXTI_Callback+0x90>
		}
		case GPIO_PIN_3:{
			number = 4 * row + 4;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	60fb      	str	r3, [r7, #12]
			break;
 8001de6:	bf00      	nop
		}
	}
	Rows_Set_Mode(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff ff13 	bl	8001c14 <Rows_Set_Mode>
	now = HAL_GetTick();
 8001dee:	f001 ffb9 	bl	8003d64 <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001df6:	6013      	str	r3, [r2, #0]
	if (number==1 && lockMoving == 0){
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d108      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0xb8>
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x144>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d104      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0xb8>
		horizontalMoving(LEFT);
 8001e06:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0a:	f7ff feb1 	bl	8001b70 <horizontalMoving>
 8001e0e:	e03d      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	}
	else if(number == 2 && isInMenu == 1) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d106      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0xcc>
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0xcc>
		startGame();
 8001e1e:	f7ff fd87 	bl	8001930 <startGame>
 8001e22:	e033      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	}
	else if(number == 3 && isInMenu == 1){
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d106      	bne.n	8001e38 <HAL_GPIO_EXTI_Callback+0xe0>
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_GPIO_EXTI_Callback+0xe0>
		showGroupMembersName();
 8001e32:	f7ff fe29 	bl	8001a88 <showGroupMembersName>
 8001e36:	e029      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	}
	else if (number==4 && lockMoving == 0){
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d107      	bne.n	8001e4e <HAL_GPIO_EXTI_Callback+0xf6>
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x144>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <HAL_GPIO_EXTI_Callback+0xf6>
		horizontalMoving(RIGHT);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fe92 	bl	8001b70 <horizontalMoving>
 8001e4c:	e01e      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	}
	else if (number==5 && isInOverViewPage == 1) {
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d106      	bne.n	8001e62 <HAL_GPIO_EXTI_Callback+0x10a>
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_GPIO_EXTI_Callback+0x10a>
		menu();
 8001e5c:	f7ff fdec 	bl	8001a38 <menu>
 8001e60:	e014      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	}
	else if(number == 6 && isInMembersPage == 1){
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d106      	bne.n	8001e76 <HAL_GPIO_EXTI_Callback+0x11e>
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d102      	bne.n	8001e76 <HAL_GPIO_EXTI_Callback+0x11e>
		menu();
 8001e70:	f7ff fde2 	bl	8001a38 <menu>
 8001e74:	e00a      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
	} else if (number==8 && isShotInScreen==0){
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d107      	bne.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_GPIO_EXTI_Callback+0x154>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
		shot();
 8001e84:	f7ff fbc0 	bl	8001608 <shot>
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x134>
		return;
 8001e8a:	bf00      	nop
	}
}
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000110 	.word	0x20000110
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	2000004c 	.word	0x2000004c
 8001ea0:	20000100 	.word	0x20000100
 8001ea4:	20000050 	.word	0x20000050
 8001ea8:	20000104 	.word	0x20000104
 8001eac:	2000010c 	.word	0x2000010c

08001eb0 <numberToBCD>:
/////////////////////////////end keypad//////////////////

//////////////////////////// 7 Segment ///////////////////
void numberToBCD(int i){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	int x1=i&1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
	int x2=i&2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
	int x3=i&4;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60fb      	str	r3, [r7, #12]
	int x4=i&8;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	60bb      	str	r3, [r7, #8]
	if (x1>0) x1=1;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dd01      	ble.n	8001ee2 <numberToBCD+0x32>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
	if (x2>0) x2=1;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dd01      	ble.n	8001eec <numberToBCD+0x3c>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
	if (x3>0) x3=1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dd01      	ble.n	8001ef6 <numberToBCD+0x46>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
	if (x4>0) x4=1;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	dd01      	ble.n	8001f00 <numberToBCD+0x50>
 8001efc:	2301      	movs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, x1);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0a:	480f      	ldr	r0, [pc, #60]	; (8001f48 <numberToBCD+0x98>)
 8001f0c:	f003 fd1c 	bl	8005948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, x2);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1a:	480b      	ldr	r0, [pc, #44]	; (8001f48 <numberToBCD+0x98>)
 8001f1c:	f003 fd14 	bl	8005948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, x3);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <numberToBCD+0x98>)
 8001f2c:	f003 fd0c 	bl	8005948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, x4);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <numberToBCD+0x98>)
 8001f3c:	f003 fd04 	bl	8005948 <HAL_GPIO_WritePin>
}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	48000c00 	.word	0x48000c00

08001f4c <HAL_ADC_ConvCpltCallback>:

////////////////////////// end 7 segment//////////////////

uint32_t value = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  //	if(hadc->Instance == ADC1)
  //	{

  value = HAL_ADC_GetValue(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f002 fa69 	bl	800442c <HAL_ADC_GetValue>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_ADC_ConvCpltCallback+0x40>)
 8001f5e:	6013      	str	r3, [r2, #0]
  int tmp=((int)value)%10;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_ADC_ConvCpltCallback+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x44>)
 8001f68:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6c:	1099      	asrs	r1, r3, #2
 8001f6e:	17d3      	asrs	r3, r2, #31
 8001f70:	1ac9      	subs	r1, r1, r3
 8001f72:	460b      	mov	r3, r1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	60fb      	str	r3, [r7, #12]
  difficulty=3;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x48>)
 8001f80:	2203      	movs	r2, #3
 8001f82:	601a      	str	r2, [r3, #0]
//  HAL_ADC_Start_IT(&hadc1);
  //	}
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000114 	.word	0x20000114
 8001f90:	66666667 	.word	0x66666667
 8001f94:	2000003c 	.word	0x2000003c

08001f98 <getRandom>:

int getRandom(int maxNum){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  int rand_num= rand() % (maxNum);
 8001fa0:	f006 fe08 	bl	8008bb4 <rand>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fb93 f2f2 	sdiv	r2, r3, r2
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	fb01 f202 	mul.w	r2, r1, r2
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  return rand_num;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <initialCharactorToBoard>:

void initialCharactorToBoard(int charCount, int charNum, int blankRow){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  for(int i = 0; i < charCount; i++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e028      	b.n	8002024 <initialCharactorToBoard+0x64>
    int sw = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]
    while(sw){
 8001fd6:	e01f      	b.n	8002018 <initialCharactorToBoard+0x58>
      int row = getRandom(20);
 8001fd8:	2014      	movs	r0, #20
 8001fda:	f7ff ffdd 	bl	8001f98 <getRandom>
 8001fde:	6178      	str	r0, [r7, #20]
      int col = getRandom(4);
 8001fe0:	2004      	movs	r0, #4
 8001fe2:	f7ff ffd9 	bl	8001f98 <getRandom>
 8001fe6:	6138      	str	r0, [r7, #16]
      if(board[19-row][col] == -1){
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f1c3 0313 	rsb	r3, r3, #19
 8001fee:	4912      	ldr	r1, [pc, #72]	; (8002038 <initialCharactorToBoard+0x78>)
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d10b      	bne.n	8002018 <initialCharactorToBoard+0x58>
        board[19-row][col] = charNum;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f1c3 0313 	rsb	r3, r3, #19
 8002006:	490c      	ldr	r1, [pc, #48]	; (8002038 <initialCharactorToBoard+0x78>)
 8002008:	009a      	lsls	r2, r3, #2
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        sw = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
    while(sw){
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1dc      	bne.n	8001fd8 <initialCharactorToBoard+0x18>
  for(int i = 0; i < charCount; i++){
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbd2      	blt.n	8001fd2 <initialCharactorToBoard+0x12>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200001fc 	.word	0x200001fc

0800203c <checkStairInsideDoodler>:

int checkStairInsideDoodler(int accessRowCount){
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  int sw = 1;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  for(int i = doodlerPosition[0];i<doodlerPosition[0] + accessRowCount && sw ==1;i++){
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <checkStairInsideDoodler+0x74>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	e019      	b.n	8002084 <checkStairInsideDoodler+0x48>
    for(int j = 0; j<4 && sw==1 ;j++){
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e00d      	b.n	8002072 <checkStairInsideDoodler+0x36>
      if(board[i][j]==STAIR_NUM) sw=0;
 8002056:	4917      	ldr	r1, [pc, #92]	; (80020b4 <checkStairInsideDoodler+0x78>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	009a      	lsls	r2, r3, #2
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <checkStairInsideDoodler+0x30>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
    for(int j = 0; j<4 && sw==1 ;j++){
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b03      	cmp	r3, #3
 8002076:	dc02      	bgt.n	800207e <checkStairInsideDoodler+0x42>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d0eb      	beq.n	8002056 <checkStairInsideDoodler+0x1a>
  for(int i = doodlerPosition[0];i<doodlerPosition[0] + accessRowCount && sw ==1;i++){
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	3301      	adds	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <checkStairInsideDoodler+0x74>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	da02      	bge.n	8002098 <checkStairInsideDoodler+0x5c>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d0db      	beq.n	8002050 <checkStairInsideDoodler+0x14>
    }
  }
  if(sw==1) return 0;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <checkStairInsideDoodler+0x66>
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <checkStairInsideDoodler+0x68>
  else return 1;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	200000f0 	.word	0x200000f0
 80020b4:	200001fc 	.word	0x200001fc

080020b8 <validateInitializeBoard>:

bool validateInitializeBoard(int blankRow){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  int sw = 1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
  for(int i = 20-blankRow; i<20 && sw==1; i++){
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1c3 0314 	rsb	r3, r3, #20
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	e045      	b.n	800215a <validateInitializeBoard+0xa2>
    if(board[i][0]==HOLE_NUM && board[i][1]==HOLE_NUM && board[i][2]==HOLE_NUM && board[i][3]==HOLE_NUM ){
 80020ce:	4a2f      	ldr	r2, [pc, #188]	; (800218c <validateInitializeBoard+0xd4>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d11a      	bne.n	8002112 <validateInitializeBoard+0x5a>
 80020dc:	4a2b      	ldr	r2, [pc, #172]	; (800218c <validateInitializeBoard+0xd4>)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d112      	bne.n	8002112 <validateInitializeBoard+0x5a>
 80020ec:	4a27      	ldr	r2, [pc, #156]	; (800218c <validateInitializeBoard+0xd4>)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	3308      	adds	r3, #8
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d10a      	bne.n	8002112 <validateInitializeBoard+0x5a>
 80020fc:	4a23      	ldr	r2, [pc, #140]	; (800218c <validateInitializeBoard+0xd4>)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	330c      	adds	r3, #12
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d102      	bne.n	8002112 <validateInitializeBoard+0x5a>
       sw = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e020      	b.n	8002154 <validateInitializeBoard+0x9c>
     }
     else if(board[i][0]==MONSTER_NUM && board[i][1]==MONSTER_NUM && board[i][2]==MONSTER_NUM && board[i][3]==MONSTER_NUM ){
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <validateInitializeBoard+0xd4>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d119      	bne.n	8002154 <validateInitializeBoard+0x9c>
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <validateInitializeBoard+0xd4>)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d111      	bne.n	8002154 <validateInitializeBoard+0x9c>
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <validateInitializeBoard+0xd4>)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	3308      	adds	r3, #8
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d109      	bne.n	8002154 <validateInitializeBoard+0x9c>
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <validateInitializeBoard+0xd4>)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4413      	add	r3, r2
 8002148:	330c      	adds	r3, #12
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d101      	bne.n	8002154 <validateInitializeBoard+0x9c>
       sw = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  for(int i = 20-blankRow; i<20 && sw==1; i++){
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b13      	cmp	r3, #19
 800215e:	dc02      	bgt.n	8002166 <validateInitializeBoard+0xae>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d0b3      	beq.n	80020ce <validateInitializeBoard+0x16>
     }
  }
  if(sw == 1){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <validateInitializeBoard+0xc0>
    sw = checkStairInsideDoodler(upStatus);
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <validateInitializeBoard+0xd8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff63 	bl	800203c <checkStairInsideDoodler>
 8002176:	60f8      	str	r0, [r7, #12]
  }
  if(sw == 1) return true;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <validateInitializeBoard+0xca>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <validateInitializeBoard+0xcc>
  else return false;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200001fc 	.word	0x200001fc
 8002190:	20000044 	.word	0x20000044

08002194 <updateScore>:

void updateScore(int upCount){
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  score += upCount;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <updateScore+0x20>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <updateScore+0x20>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	200000ec 	.word	0x200000ec

080021b8 <changeShot>:

void changeShot(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  setCursor(shotPosition[0],shotPosition[1]);
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <changeShot+0x4c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <changeShot+0x4c>)
 80021c4:	6852      	ldr	r2, [r2, #4]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f87e 	bl	80012cc <setCursor>
  print(" ");
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <changeShot+0x50>)
 80021d2:	f7ff f8c3 	bl	800135c <print>
  shotPosition[0] -= newPosition[0];
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <changeShot+0x4c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <changeShot+0x54>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	4a08      	ldr	r2, [pc, #32]	; (8002204 <changeShot+0x4c>)
 80021e2:	6013      	str	r3, [r2, #0]
  setCursor(shotPosition[0],shotPosition[1]);
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <changeShot+0x4c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <changeShot+0x4c>)
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f86a 	bl	80012cc <setCursor>
  write(SHOT_NUM);
 80021f8:	2006      	movs	r0, #6
 80021fa:	f7ff f911 	bl	8001420 <write>
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000015c 	.word	0x2000015c
 8002208:	0800c568 	.word	0x0800c568
 800220c:	20000154 	.word	0x20000154

08002210 <pageUp>:

void pageUp(){
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
  if(newPosition[0] != 0){
 8002216:	4b56      	ldr	r3, [pc, #344]	; (8002370 <pageUp+0x160>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80a4 	beq.w	8002368 <pageUp+0x158>
    for(int i = 0; i < newPosition[0]; i++){
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e029      	b.n	800227a <pageUp+0x6a>
      for(int j = 0; j < 4; j++){
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	e020      	b.n	800226e <pageUp+0x5e>
        if(board[i][j] != EMPTY_CELL_NUM){
 800222c:	4951      	ldr	r1, [pc, #324]	; (8002374 <pageUp+0x164>)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4413      	add	r3, r2
 8002236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d013      	beq.n	8002268 <pageUp+0x58>
          board[i][j] = EMPTY_CELL_NUM;
 8002240:	494c      	ldr	r1, [pc, #304]	; (8002374 <pageUp+0x164>)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	f04f 32ff 	mov.w	r2, #4294967295
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          setCursor(i,j);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f835 	bl	80012cc <setCursor>
          print(" ");
 8002262:	4845      	ldr	r0, [pc, #276]	; (8002378 <pageUp+0x168>)
 8002264:	f7ff f87a 	bl	800135c <print>
      for(int j = 0; j < 4; j++){
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3301      	adds	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b03      	cmp	r3, #3
 8002272:	dddb      	ble.n	800222c <pageUp+0x1c>
    for(int i = 0; i < newPosition[0]; i++){
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <pageUp+0x160>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbd0      	blt.n	8002226 <pageUp+0x16>
        }
      }
    }
    for(int i=newPosition[0];i<20;i++){
 8002284:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <pageUp+0x160>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	e052      	b.n	8002332 <pageUp+0x122>
      for(int j =0 ; j<4; j++){
 800228c:	2300      	movs	r3, #0
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	e049      	b.n	8002326 <pageUp+0x116>
        if(board[i][j] != EMPTY_CELL_NUM){
 8002292:	4938      	ldr	r1, [pc, #224]	; (8002374 <pageUp+0x164>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	009a      	lsls	r2, r3, #2
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4413      	add	r3, r2
 800229c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d03c      	beq.n	8002320 <pageUp+0x110>
          setCursor(i,j);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f80b 	bl	80012cc <setCursor>
          print(" ");
 80022b6:	4830      	ldr	r0, [pc, #192]	; (8002378 <pageUp+0x168>)
 80022b8:	f7ff f850 	bl	800135c <print>
          setCursor(i-newPosition[0],j);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <pageUp+0x160>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fffb 	bl	80012cc <setCursor>
          write(board[i][j]);
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <pageUp+0x164>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f89a 	bl	8001420 <write>
          board[i-newPosition[0]][j]=board[i][j];
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <pageUp+0x160>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	481f      	ldr	r0, [pc, #124]	; (8002374 <pageUp+0x164>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	0091      	lsls	r1, r2, #2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	440a      	add	r2, r1
 80022fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002302:	481c      	ldr	r0, [pc, #112]	; (8002374 <pageUp+0x164>)
 8002304:	0099      	lsls	r1, r3, #2
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	440b      	add	r3, r1
 800230a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          board[i][j] = EMPTY_CELL_NUM;
 800230e:	4919      	ldr	r1, [pc, #100]	; (8002374 <pageUp+0x164>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for(int j =0 ; j<4; j++){
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b03      	cmp	r3, #3
 800232a:	ddb2      	ble.n	8002292 <pageUp+0x82>
    for(int i=newPosition[0];i<20;i++){
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3301      	adds	r3, #1
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b13      	cmp	r3, #19
 8002336:	dda9      	ble.n	800228c <pageUp+0x7c>
        }
      }
    }
    if (isShotInScreen==1){
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <pageUp+0x16c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <pageUp+0x134>
    	changeShot();
 8002340:	f7ff ff3a 	bl	80021b8 <changeShot>
    }

    doodlerPosition[0] -= newPosition[0];
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <pageUp+0x170>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <pageUp+0x160>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <pageUp+0x170>)
 8002350:	6013      	str	r3, [r2, #0]
    genarateBoard(newPosition[0]);
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <pageUp+0x160>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f84e 	bl	80023f8 <genarateBoard>
    updateScore(newPosition[0]+1);
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <pageUp+0x160>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff16 	bl	8002194 <updateScore>
  }
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000154 	.word	0x20000154
 8002374:	200001fc 	.word	0x200001fc
 8002378:	0800c568 	.word	0x0800c568
 800237c:	2000010c 	.word	0x2000010c
 8002380:	200000f0 	.word	0x200000f0

08002384 <printBoard>:

void printBoard(int minRow){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  for(int i = minRow; i< 20;i++){
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e028      	b.n	80023e4 <printBoard+0x60>
    for(int j = 0; j<4;j++){
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	e01f      	b.n	80023d8 <printBoard+0x54>
      if(board[i][j] != -1){
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <printBoard+0x70>)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	009a      	lsls	r2, r3, #2
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d012      	beq.n	80023d2 <printBoard+0x4e>
        setCursor(i,j);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe ff88 	bl	80012cc <setCursor>
        write(board[i][j]);
 80023bc:	490d      	ldr	r1, [pc, #52]	; (80023f4 <printBoard+0x70>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff f827 	bl	8001420 <write>
    for(int j = 0; j<4;j++){
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	dddc      	ble.n	8002398 <printBoard+0x14>
  for(int i = minRow; i< 20;i++){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b13      	cmp	r3, #19
 80023e8:	ddd3      	ble.n	8002392 <printBoard+0xe>
      }
    }
  }
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	200001fc 	.word	0x200001fc

080023f8 <genarateBoard>:

void genarateBoard(int blankRow) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  int randomMaxNum = difficulty;
 8002400:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <genarateBoard+0xe8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
  int brokenStairCount;
  int holeCount;
  int monsterCount;
  int coilCount;

  int stairDificaltyScore = 5;
 8002406:	2305      	movs	r3, #5
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  int brokenStairDificultyScore = -3;
 800240a:	f06f 0302 	mvn.w	r3, #2
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  int holeDificultyScore = -30;
 8002410:	f06f 031d 	mvn.w	r3, #29
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  int coilDificultyScore = 8;
 8002416:	2308      	movs	r3, #8
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  int monsterDificultyScore = -30;
 800241a:	f06f 031d 	mvn.w	r3, #29
 800241e:	623b      	str	r3, [r7, #32]


  while(1){
    stairCount = getRandom(randomMaxNum);
 8002420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002422:	f7ff fdb9 	bl	8001f98 <getRandom>
 8002426:	61f8      	str	r0, [r7, #28]
    brokenStairCount = getRandom(randomMaxNum);
 8002428:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800242a:	f7ff fdb5 	bl	8001f98 <getRandom>
 800242e:	61b8      	str	r0, [r7, #24]
    holeCount = getRandom(randomMaxNum);
 8002430:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002432:	f7ff fdb1 	bl	8001f98 <getRandom>
 8002436:	6178      	str	r0, [r7, #20]
    coilCount = getRandom(randomMaxNum);
 8002438:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800243a:	f7ff fdad 	bl	8001f98 <getRandom>
 800243e:	6138      	str	r0, [r7, #16]
    monsterCount = getRandom(randomMaxNum);
 8002440:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002442:	f7ff fda9 	bl	8001f98 <getRandom>
 8002446:	60f8      	str	r0, [r7, #12]

    int difficultyScore = stairCount * stairDificaltyScore + brokenStairCount * brokenStairDificultyScore + holeCount * holeDificultyScore + coilCount * coilDificultyScore + monsterCount * monsterDificultyScore;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800244c:	fb02 f203 	mul.w	r2, r2, r3
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	441a      	add	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	441a      	add	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]

    if(difficultyScore < randomMaxNum *(-10)){
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	f06f 0209 	mvn.w	r2, #9
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	daca      	bge.n	8002420 <genarateBoard+0x28>
      initialCharactorToBoard(stairCount,STAIR_NUM,blankRow);
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	2101      	movs	r1, #1
 800248e:	69f8      	ldr	r0, [r7, #28]
 8002490:	f7ff fd96 	bl	8001fc0 <initialCharactorToBoard>
      initialCharactorToBoard(brokenStairCount,BROKEN_STAIR_NUM,blankRow);
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	2102      	movs	r1, #2
 8002498:	69b8      	ldr	r0, [r7, #24]
 800249a:	f7ff fd91 	bl	8001fc0 <initialCharactorToBoard>
      initialCharactorToBoard(holeCount,HOLE_NUM,blankRow);
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	2104      	movs	r1, #4
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff fd8c 	bl	8001fc0 <initialCharactorToBoard>
      initialCharactorToBoard(coilCount,COIL_NUM,blankRow);
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	2103      	movs	r1, #3
 80024ac:	6938      	ldr	r0, [r7, #16]
 80024ae:	f7ff fd87 	bl	8001fc0 <initialCharactorToBoard>
      initialCharactorToBoard(monsterCount,MONSTER_NUM,blankRow);
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	2105      	movs	r1, #5
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fd82 	bl	8001fc0 <initialCharactorToBoard>
      if(validateInitializeBoard(blankRow)){
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fdfb 	bl	80020b8 <validateInitializeBoard>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ab      	beq.n	8002420 <genarateBoard+0x28>
        printBoard(20-blankRow);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1c3 0314 	rsb	r3, r3, #20
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff58 	bl	8002384 <printBoard>
        break;
 80024d4:	bf00      	nop
      }
    }
  }
}
 80024d6:	bf00      	nop
 80024d8:	3738      	adds	r7, #56	; 0x38
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000003c 	.word	0x2000003c

080024e4 <crashEmptyCell>:

void crashEmptyCell(){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  setCursor(lastPosition[0], lastPosition[1]);
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <crashEmptyCell+0x9c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <crashEmptyCell+0x9c>)
 80024f0:	6852      	ldr	r2, [r2, #4]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fee8 	bl	80012cc <setCursor>
  if(startMoveDown == 1){
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <crashEmptyCell+0xa0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d119      	bne.n	8002538 <crashEmptyCell+0x54>
	  if (realCharactorInCurrentPosition==-1){
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <crashEmptyCell+0xa4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d103      	bne.n	8002516 <crashEmptyCell+0x32>
		  print(" ");
 800250e:	481f      	ldr	r0, [pc, #124]	; (800258c <crashEmptyCell+0xa8>)
 8002510:	f7fe ff24 	bl	800135c <print>
 8002514:	e005      	b.n	8002522 <crashEmptyCell+0x3e>
	  }else{
		  write(realCharactorInCurrentPosition);
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <crashEmptyCell+0xa4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe ff7f 	bl	8001420 <write>
	  }
    startMoveDown = 0;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <crashEmptyCell+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
    changeBoard(lastPosition,lastPosition,realCharactorInCurrentPosition,WRITE);
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <crashEmptyCell+0xa4>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2302      	movs	r3, #2
 800252e:	4914      	ldr	r1, [pc, #80]	; (8002580 <crashEmptyCell+0x9c>)
 8002530:	4813      	ldr	r0, [pc, #76]	; (8002580 <crashEmptyCell+0x9c>)
 8002532:	f7ff fad5 	bl	8001ae0 <changeBoard>
 8002536:	e009      	b.n	800254c <crashEmptyCell+0x68>
  }
  else {
    print(" ");
 8002538:	4814      	ldr	r0, [pc, #80]	; (800258c <crashEmptyCell+0xa8>)
 800253a:	f7fe ff0f 	bl	800135c <print>
    changeBoard(lastPosition,lastPosition,EMPTY_CELL_NUM,WRITE);
 800253e:	2302      	movs	r3, #2
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <crashEmptyCell+0x9c>)
 8002546:	480e      	ldr	r0, [pc, #56]	; (8002580 <crashEmptyCell+0x9c>)
 8002548:	f7ff faca 	bl	8001ae0 <changeBoard>
  }
  setCursor(newPosition[0], newPosition[1]);
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <crashEmptyCell+0xac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <crashEmptyCell+0xac>)
 8002554:	6852      	ldr	r2, [r2, #4]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe feb6 	bl	80012cc <setCursor>
  write(DOODLER_NUM);
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe ff5d 	bl	8001420 <write>
  doodlerPosition[0] =  newPosition[0];
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <crashEmptyCell+0xac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <crashEmptyCell+0xb0>)
 800256c:	6013      	str	r3, [r2, #0]
  changeBoard(doodlerPosition,doodlerPosition,DOODLER_NUM,WRITE);
 800256e:	2302      	movs	r3, #2
 8002570:	2200      	movs	r2, #0
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <crashEmptyCell+0xb0>)
 8002574:	4807      	ldr	r0, [pc, #28]	; (8002594 <crashEmptyCell+0xb0>)
 8002576:	f7ff fab3 	bl	8001ae0 <changeBoard>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000038c 	.word	0x2000038c
 8002584:	200000fc 	.word	0x200000fc
 8002588:	20000048 	.word	0x20000048
 800258c:	0800c568 	.word	0x0800c568
 8002590:	20000154 	.word	0x20000154
 8002594:	200000f0 	.word	0x200000f0

08002598 <crashStair>:

void crashStair(){
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  doodlerDisplacementCount = 1;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <crashStair+0x14>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
  pageUp();
 80025a2:	f7ff fe35 	bl	8002210 <pageUp>
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000040 	.word	0x20000040

080025b0 <crashBrokenStair>:

void crashBrokenStair(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  setCursor(lastPosition[0], lastPosition[1]);
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <crashBrokenStair+0x9c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <crashBrokenStair+0x9c>)
 80025bc:	6852      	ldr	r2, [r2, #4]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe82 	bl	80012cc <setCursor>
  if(startMoveDown == 1){
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <crashBrokenStair+0xa0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <crashBrokenStair+0x54>
	  if (realCharactorInCurrentPosition==-1){
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <crashBrokenStair+0xa4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d103      	bne.n	80025e2 <crashBrokenStair+0x32>
		  print(" ");
 80025da:	481f      	ldr	r0, [pc, #124]	; (8002658 <crashBrokenStair+0xa8>)
 80025dc:	f7fe febe 	bl	800135c <print>
 80025e0:	e005      	b.n	80025ee <crashBrokenStair+0x3e>
	  }else{
		  write(realCharactorInCurrentPosition);
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <crashBrokenStair+0xa4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe ff19 	bl	8001420 <write>
	  }
      startMoveDown = 0;
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <crashBrokenStair+0xa0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
      changeBoard(lastPosition,lastPosition,realCharactorInCurrentPosition,WRITE);
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <crashBrokenStair+0xa4>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2302      	movs	r3, #2
 80025fa:	4914      	ldr	r1, [pc, #80]	; (800264c <crashBrokenStair+0x9c>)
 80025fc:	4813      	ldr	r0, [pc, #76]	; (800264c <crashBrokenStair+0x9c>)
 80025fe:	f7ff fa6f 	bl	8001ae0 <changeBoard>
 8002602:	e009      	b.n	8002618 <crashBrokenStair+0x68>
  }
  else {
      print(" ");
 8002604:	4814      	ldr	r0, [pc, #80]	; (8002658 <crashBrokenStair+0xa8>)
 8002606:	f7fe fea9 	bl	800135c <print>
      changeBoard(lastPosition,lastPosition,EMPTY_CELL_NUM,WRITE);
 800260a:	2302      	movs	r3, #2
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <crashBrokenStair+0x9c>)
 8002612:	480e      	ldr	r0, [pc, #56]	; (800264c <crashBrokenStair+0x9c>)
 8002614:	f7ff fa64 	bl	8001ae0 <changeBoard>
  }
  setCursor(newPosition[0], newPosition[1]);
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <crashBrokenStair+0xac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <crashBrokenStair+0xac>)
 8002620:	6852      	ldr	r2, [r2, #4]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe50 	bl	80012cc <setCursor>
  write(DOODLER_NUM);
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe fef7 	bl	8001420 <write>
  doodlerPosition[0] =  newPosition[0];
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <crashBrokenStair+0xac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <crashBrokenStair+0xb0>)
 8002638:	6013      	str	r3, [r2, #0]
  changeBoard(doodlerPosition,doodlerPosition,DOODLER_NUM,WRITE);
 800263a:	2302      	movs	r3, #2
 800263c:	2200      	movs	r2, #0
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <crashBrokenStair+0xb0>)
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <crashBrokenStair+0xb0>)
 8002642:	f7ff fa4d 	bl	8001ae0 <changeBoard>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000038c 	.word	0x2000038c
 8002650:	200000fc 	.word	0x200000fc
 8002654:	20000048 	.word	0x20000048
 8002658:	0800c568 	.word	0x0800c568
 800265c:	20000154 	.word	0x20000154
 8002660:	200000f0 	.word	0x200000f0

08002664 <crashCoil>:

void crashCoil(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  doodlerDisplacementCount = 1;
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <crashCoil+0x18>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  upStatus = COIL_UP_STATUS;
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <crashCoil+0x1c>)
 8002670:	220f      	movs	r2, #15
 8002672:	601a      	str	r2, [r3, #0]
  pageUp();
 8002674:	f7ff fdcc 	bl	8002210 <pageUp>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000040 	.word	0x20000040
 8002680:	20000044 	.word	0x20000044

08002684 <gameOver>:

void gameOver(){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	lockMoving = 1;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <gameOver+0x58>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim4);
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <gameOver+0x5c>)
 8002690:	f004 ffe0 	bl	8007654 <HAL_TIM_Base_Stop_IT>
	clear();
 8002694:	f7fe fe10 	bl	80012b8 <clear>
	setCursor(5,1);
 8002698:	2101      	movs	r1, #1
 800269a:	2005      	movs	r0, #5
 800269c:	f7fe fe16 	bl	80012cc <setCursor>
	print("Game Over !");
 80026a0:	4810      	ldr	r0, [pc, #64]	; (80026e4 <gameOver+0x60>)
 80026a2:	f7fe fe5b 	bl	800135c <print>
	clearScreen();
 80026a6:	f7ff f91b 	bl	80018e0 <clearScreen>
	setCursor(8,1);
 80026aa:	2101      	movs	r1, #1
 80026ac:	2008      	movs	r0, #8
 80026ae:	f7fe fe0d 	bl	80012cc <setCursor>
	print("score: ");
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <gameOver+0x64>)
 80026b4:	f7fe fe52 	bl	800135c <print>
	sprintf(buffer,"%d",score);
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <gameOver+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	490c      	ldr	r1, [pc, #48]	; (80026f0 <gameOver+0x6c>)
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <gameOver+0x70>)
 80026c2:	f006 fab7 	bl	8008c34 <siprintf>
	setCursor(15,1);
 80026c6:	2101      	movs	r1, #1
 80026c8:	200f      	movs	r0, #15
 80026ca:	f7fe fdff 	bl	80012cc <setCursor>
	print(buffer);
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <gameOver+0x70>)
 80026d0:	f7fe fe44 	bl	800135c <print>
    BUZZER_Play_Doom();
 80026d4:	f7fe fa00 	bl	8000ad8 <BUZZER_Play_Doom>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000004c 	.word	0x2000004c
 80026e0:	20000164 	.word	0x20000164
 80026e4:	0800c5bc 	.word	0x0800c5bc
 80026e8:	0800c5c8 	.word	0x0800c5c8
 80026ec:	200000ec 	.word	0x200000ec
 80026f0:	0800c5d0 	.word	0x0800c5d0
 80026f4:	200003e4 	.word	0x200003e4

080026f8 <crashHole>:

void crashHole(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  downStatus = MONSTER_DOWN_STATUS;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <crashHole+0x1c>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]
  doodlerPosition[0] = -1;
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <crashHole+0x20>)
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	601a      	str	r2, [r3, #0]
  gameOver();
 800270a:	f7ff ffbb 	bl	8002684 <gameOver>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000f8 	.word	0x200000f8
 8002718:	200000f0 	.word	0x200000f0

0800271c <crashMonster>:

void crashMonster(){
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  lockMoving = 1;
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <crashMonster+0x24>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
  doodlerDisplacementCount = -1;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <crashMonster+0x28>)
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	601a      	str	r2, [r3, #0]
  downStatus = MONSTER_DOWN_STATUS;
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <crashMonster+0x2c>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000004c 	.word	0x2000004c
 8002744:	20000040 	.word	0x20000040
 8002748:	200000f8 	.word	0x200000f8

0800274c <checkDownChange>:

void checkDownChange(){
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  if(newPosition[0] == -1){
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <checkDownChange+0x78>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d102      	bne.n	8002760 <checkDownChange+0x14>
    gameOver();
 800275a:	f7ff ff93 	bl	8002684 <gameOver>
        crashMonster();
        break;
      }
    }
  }
}
 800275e:	e02f      	b.n	80027c0 <checkDownChange+0x74>
    switch( board[newPosition[0]][newPosition[1]] ){
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <checkDownChange+0x78>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <checkDownChange+0x78>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4917      	ldr	r1, [pc, #92]	; (80027c8 <checkDownChange+0x7c>)
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4413      	add	r3, r2
 800276e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002772:	3301      	adds	r3, #1
 8002774:	2b06      	cmp	r3, #6
 8002776:	d823      	bhi.n	80027c0 <checkDownChange+0x74>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <checkDownChange+0x34>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	0800279d 	.word	0x0800279d
 8002784:	080027c1 	.word	0x080027c1
 8002788:	080027a3 	.word	0x080027a3
 800278c:	080027a9 	.word	0x080027a9
 8002790:	080027af 	.word	0x080027af
 8002794:	080027b5 	.word	0x080027b5
 8002798:	080027bb 	.word	0x080027bb
        crashEmptyCell();
 800279c:	f7ff fea2 	bl	80024e4 <crashEmptyCell>
        break;
 80027a0:	e00e      	b.n	80027c0 <checkDownChange+0x74>
        crashStair();
 80027a2:	f7ff fef9 	bl	8002598 <crashStair>
        break;
 80027a6:	e00b      	b.n	80027c0 <checkDownChange+0x74>
        crashBrokenStair();
 80027a8:	f7ff ff02 	bl	80025b0 <crashBrokenStair>
        break;
 80027ac:	e008      	b.n	80027c0 <checkDownChange+0x74>
        crashCoil();
 80027ae:	f7ff ff59 	bl	8002664 <crashCoil>
        break;
 80027b2:	e005      	b.n	80027c0 <checkDownChange+0x74>
        crashHole();
 80027b4:	f7ff ffa0 	bl	80026f8 <crashHole>
        break;
 80027b8:	e002      	b.n	80027c0 <checkDownChange+0x74>
        crashMonster();
 80027ba:	f7ff ffaf 	bl	800271c <crashMonster>
        break;
 80027be:	bf00      	nop
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000154 	.word	0x20000154
 80027c8:	200001fc 	.word	0x200001fc

080027cc <setLastAndNewPosition>:

void setLastAndNewPosition(int moveDirecrion){
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  lastPosition[0] = doodlerPosition[0];
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <setLastAndNewPosition+0x38>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <setLastAndNewPosition+0x3c>)
 80027da:	6013      	str	r3, [r2, #0]
  lastPosition[1] = doodlerPosition[1];
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <setLastAndNewPosition+0x38>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <setLastAndNewPosition+0x3c>)
 80027e2:	6053      	str	r3, [r2, #4]
  newPosition[0] = doodlerPosition[0]+moveDirecrion ;
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <setLastAndNewPosition+0x38>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <setLastAndNewPosition+0x40>)
 80027ee:	6013      	str	r3, [r2, #0]
  newPosition[1] = doodlerPosition[1];
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <setLastAndNewPosition+0x38>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <setLastAndNewPosition+0x40>)
 80027f6:	6053      	str	r3, [r2, #4]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	200000f0 	.word	0x200000f0
 8002808:	2000038c 	.word	0x2000038c
 800280c:	20000154 	.word	0x20000154

08002810 <normalMoveDown>:

void normalMoveDown(){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  setLastAndNewPosition(-1);
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	f7ff ffd8 	bl	80027cc <setLastAndNewPosition>
  checkDownChange();
 800281c:	f7ff ff96 	bl	800274c <checkDownChange>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <crashMonsterMoveDown>:

void crashMonsterMoveDown(){
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  setLastAndNewPosition(-1);
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ffce 	bl	80027cc <setLastAndNewPosition>
  if(newPosition[0] < 0){
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <crashMonsterMoveDown+0x5c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	da02      	bge.n	800283e <crashMonsterMoveDown+0x1a>
    gameOver();
 8002838:	f7ff ff24 	bl	8002684 <gameOver>
    print(" ");
    setCursor(newPosition[0], newPosition[1]);
    write(DOODLER_NUM);
    doodlerPosition[0] =  newPosition[0];
  }
}
 800283c:	e01d      	b.n	800287a <crashMonsterMoveDown+0x56>
    setCursor(lastPosition[0], lastPosition[1]);
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <crashMonsterMoveDown+0x60>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <crashMonsterMoveDown+0x60>)
 8002846:	6852      	ldr	r2, [r2, #4]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fd3d 	bl	80012cc <setCursor>
    print(" ");
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <crashMonsterMoveDown+0x64>)
 8002854:	f7fe fd82 	bl	800135c <print>
    setCursor(newPosition[0], newPosition[1]);
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <crashMonsterMoveDown+0x5c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <crashMonsterMoveDown+0x5c>)
 8002860:	6852      	ldr	r2, [r2, #4]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd30 	bl	80012cc <setCursor>
    write(DOODLER_NUM);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe fdd7 	bl	8001420 <write>
    doodlerPosition[0] =  newPosition[0];
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <crashMonsterMoveDown+0x5c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a05      	ldr	r2, [pc, #20]	; (800288c <crashMonsterMoveDown+0x68>)
 8002878:	6013      	str	r3, [r2, #0]
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000154 	.word	0x20000154
 8002884:	2000038c 	.word	0x2000038c
 8002888:	0800c568 	.word	0x0800c568
 800288c:	200000f0 	.word	0x200000f0

08002890 <checkUpChange>:

void checkUpChange(){
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  if(doodlerDisplacementCount == 1){
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <checkUpChange+0x120>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d136      	bne.n	800290a <checkUpChange+0x7a>
	  setCursor(lastPosition[0], lastPosition[1]);
 800289c:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <checkUpChange+0x124>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4a44      	ldr	r2, [pc, #272]	; (80029b4 <checkUpChange+0x124>)
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fd0e 	bl	80012cc <setCursor>
	  print(" ");
 80028b0:	4841      	ldr	r0, [pc, #260]	; (80029b8 <checkUpChange+0x128>)
 80028b2:	f7fe fd53 	bl	800135c <print>
	  changeBoard(lastPosition,lastPosition,EMPTY_CELL_NUM,WRITE);
 80028b6:	2302      	movs	r3, #2
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	493d      	ldr	r1, [pc, #244]	; (80029b4 <checkUpChange+0x124>)
 80028be:	483d      	ldr	r0, [pc, #244]	; (80029b4 <checkUpChange+0x124>)
 80028c0:	f7ff f90e 	bl	8001ae0 <changeBoard>
	  realCharactorInCurrentPosition = board[newPosition[0]][newPosition[1]];
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <checkUpChange+0x12c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <checkUpChange+0x12c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	493c      	ldr	r1, [pc, #240]	; (80029c0 <checkUpChange+0x130>)
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028d6:	4a3b      	ldr	r2, [pc, #236]	; (80029c4 <checkUpChange+0x134>)
 80028d8:	6013      	str	r3, [r2, #0]
	  setCursor(newPosition[0], newPosition[1]);
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <checkUpChange+0x12c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <checkUpChange+0x12c>)
 80028e2:	6852      	ldr	r2, [r2, #4]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fcef 	bl	80012cc <setCursor>
	  write(DOODLER_NUM);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fd96 	bl	8001420 <write>
	  doodlerPosition[0] =  newPosition[0];
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <checkUpChange+0x12c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <checkUpChange+0x138>)
 80028fa:	6013      	str	r3, [r2, #0]
	  changeBoard(newPosition,newPosition,DOODLER_NUM,WRITE);
 80028fc:	2302      	movs	r3, #2
 80028fe:	2200      	movs	r2, #0
 8002900:	492e      	ldr	r1, [pc, #184]	; (80029bc <checkUpChange+0x12c>)
 8002902:	482e      	ldr	r0, [pc, #184]	; (80029bc <checkUpChange+0x12c>)
 8002904:	f7ff f8ec 	bl	8001ae0 <changeBoard>
	  setCursor(newPosition[0], newPosition[1]);
	  write(DOODLER_NUM);
	  doodlerPosition[0] =  newPosition[0];
	  changeBoard(newPosition,newPosition,DOODLER_NUM,WRITE);
  }
}
 8002908:	e04f      	b.n	80029aa <checkUpChange+0x11a>
   }else if(realCharactorInCurrentPosition == HOLE_NUM){
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <checkUpChange+0x134>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d102      	bne.n	8002918 <checkUpChange+0x88>
		crashHole();
 8002912:	f7ff fef1 	bl	80026f8 <crashHole>
}
 8002916:	e048      	b.n	80029aa <checkUpChange+0x11a>
   }else if(realCharactorInCurrentPosition == MONSTER_NUM){
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <checkUpChange+0x134>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d102      	bne.n	8002926 <checkUpChange+0x96>
		crashMonster();
 8002920:	f7ff fefc 	bl	800271c <crashMonster>
}
 8002924:	e041      	b.n	80029aa <checkUpChange+0x11a>
	  setCursor(lastPosition[0], lastPosition[1]);
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <checkUpChange+0x124>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <checkUpChange+0x124>)
 800292e:	6852      	ldr	r2, [r2, #4]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fcc9 	bl	80012cc <setCursor>
	  changeBoard(lastPosition,lastPosition,realCharactorInCurrentPosition,WRITE);
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <checkUpChange+0x134>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2302      	movs	r3, #2
 8002940:	491c      	ldr	r1, [pc, #112]	; (80029b4 <checkUpChange+0x124>)
 8002942:	481c      	ldr	r0, [pc, #112]	; (80029b4 <checkUpChange+0x124>)
 8002944:	f7ff f8cc 	bl	8001ae0 <changeBoard>
	  if (realCharactorInCurrentPosition==-1){
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <checkUpChange+0x134>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d103      	bne.n	800295a <checkUpChange+0xca>
		  print(" ");
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <checkUpChange+0x128>)
 8002954:	f7fe fd02 	bl	800135c <print>
 8002958:	e005      	b.n	8002966 <checkUpChange+0xd6>
		  write(realCharactorInCurrentPosition);
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <checkUpChange+0x134>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fd5d 	bl	8001420 <write>
	  realCharactorInCurrentPosition = board[newPosition[0]][newPosition[1]];
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <checkUpChange+0x12c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <checkUpChange+0x12c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4914      	ldr	r1, [pc, #80]	; (80029c0 <checkUpChange+0x130>)
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4413      	add	r3, r2
 8002974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <checkUpChange+0x134>)
 800297a:	6013      	str	r3, [r2, #0]
	  setCursor(newPosition[0], newPosition[1]);
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <checkUpChange+0x12c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <checkUpChange+0x12c>)
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fc9e 	bl	80012cc <setCursor>
	  write(DOODLER_NUM);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fd45 	bl	8001420 <write>
	  doodlerPosition[0] =  newPosition[0];
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <checkUpChange+0x12c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <checkUpChange+0x138>)
 800299c:	6013      	str	r3, [r2, #0]
	  changeBoard(newPosition,newPosition,DOODLER_NUM,WRITE);
 800299e:	2302      	movs	r3, #2
 80029a0:	2200      	movs	r2, #0
 80029a2:	4906      	ldr	r1, [pc, #24]	; (80029bc <checkUpChange+0x12c>)
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <checkUpChange+0x12c>)
 80029a6:	f7ff f89b 	bl	8001ae0 <changeBoard>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000040 	.word	0x20000040
 80029b4:	2000038c 	.word	0x2000038c
 80029b8:	0800c568 	.word	0x0800c568
 80029bc:	20000154 	.word	0x20000154
 80029c0:	200001fc 	.word	0x200001fc
 80029c4:	20000048 	.word	0x20000048
 80029c8:	200000f0 	.word	0x200000f0

080029cc <moveUp>:

void moveUp(int countMoveUP){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  setLastAndNewPosition(1);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff fef9 	bl	80027cc <setLastAndNewPosition>
  checkUpChange();
 80029da:	f7ff ff59 	bl	8002890 <checkUpChange>
  doodlerDisplacementCount += 1;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <moveUp+0x3c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <moveUp+0x3c>)
 80029e6:	6013      	str	r3, [r2, #0]
  if (doodlerDisplacementCount == countMoveUP) {
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <moveUp+0x3c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d106      	bne.n	8002a00 <moveUp+0x34>
    doodlerDisplacementCount = -1;
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <moveUp+0x3c>)
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	601a      	str	r2, [r3, #0]
    startMoveDown = 1;
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <moveUp+0x40>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  }
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000040 	.word	0x20000040
 8002a0c:	200000fc 	.word	0x200000fc

08002a10 <changeDoodlerPosition>:

void changeDoodlerPosition(int moveDirecrion) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if (moveDirecrion == 1) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10e      	bne.n	8002a3c <changeDoodlerPosition+0x2c>
    switch (upStatus){
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <changeDoodlerPosition+0x58>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b07      	cmp	r3, #7
 8002a24:	d002      	beq.n	8002a2c <changeDoodlerPosition+0x1c>
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d004      	beq.n	8002a34 <changeDoodlerPosition+0x24>
        crashMonsterMoveDown();
        break;
      }
    }
  }
}
 8002a2a:	e019      	b.n	8002a60 <changeDoodlerPosition+0x50>
        moveUp(8);
 8002a2c:	2008      	movs	r0, #8
 8002a2e:	f7ff ffcd 	bl	80029cc <moveUp>
        break;
 8002a32:	e015      	b.n	8002a60 <changeDoodlerPosition+0x50>
        moveUp(16);
 8002a34:	2010      	movs	r0, #16
 8002a36:	f7ff ffc9 	bl	80029cc <moveUp>
        break;
 8002a3a:	e011      	b.n	8002a60 <changeDoodlerPosition+0x50>
  else if (moveDirecrion == -1) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d10c      	bne.n	8002a5e <changeDoodlerPosition+0x4e>
    switch(downStatus){
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <changeDoodlerPosition+0x5c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <changeDoodlerPosition+0x42>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d003      	beq.n	8002a58 <changeDoodlerPosition+0x48>
}
 8002a50:	e006      	b.n	8002a60 <changeDoodlerPosition+0x50>
        normalMoveDown();
 8002a52:	f7ff fedd 	bl	8002810 <normalMoveDown>
        break;
 8002a56:	e003      	b.n	8002a60 <changeDoodlerPosition+0x50>
        crashMonsterMoveDown();
 8002a58:	f7ff fee4 	bl	8002824 <crashMonsterMoveDown>
        break;
 8002a5c:	e000      	b.n	8002a60 <changeDoodlerPosition+0x50>
  }
 8002a5e:	bf00      	nop
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000044 	.word	0x20000044
 8002a6c:	200000f8 	.word	0x200000f8

08002a70 <moveShot>:

void moveShot(){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  setCursor(shotPosition[0],shotPosition[1]);
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <moveShot+0xb0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <moveShot+0xb0>)
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fc22 	bl	80012cc <setCursor>
  if(realCharactorInShotPosiotion == -1){
 8002a88:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <moveShot+0xb4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d103      	bne.n	8002a9a <moveShot+0x2a>
    print(" ");
 8002a92:	4825      	ldr	r0, [pc, #148]	; (8002b28 <moveShot+0xb8>)
 8002a94:	f7fe fc62 	bl	800135c <print>
 8002a98:	e005      	b.n	8002aa6 <moveShot+0x36>
  } else {
    write(realCharactorInShotPosiotion);
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <moveShot+0xb4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fcbd 	bl	8001420 <write>
  }
  shotPosition[0] += 1;
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <moveShot+0xb0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <moveShot+0xb0>)
 8002aae:	6013      	str	r3, [r2, #0]
  if(shotPosition[0] < 20){
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <moveShot+0xb0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b13      	cmp	r3, #19
 8002ab6:	dc2e      	bgt.n	8002b16 <moveShot+0xa6>
    realCharactorInShotPosiotion = board[shotPosition[0]][shotPosition[1]];
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <moveShot+0xb0>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <moveShot+0xb0>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	491a      	ldr	r1, [pc, #104]	; (8002b2c <moveShot+0xbc>)
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <moveShot+0xb4>)
 8002acc:	6013      	str	r3, [r2, #0]
    setCursor(shotPosition[0],shotPosition[1]);
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <moveShot+0xb0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <moveShot+0xb0>)
 8002ad6:	6852      	ldr	r2, [r2, #4]
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fbf5 	bl	80012cc <setCursor>
    if(realCharactorInShotPosiotion == MONSTER_NUM){
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <moveShot+0xb4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d111      	bne.n	8002b0e <moveShot+0x9e>
      print(" ");
 8002aea:	480f      	ldr	r0, [pc, #60]	; (8002b28 <moveShot+0xb8>)
 8002aec:	f7fe fc36 	bl	800135c <print>
      board[shotPosition[0]][shotPosition[1]] = EMPTY_CELL_NUM;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <moveShot+0xb0>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <moveShot+0xb0>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <moveShot+0xbc>)
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	f04f 32ff 	mov.w	r2, #4294967295
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      isShotInScreen = 0;
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <moveShot+0xc0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
      write(SHOT_NUM);
    }
  } else {
    isShotInScreen = 0;
  }
}
 8002b0c:	e006      	b.n	8002b1c <moveShot+0xac>
      write(SHOT_NUM);
 8002b0e:	2006      	movs	r0, #6
 8002b10:	f7fe fc86 	bl	8001420 <write>
}
 8002b14:	e002      	b.n	8002b1c <moveShot+0xac>
    isShotInScreen = 0;
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <moveShot+0xc0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000015c 	.word	0x2000015c
 8002b24:	2000033c 	.word	0x2000033c
 8002b28:	0800c568 	.word	0x0800c568
 8002b2c:	200001fc 	.word	0x200001fc
 8002b30:	2000010c 	.word	0x2000010c

08002b34 <moveDoodler>:

void moveDoodler() {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  if (doodlerDisplacementCount >= 1) {
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <moveDoodler+0x2c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dd03      	ble.n	8002b48 <moveDoodler+0x14>
    changeDoodlerPosition(1);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff65 	bl	8002a10 <changeDoodlerPosition>
 8002b46:	e003      	b.n	8002b50 <moveDoodler+0x1c>
  }
  else {
    changeDoodlerPosition(-1);
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f7ff ff60 	bl	8002a10 <changeDoodlerPosition>
  }
  if(isShotInScreen==1){
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <moveDoodler+0x30>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <moveDoodler+0x28>
  	moveShot();
 8002b58:	f7ff ff8a 	bl	8002a70 <moveShot>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000040 	.word	0x20000040
 8002b64:	2000010c 	.word	0x2000010c

08002b68 <HAL_TIM_PeriodElapsedCallback>:

bool stopFlag = true;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]


  if (htim->Instance == TIM3) // TIM3 for controlling the buzzer
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	f040 80b8 	bne.w	8002cec <HAL_TIM_PeriodElapsedCallback+0x184>
  {


	  x=score+difficulty*1000;
 8002b7c:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b84:	fb02 f203 	mul.w	r2, r2, r3
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]


	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8002b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b96:	4866      	ldr	r0, [pc, #408]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b98:	f002 feee 	bl	8005978 <HAL_GPIO_TogglePin>
//   0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002ba2:	4864      	ldr	r0, [pc, #400]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002ba4:	f002 fed0 	bl	8005948 <HAL_GPIO_WritePin>

	  //9
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, 1);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002bae:	4861      	ldr	r0, [pc, #388]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002bb0:	f002 feca 	bl	8005948 <HAL_GPIO_WritePin>
	  numberToBCD(x%10);
 8002bb4:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bba:	fb83 1302 	smull	r1, r3, r3, r2
 8002bbe:	1099      	asrs	r1, r3, #2
 8002bc0:	17d3      	asrs	r3, r2, #31
 8002bc2:	1ac9      	subs	r1, r1, r3
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	1ad1      	subs	r1, r2, r3
 8002bce:	4608      	mov	r0, r1
 8002bd0:	f7ff f96e 	bl	8001eb0 <numberToBCD>
	  y=x/10;
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002bda:	fb82 1203 	smull	r1, r2, r2, r3
 8002bde:	1092      	asrs	r2, r2, #2
 8002be0:	17db      	asrs	r3, r3, #31
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002be6:	6013      	str	r3, [r2, #0]
	  HAL_Delay(5);
 8002be8:	2005      	movs	r0, #5
 8002bea:	f001 f8c7 	bl	8003d7c <HAL_Delay>

	  //8
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf4:	484f      	ldr	r0, [pc, #316]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002bf6:	f002 fea7 	bl	8005948 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, 1);
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002c00:	484c      	ldr	r0, [pc, #304]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c02:	f002 fea1 	bl	8005948 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,1);
 8002c06:	2201      	movs	r2, #1
 8002c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c0c:	4849      	ldr	r0, [pc, #292]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c0e:	f002 fe9b 	bl	8005948 <HAL_GPIO_WritePin>
	  numberToBCD(y%10);
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c18:	fb83 1302 	smull	r1, r3, r3, r2
 8002c1c:	1099      	asrs	r1, r3, #2
 8002c1e:	17d3      	asrs	r3, r2, #31
 8002c20:	1ac9      	subs	r1, r1, r3
 8002c22:	460b      	mov	r3, r1
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	1ad1      	subs	r1, r2, r3
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	f7ff f93f 	bl	8001eb0 <numberToBCD>
	  y=y/10;
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c38:	fb82 1203 	smull	r1, r2, r2, r3
 8002c3c:	1092      	asrs	r2, r2, #2
 8002c3e:	17db      	asrs	r3, r3, #31
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	4a3e      	ldr	r2, [pc, #248]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c44:	6013      	str	r3, [r2, #0]
	  HAL_Delay(5);
 8002c46:	2005      	movs	r0, #5
 8002c48:	f001 f898 	bl	8003d7c <HAL_Delay>

	  //7
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,0);decimal
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	4838      	ldr	r0, [pc, #224]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c52:	f002 fe79 	bl	8005948 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, 1);
 8002c56:	2201      	movs	r2, #1
 8002c58:	f44f 7150 	mov.w	r1, #832	; 0x340
 8002c5c:	4835      	ldr	r0, [pc, #212]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c5e:	f002 fe73 	bl	8005948 <HAL_GPIO_WritePin>
	  numberToBCD(y%10);
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c68:	fb83 1302 	smull	r1, r3, r3, r2
 8002c6c:	1099      	asrs	r1, r3, #2
 8002c6e:	17d3      	asrs	r3, r2, #31
 8002c70:	1ac9      	subs	r1, r1, r3
 8002c72:	460b      	mov	r3, r1
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	1ad1      	subs	r1, r2, r3
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	f7ff f917 	bl	8001eb0 <numberToBCD>
	  y=y/10;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c88:	fb82 1203 	smull	r1, r2, r2, r3
 8002c8c:	1092      	asrs	r2, r2, #2
 8002c8e:	17db      	asrs	r3, r3, #31
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c94:	6013      	str	r3, [r2, #0]
	  HAL_Delay(5);
 8002c96:	2005      	movs	r0, #5
 8002c98:	f001 f870 	bl	8003d7c <HAL_Delay>

	  //6
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2140      	movs	r1, #64	; 0x40
 8002ca0:	4824      	ldr	r0, [pc, #144]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002ca2:	f002 fe51 	bl	8005948 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, 1);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002cac:	4821      	ldr	r0, [pc, #132]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002cae:	f002 fe4b 	bl	8005948 <HAL_GPIO_WritePin>
	  numberToBCD(y%10);
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002cb8:	fb83 1302 	smull	r1, r3, r3, r2
 8002cbc:	1099      	asrs	r1, r3, #2
 8002cbe:	17d3      	asrs	r3, r2, #31
 8002cc0:	1ac9      	subs	r1, r1, r3
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	1ad1      	subs	r1, r2, r3
 8002ccc:	4608      	mov	r0, r1
 8002cce:	f7ff f8ef 	bl	8001eb0 <numberToBCD>
	  y=y/10;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cdc:	1092      	asrs	r2, r2, #2
 8002cde:	17db      	asrs	r3, r3, #31
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002ce4:	6013      	str	r3, [r2, #0]
	  HAL_Delay(5);
 8002ce6:	2005      	movs	r0, #5
 8002ce8:	f001 f848 	bl	8003d7c <HAL_Delay>
//	{
//		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//		stopFlag = true;
//	}
  }
  if (htim->Instance == TIM4){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d105      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x19a>
	  if(isGameStarted == 1){
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x19a>
		  moveDoodler();
 8002cfe:	f7ff ff19 	bl	8002b34 <moveDoodler>
	  }

   }
  if (htim->Instance == TIM1){
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d105      	bne.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	  if(isShotInScreen==1){
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		  moveShot();
 8002d14:	f7ff feac 	bl	8002a70 <moveShot>
	  }
   }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40000400 	.word	0x40000400
 8002d24:	2000003c 	.word	0x2000003c
 8002d28:	200000ec 	.word	0x200000ec
 8002d2c:	20000054 	.word	0x20000054
 8002d30:	48001000 	.word	0x48001000
 8002d34:	48000800 	.word	0x48000800
 8002d38:	66666667 	.word	0x66666667
 8002d3c:	20000058 	.word	0x20000058
 8002d40:	40000800 	.word	0x40000800
 8002d44:	20000108 	.word	0x20000108
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	2000010c 	.word	0x2000010c

08002d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d56:	f000 ffab 	bl	8003cb0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d5a:	f000 f885 	bl	8002e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5e:	f000 fb45 	bl	80033ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d62:	f000 f957 	bl	8003014 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002d66:	f000 f995 	bl	8003094 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002d6a:	f000 fb1d 	bl	80033a8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8002d6e:	f000 f8e1 	bl	8002f34 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002d72:	f000 fa21 	bl	80031b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d76:	f000 fa79 	bl	800326c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d7a:	f000 fac5 	bl	8003308 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002d7e:	f000 f9c7 	bl	8003110 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //  bool x = false;

  Rows_Set_Mode(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7fe ff46 	bl	8001c14 <Rows_Set_Mode>
  ///////////////////////////////////////////////////////////////////////////////////////////////////
  LiquidCrystal(GPIOD, GPIO_PIN_0, 0, GPIO_PIN_1, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7);
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	2340      	movs	r3, #64	; 0x40
 8002d8e:	9302      	str	r3, [sp, #8]
 8002d90:	2320      	movs	r3, #32
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	2310      	movs	r3, #16
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4823      	ldr	r0, [pc, #140]	; (8002e2c <main+0xdc>)
 8002da0:	f7fe f82e 	bl	8000e00 <LiquidCrystal>
  begin(20, 4);
 8002da4:	2104      	movs	r1, #4
 8002da6:	2014      	movs	r0, #20
 8002da8:	f7fe f8c2 	bl	8000f30 <begin>
  createChar(DOODLER_NUM, doodler);
 8002dac:	4920      	ldr	r1, [pc, #128]	; (8002e30 <main+0xe0>)
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fe faff 	bl	80013b2 <createChar>
  createChar(STAIR_NUM, stair);
 8002db4:	491f      	ldr	r1, [pc, #124]	; (8002e34 <main+0xe4>)
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fe fafb 	bl	80013b2 <createChar>
  createChar(BROKEN_STAIR_NUM, brokenStair);
 8002dbc:	491e      	ldr	r1, [pc, #120]	; (8002e38 <main+0xe8>)
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	f7fe faf7 	bl	80013b2 <createChar>
  createChar(COIL_NUM, coil);
 8002dc4:	491d      	ldr	r1, [pc, #116]	; (8002e3c <main+0xec>)
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	f7fe faf3 	bl	80013b2 <createChar>
  createChar(HOLE_NUM, hole);
 8002dcc:	491c      	ldr	r1, [pc, #112]	; (8002e40 <main+0xf0>)
 8002dce:	2004      	movs	r0, #4
 8002dd0:	f7fe faef 	bl	80013b2 <createChar>
  createChar(MONSTER_NUM, monster);
 8002dd4:	491b      	ldr	r1, [pc, #108]	; (8002e44 <main+0xf4>)
 8002dd6:	2005      	movs	r0, #5
 8002dd8:	f7fe faeb 	bl	80013b2 <createChar>
  setCursor(0, 0);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe fa74 	bl	80012cc <setCursor>
  createChar(SHOT_NUM,shotCharactor);
 8002de4:	4918      	ldr	r1, [pc, #96]	; (8002e48 <main+0xf8>)
 8002de6:	2006      	movs	r0, #6
 8002de8:	f7fe fae3 	bl	80013b2 <createChar>
  ///////////////////////////////////////////////////////////////////////////////////////////////////
  HAL_ADC_Start_IT(&hadc1);
 8002dec:	4817      	ldr	r0, [pc, #92]	; (8002e4c <main+0xfc>)
 8002dee:	f001 f9dd 	bl	80041ac <HAL_ADC_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

//  htim2.Instance->CCR3 = 50;

  initBoard();
 8002df2:	f7fe fbe1 	bl	80015b8 <initBoard>
  BUZZER_SetTIM(&htim2, TIM_CHANNEL_3);
 8002df6:	2108      	movs	r1, #8
 8002df8:	4815      	ldr	r0, [pc, #84]	; (8002e50 <main+0x100>)
 8002dfa:	f7fd fe57 	bl	8000aac <BUZZER_SetTIM>
  board[0][2] = DOODLER_NUM;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <main+0x104>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  doodlerPosition[0] = 0;
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <main+0x108>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
  doodlerPosition[1] = 2;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <main+0x108>)
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	605a      	str	r2, [r3, #4]
  srand(value);
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <main+0x10c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f005 fe9f 	bl	8008b58 <srand>
  showGameOverView();
 8002e1a:	f7fe fdb3 	bl	8001984 <showGameOverView>
//  for(int i = 0 ; i < 30; i++){
//	  HAL_Delay(1000);
//	  moveDoodler();
//  }

  HAL_TIM_Base_Start_IT(&htim3);
 8002e1e:	4810      	ldr	r0, [pc, #64]	; (8002e60 <main+0x110>)
 8002e20:	f004 fbae 	bl	8007580 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_Base_Start_IT(&htim1);
 8002e24:	480f      	ldr	r0, [pc, #60]	; (8002e64 <main+0x114>)
 8002e26:	f004 fbab 	bl	8007580 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <main+0xda>
 8002e2c:	48000c00 	.word	0x48000c00
 8002e30:	20000004 	.word	0x20000004
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	20000014 	.word	0x20000014
 8002e3c:	2000001c 	.word	0x2000001c
 8002e40:	20000024 	.word	0x20000024
 8002e44:	2000002c 	.word	0x2000002c
 8002e48:	20000034 	.word	0x20000034
 8002e4c:	20000394 	.word	0x20000394
 8002e50:	200004b4 	.word	0x200004b4
 8002e54:	200001fc 	.word	0x200001fc
 8002e58:	200000f0 	.word	0x200000f0
 8002e5c:	20000114 	.word	0x20000114
 8002e60:	20000340 	.word	0x20000340
 8002e64:	20000404 	.word	0x20000404

08002e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b09e      	sub	sp, #120	; 0x78
 8002e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e72:	2228      	movs	r2, #40	; 0x28
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f005 fe66 	bl	8008b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	223c      	movs	r2, #60	; 0x3c
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 fe58 	bl	8008b48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ea0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eaa:	2310      	movs	r3, #16
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002eb8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ebc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 ff8e 	bl	8005de4 <HAL_RCC_OscConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002ece:	f000 fb97 	bl	8003600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eda:	2300      	movs	r3, #0
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ee8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 fe80 	bl	8006bf4 <HAL_RCC_ClockConfig>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002efa:	f000 fb81 	bl	8003600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <SystemClock_Config+0xc8>)
 8002f00:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 f880 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002f22:	f000 fb6d 	bl	8003600 <Error_Handler>
  }
}
 8002f26:	bf00      	nop
 8002f28:	3778      	adds	r7, #120	; 0x78
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	000210a0 	.word	0x000210a0

08002f34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002f5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8002f64:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f66:	2218      	movs	r2, #24
 8002f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fb0:	4817      	ldr	r0, [pc, #92]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002fb2:	f000 ff1b 	bl	8003dec <HAL_ADC_Init>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f000 fb20 	bl	8003600 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4811      	ldr	r0, [pc, #68]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002fcc:	f002 f85c 	bl	8005088 <HAL_ADCEx_MultiModeConfigChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002fd6:	f000 fb13 	bl	8003600 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <MX_ADC1_Init+0xdc>)
 8002ff8:	f001 fd5a 	bl	8004ab0 <HAL_ADC_ConfigChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003002:	f000 fafd 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000394 	.word	0x20000394

08003014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <MX_I2C1_Init+0x74>)
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <MX_I2C1_Init+0x78>)
 800301c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <MX_I2C1_Init+0x74>)
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <MX_I2C1_Init+0x7c>)
 8003022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <MX_I2C1_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <MX_I2C1_Init+0x74>)
 800302c:	2201      	movs	r2, #1
 800302e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <MX_I2C1_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_I2C1_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_I2C1_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_I2C1_Init+0x74>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_I2C1_Init+0x74>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <MX_I2C1_Init+0x74>)
 8003050:	f002 fcc4 	bl	80059dc <HAL_I2C_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800305a:	f000 fad1 	bl	8003600 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800305e:	2100      	movs	r1, #0
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <MX_I2C1_Init+0x74>)
 8003062:	f002 fd4a 	bl	8005afa <HAL_I2CEx_ConfigAnalogFilter>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800306c:	f000 fac8 	bl	8003600 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003070:	2100      	movs	r1, #0
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_I2C1_Init+0x74>)
 8003074:	f002 fd8c 	bl	8005b90 <HAL_I2CEx_ConfigDigitalFilter>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800307e:	f000 fabf 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200001b0 	.word	0x200001b0
 800308c:	40005400 	.word	0x40005400
 8003090:	2000090e 	.word	0x2000090e

08003094 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003098:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <MX_SPI1_Init+0x74>)
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <MX_SPI1_Init+0x78>)
 800309c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <MX_SPI1_Init+0x74>)
 80030a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <MX_SPI1_Init+0x74>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <MX_SPI1_Init+0x74>)
 80030ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80030b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <MX_SPI1_Init+0x74>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <MX_SPI1_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_SPI1_Init+0x74>)
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <MX_SPI1_Init+0x74>)
 80030ca:	2208      	movs	r2, #8
 80030cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_SPI1_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_SPI1_Init+0x74>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_SPI1_Init+0x74>)
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_SPI1_Init+0x74>)
 80030e2:	2207      	movs	r2, #7
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_SPI1_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_SPI1_Init+0x74>)
 80030ee:	2208      	movs	r2, #8
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_SPI1_Init+0x74>)
 80030f4:	f004 f942 	bl	800737c <HAL_SPI_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030fe:	f000 fa7f 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000450 	.word	0x20000450
 800310c:	40013000 	.word	0x40013000

08003110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <MX_TIM1_Init+0xa0>)
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <MX_TIM1_Init+0xa4>)
 8003132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <MX_TIM1_Init+0xa0>)
 8003136:	f240 22cf 	movw	r2, #719	; 0x2cf
 800313a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <MX_TIM1_Init+0xa0>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <MX_TIM1_Init+0xa0>)
 8003144:	f242 720f 	movw	r2, #9999	; 0x270f
 8003148:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <MX_TIM1_Init+0xa0>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <MX_TIM1_Init+0xa0>)
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <MX_TIM1_Init+0xa0>)
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800315c:	4814      	ldr	r0, [pc, #80]	; (80031b0 <MX_TIM1_Init+0xa0>)
 800315e:	f004 f9b8 	bl	80074d2 <HAL_TIM_Base_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8003168:	f000 fa4a 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800316c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4619      	mov	r1, r3
 8003178:	480d      	ldr	r0, [pc, #52]	; (80031b0 <MX_TIM1_Init+0xa0>)
 800317a:	f004 febb 	bl	8007ef4 <HAL_TIM_ConfigClockSource>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003184:	f000 fa3c 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_TIM1_Init+0xa0>)
 800319a:	f005 fbc3 	bl	8008924 <HAL_TIMEx_MasterConfigSynchronization>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80031a4:	f000 fa2c 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031a8:	bf00      	nop
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000404 	.word	0x20000404
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ca:	463b      	mov	r3, r7
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
 80031d8:	615a      	str	r2, [r3, #20]
 80031da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <MX_TIM2_Init+0xb0>)
 80031de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <MX_TIM2_Init+0xb0>)
 80031e6:	2247      	movs	r2, #71	; 0x47
 80031e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <MX_TIM2_Init+0xb0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <MX_TIM2_Init+0xb0>)
 80031f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <MX_TIM2_Init+0xb0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <MX_TIM2_Init+0xb0>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003204:	4818      	ldr	r0, [pc, #96]	; (8003268 <MX_TIM2_Init+0xb0>)
 8003206:	f004 fa54 	bl	80076b2 <HAL_TIM_PWM_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003210:	f000 f9f6 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	4811      	ldr	r0, [pc, #68]	; (8003268 <MX_TIM2_Init+0xb0>)
 8003224:	f005 fb7e 	bl	8008924 <HAL_TIMEx_MasterConfigSynchronization>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800322e:	f000 f9e7 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003232:	2360      	movs	r3, #96	; 0x60
 8003234:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003242:	463b      	mov	r3, r7
 8003244:	2208      	movs	r2, #8
 8003246:	4619      	mov	r1, r3
 8003248:	4807      	ldr	r0, [pc, #28]	; (8003268 <MX_TIM2_Init+0xb0>)
 800324a:	f004 fd3f 	bl	8007ccc <HAL_TIM_PWM_ConfigChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003254:	f000 f9d4 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003258:	4803      	ldr	r0, [pc, #12]	; (8003268 <MX_TIM2_Init+0xb0>)
 800325a:	f000 fb41 	bl	80038e0 <HAL_TIM_MspPostInit>

}
 800325e:	bf00      	nop
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200004b4 	.word	0x200004b4

0800326c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003272:	f107 0310 	add.w	r3, r7, #16
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_TIM3_Init+0x94>)
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <MX_TIM3_Init+0x98>)
 800328e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <MX_TIM3_Init+0x94>)
 8003292:	2247      	movs	r2, #71	; 0x47
 8003294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_TIM3_Init+0x94>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_TIM3_Init+0x94>)
 800329e:	f242 720f 	movw	r2, #9999	; 0x270f
 80032a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <MX_TIM3_Init+0x94>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <MX_TIM3_Init+0x94>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032b0:	4813      	ldr	r0, [pc, #76]	; (8003300 <MX_TIM3_Init+0x94>)
 80032b2:	f004 f90e 	bl	80074d2 <HAL_TIM_Base_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80032bc:	f000 f9a0 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032c6:	f107 0310 	add.w	r3, r7, #16
 80032ca:	4619      	mov	r1, r3
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <MX_TIM3_Init+0x94>)
 80032ce:	f004 fe11 	bl	8007ef4 <HAL_TIM_ConfigClockSource>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80032d8:	f000 f992 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4805      	ldr	r0, [pc, #20]	; (8003300 <MX_TIM3_Init+0x94>)
 80032ea:	f005 fb1b 	bl	8008924 <HAL_TIMEx_MasterConfigSynchronization>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80032f4:	f000 f984 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000340 	.word	0x20000340
 8003304:	40000400 	.word	0x40000400

08003308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <MX_TIM4_Init+0x98>)
 8003328:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <MX_TIM4_Init+0x9c>)
 800332a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <MX_TIM4_Init+0x98>)
 800332e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <MX_TIM4_Init+0x98>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <MX_TIM4_Init+0x98>)
 800333c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003340:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <MX_TIM4_Init+0x98>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <MX_TIM4_Init+0x98>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800334e:	4814      	ldr	r0, [pc, #80]	; (80033a0 <MX_TIM4_Init+0x98>)
 8003350:	f004 f8bf 	bl	80074d2 <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800335a:	f000 f951 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	4619      	mov	r1, r3
 800336a:	480d      	ldr	r0, [pc, #52]	; (80033a0 <MX_TIM4_Init+0x98>)
 800336c:	f004 fdc2 	bl	8007ef4 <HAL_TIM_ConfigClockSource>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003376:	f000 f943 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4619      	mov	r1, r3
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <MX_TIM4_Init+0x98>)
 8003388:	f005 facc 	bl	8008924 <HAL_TIMEx_MasterConfigSynchronization>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003392:	f000 f935 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000164 	.word	0x20000164
 80033a4:	40000800 	.word	0x40000800

080033a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <MX_USB_PCD_Init+0x40>)
 80033b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033b4:	2208      	movs	r2, #8
 80033b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033ba:	2202      	movs	r2, #2
 80033bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033c0:	2202      	movs	r2, #2
 80033c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_USB_PCD_Init+0x3c>)
 80033d2:	f002 fc29 	bl	8005c28 <HAL_PCD_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80033dc:	f000 f910 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000500 	.word	0x20000500
 80033e8:	40005c00 	.word	0x40005c00

080033ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <MX_GPIO_Init+0x200>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	4a79      	ldr	r2, [pc, #484]	; (80035ec <MX_GPIO_Init+0x200>)
 8003408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800340c:	6153      	str	r3, [r2, #20]
 800340e:	4b77      	ldr	r3, [pc, #476]	; (80035ec <MX_GPIO_Init+0x200>)
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800341a:	4b74      	ldr	r3, [pc, #464]	; (80035ec <MX_GPIO_Init+0x200>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4a73      	ldr	r2, [pc, #460]	; (80035ec <MX_GPIO_Init+0x200>)
 8003420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003424:	6153      	str	r3, [r2, #20]
 8003426:	4b71      	ldr	r3, [pc, #452]	; (80035ec <MX_GPIO_Init+0x200>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003432:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <MX_GPIO_Init+0x200>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4a6d      	ldr	r2, [pc, #436]	; (80035ec <MX_GPIO_Init+0x200>)
 8003438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343c:	6153      	str	r3, [r2, #20]
 800343e:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <MX_GPIO_Init+0x200>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	4b68      	ldr	r3, [pc, #416]	; (80035ec <MX_GPIO_Init+0x200>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <MX_GPIO_Init+0x200>)
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	6153      	str	r3, [r2, #20]
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <MX_GPIO_Init+0x200>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	4b62      	ldr	r3, [pc, #392]	; (80035ec <MX_GPIO_Init+0x200>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4a61      	ldr	r2, [pc, #388]	; (80035ec <MX_GPIO_Init+0x200>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6153      	str	r3, [r2, #20]
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <MX_GPIO_Init+0x200>)
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800347a:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <MX_GPIO_Init+0x200>)
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <MX_GPIO_Init+0x200>)
 8003480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003484:	6153      	str	r3, [r2, #20]
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <MX_GPIO_Init+0x200>)
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003492:	2200      	movs	r2, #0
 8003494:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003498:	4855      	ldr	r0, [pc, #340]	; (80035f0 <MX_GPIO_Init+0x204>)
 800349a:	f002 fa55 	bl	8005948 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80034a4:	4853      	ldr	r0, [pc, #332]	; (80035f4 <MX_GPIO_Init+0x208>)
 80034a6:	f002 fa4f 	bl	8005948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80034aa:	2200      	movs	r2, #0
 80034ac:	f64f 01f3 	movw	r1, #63731	; 0xf8f3
 80034b0:	4851      	ldr	r0, [pc, #324]	; (80035f8 <MX_GPIO_Init+0x20c>)
 80034b2:	f002 fa49 	bl	8005948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80034b6:	2200      	movs	r2, #0
 80034b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80034bc:	484f      	ldr	r0, [pc, #316]	; (80035fc <MX_GPIO_Init+0x210>)
 80034be:	f002 fa43 	bl	8005948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80034c2:	f64f 7308 	movw	r3, #65288	; 0xff08
 80034c6:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034d4:	f107 031c 	add.w	r3, r7, #28
 80034d8:	4619      	mov	r1, r3
 80034da:	4845      	ldr	r0, [pc, #276]	; (80035f0 <MX_GPIO_Init+0x204>)
 80034dc:	f002 f8a2 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80034e0:	2330      	movs	r3, #48	; 0x30
 80034e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80034e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	4619      	mov	r1, r3
 80034f4:	483e      	ldr	r0, [pc, #248]	; (80035f0 <MX_GPIO_Init+0x204>)
 80034f6:	f002 f895 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80034fa:	230f      	movs	r3, #15
 80034fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003504:	2302      	movs	r3, #2
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	4619      	mov	r1, r3
 800350e:	483b      	ldr	r0, [pc, #236]	; (80035fc <MX_GPIO_Init+0x210>)
 8003510:	f002 f888 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003514:	2301      	movs	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003518:	2300      	movs	r3, #0
 800351a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800351c:	2302      	movs	r3, #2
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	4619      	mov	r1, r3
 8003526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800352a:	f002 f87b 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800352e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003534:	2301      	movs	r3, #1
 8003536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003538:	2302      	movs	r3, #2
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800353c:	2301      	movs	r3, #1
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	482b      	ldr	r0, [pc, #172]	; (80035f4 <MX_GPIO_Init+0x208>)
 8003548:	f002 f86c 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800354c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003550:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003552:	2301      	movs	r3, #1
 8003554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800355e:	f107 031c 	add.w	r3, r7, #28
 8003562:	4619      	mov	r1, r3
 8003564:	4824      	ldr	r0, [pc, #144]	; (80035f8 <MX_GPIO_Init+0x20c>)
 8003566:	f002 f85d 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800356a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800356e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003570:	2301      	movs	r3, #1
 8003572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357c:	f107 031c 	add.w	r3, r7, #28
 8003580:	4619      	mov	r1, r3
 8003582:	481e      	ldr	r0, [pc, #120]	; (80035fc <MX_GPIO_Init+0x210>)
 8003584:	f002 f84e 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8003588:	23f3      	movs	r3, #243	; 0xf3
 800358a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358c:	2301      	movs	r3, #1
 800358e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003590:	2302      	movs	r3, #2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003594:	2301      	movs	r3, #1
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4816      	ldr	r0, [pc, #88]	; (80035f8 <MX_GPIO_Init+0x20c>)
 80035a0:	f002 f840 	bl	8005624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2102      	movs	r1, #2
 80035a8:	2006      	movs	r0, #6
 80035aa:	f002 f804 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035ae:	2006      	movs	r0, #6
 80035b0:	f002 f81d 	bl	80055ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2102      	movs	r1, #2
 80035b8:	2007      	movs	r0, #7
 80035ba:	f001 fffc 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80035be:	2007      	movs	r0, #7
 80035c0:	f002 f815 	bl	80055ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 2, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2102      	movs	r1, #2
 80035c8:	2008      	movs	r0, #8
 80035ca:	f001 fff4 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80035ce:	2008      	movs	r0, #8
 80035d0:	f002 f80d 	bl	80055ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80035d4:	2200      	movs	r2, #0
 80035d6:	2102      	movs	r1, #2
 80035d8:	2009      	movs	r0, #9
 80035da:	f001 ffec 	bl	80055b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80035de:	2009      	movs	r0, #9
 80035e0:	f002 f805 	bl	80055ee <HAL_NVIC_EnableIRQ>

}
 80035e4:	bf00      	nop
 80035e6:	3730      	adds	r7, #48	; 0x30
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	48001000 	.word	0x48001000
 80035f4:	48000400 	.word	0x48000400
 80035f8:	48000c00 	.word	0x48000c00
 80035fc:	48000800 	.word	0x48000800

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003608:	e7fe      	b.n	8003608 <Error_Handler+0x8>
	...

0800360c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_MspInit+0x44>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <HAL_MspInit+0x44>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6193      	str	r3, [r2, #24]
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_MspInit+0x44>)
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_MspInit+0x44>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_MspInit+0x44>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	61d3      	str	r3, [r2, #28]
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_MspInit+0x44>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003642:	2005      	movs	r0, #5
 8003644:	f001 ffac 	bl	80055a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003674:	d12c      	bne.n	80036d0 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	6153      	str	r3, [r2, #20]
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	6153      	str	r3, [r2, #20]
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_ADC_MspInit+0x84>)
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036a6:	2302      	movs	r3, #2
 80036a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036aa:	2303      	movs	r3, #3
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	4619      	mov	r1, r3
 80036b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036bc:	f001 ffb2 	bl	8005624 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2101      	movs	r1, #1
 80036c4:	2012      	movs	r0, #18
 80036c6:	f001 ff76 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f001 ff8f 	bl	80055ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_I2C_MspInit+0x7c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d127      	bne.n	800374e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6153      	str	r3, [r2, #20]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_I2C_MspInit+0x80>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003716:	23c0      	movs	r3, #192	; 0xc0
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371a:	2312      	movs	r3, #18
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371e:	2301      	movs	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003722:	2303      	movs	r3, #3
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003726:	2304      	movs	r3, #4
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	480b      	ldr	r0, [pc, #44]	; (8003760 <HAL_I2C_MspInit+0x84>)
 8003732:	f001 ff77 	bl	8005624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_I2C_MspInit+0x80>)
 800373c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40005400 	.word	0x40005400
 800375c:	40021000 	.word	0x40021000
 8003760:	48000400 	.word	0x48000400

08003764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_SPI_MspInit+0x7c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d128      	bne.n	80037d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 800378c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003790:	6193      	str	r3, [r2, #24]
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	6153      	str	r3, [r2, #20]
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80037b6:	23e0      	movs	r3, #224	; 0xe0
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037c6:	2305      	movs	r3, #5
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d4:	f001 ff26 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013000 	.word	0x40013000
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_TIM_Base_MspInit+0xac>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d114      	bne.n	8003824 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4a26      	ldr	r2, [pc, #152]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003804:	6193      	str	r3, [r2, #24]
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2101      	movs	r1, #1
 8003816:	2018      	movs	r0, #24
 8003818:	f001 fecd 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800381c:	2018      	movs	r0, #24
 800381e:	f001 fee6 	bl	80055ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003822:	e032      	b.n	800388a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <HAL_TIM_Base_MspInit+0xb4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d114      	bne.n	8003858 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	61d3      	str	r3, [r2, #28]
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	2103      	movs	r1, #3
 800384a:	201d      	movs	r0, #29
 800384c:	f001 feb3 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003850:	201d      	movs	r0, #29
 8003852:	f001 fecc 	bl	80055ee <HAL_NVIC_EnableIRQ>
}
 8003856:	e018      	b.n	800388a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <HAL_TIM_Base_MspInit+0xb8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d113      	bne.n	800388a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	61d3      	str	r3, [r2, #28]
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_TIM_Base_MspInit+0xb0>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2102      	movs	r1, #2
 800387e:	201e      	movs	r0, #30
 8003880:	f001 fe99 	bl	80055b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003884:	201e      	movs	r0, #30
 8003886:	f001 feb2 	bl	80055ee <HAL_NVIC_EnableIRQ>
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40021000 	.word	0x40021000
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800

080038a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d10b      	bne.n	80038ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_TIM_PWM_MspInit+0x38>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <HAL_TIM_PWM_MspInit+0x38>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	61d3      	str	r3, [r2, #28]
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_TIM_PWM_MspInit+0x38>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d11c      	bne.n	800393c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_TIM_MspPostInit+0x64>)
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <HAL_TIM_MspPostInit+0x64>)
 8003908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390c:	6153      	str	r3, [r2, #20]
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_TIM_MspPostInit+0x64>)
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800391a:	2304      	movs	r3, #4
 800391c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003938:	f001 fe74 	bl	8005624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800393c:	bf00      	nop
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_PCD_MspInit+0x80>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d129      	bne.n	80039be <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <HAL_PCD_MspInit+0x84>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_PCD_MspInit+0x84>)
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	6153      	str	r3, [r2, #20]
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_PCD_MspInit+0x84>)
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003994:	230e      	movs	r3, #14
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a2:	f001 fe3f 	bl	8005624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_PCD_MspInit+0x84>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a08      	ldr	r2, [pc, #32]	; (80039cc <HAL_PCD_MspInit+0x84>)
 80039ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_PCD_MspInit+0x84>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40005c00 	.word	0x40005c00
 80039cc:	40021000 	.word	0x40021000

080039d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <NMI_Handler+0x4>

080039d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039da:	e7fe      	b.n	80039da <HardFault_Handler+0x4>

080039dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <MemManage_Handler+0x4>

080039e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <BusFault_Handler+0x4>

080039e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <UsageFault_Handler+0x4>

080039ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a1c:	f000 f98e 	bl	8003d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f001 ffbf 	bl	80059ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a36:	2002      	movs	r0, #2
 8003a38:	f001 ffb8 	bl	80059ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003a44:	2004      	movs	r0, #4
 8003a46:	f001 ffb1 	bl	80059ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003a52:	2008      	movs	r0, #8
 8003a54:	f001 ffaa 	bl	80059ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <ADC1_2_IRQHandler+0x10>)
 8003a62:	f000 fcf1 	bl	8004448 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000394 	.word	0x20000394

08003a70 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003a76:	f004 f809 	bl	8007a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000404 	.word	0x20000404

08003a84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <TIM3_IRQHandler+0x10>)
 8003a8a:	f003 ffff 	bl	8007a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000340 	.word	0x20000340

08003a98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <TIM4_IRQHandler+0x10>)
 8003a9e:	f003 fff5 	bl	8007a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000164 	.word	0x20000164

08003aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	return 1;
 8003ab0:	2301      	movs	r3, #1
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_kill>:

int _kill(int pid, int sig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ac6:	f005 f807 	bl	8008ad8 <__errno>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2216      	movs	r2, #22
 8003ace:	601a      	str	r2, [r3, #0]
	return -1;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_exit>:

void _exit (int status)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ffe7 	bl	8003abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003aee:	e7fe      	b.n	8003aee <_exit+0x12>

08003af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e00a      	b.n	8003b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b02:	f3af 8000 	nop.w
 8003b06:	4601      	mov	r1, r0
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	60ba      	str	r2, [r7, #8]
 8003b0e:	b2ca      	uxtb	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	dbf0      	blt.n	8003b02 <_read+0x12>
	}

return len;
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e009      	b.n	8003b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	60ba      	str	r2, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	dbf1      	blt.n	8003b3c <_write+0x12>
	}
	return len;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_close>:

int _close(int file)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	return -1;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <_isatty>:

int _isatty(int file)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
	return 0;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bd4:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <_sbrk+0x5c>)
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <_sbrk+0x60>)
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <_sbrk+0x64>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_sbrk+0x64>)
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <_sbrk+0x68>)
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bee:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <_sbrk+0x64>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d207      	bcs.n	8003c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bfc:	f004 ff6c 	bl	8008ad8 <__errno>
 8003c00:	4603      	mov	r3, r0
 8003c02:	220c      	movs	r2, #12
 8003c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	e009      	b.n	8003c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <_sbrk+0x64>)
 8003c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000a000 	.word	0x2000a000
 8003c2c:	00000400 	.word	0x00000400
 8003c30:	20000118 	.word	0x20000118
 8003c34:	20000800 	.word	0x20000800

08003c38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SystemInit+0x20>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <SystemInit+0x20>)
 8003c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c62:	490e      	ldr	r1, [pc, #56]	; (8003c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c64:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <LoopForever+0xe>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c68:	e002      	b.n	8003c70 <LoopCopyDataInit>

08003c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6e:	3304      	adds	r3, #4

08003c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c74:	d3f9      	bcc.n	8003c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c76:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c78:	4c0b      	ldr	r4, [pc, #44]	; (8003ca8 <LoopForever+0x16>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c7c:	e001      	b.n	8003c82 <LoopFillZerobss>

08003c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c80:	3204      	adds	r2, #4

08003c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c84:	d3fb      	bcc.n	8003c7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c86:	f7ff ffd7 	bl	8003c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f004 ff2b 	bl	8008ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c8e:	f7ff f85f 	bl	8002d50 <main>

08003c92 <LoopForever>:

LoopForever:
    b LoopForever
 8003c92:	e7fe      	b.n	8003c92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c9c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8003ca0:	0800c760 	.word	0x0800c760
  ldr r2, =_sbss
 8003ca4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8003ca8:	20000800 	.word	0x20000800

08003cac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cac:	e7fe      	b.n	8003cac <ADC3_IRQHandler>
	...

08003cb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_Init+0x28>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_Init+0x28>)
 8003cba:	f043 0310 	orr.w	r3, r3, #16
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f001 fc6d 	bl	80055a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f000 f808 	bl	8003cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ccc:	f7ff fc9e 	bl	800360c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40022000 	.word	0x40022000

08003cdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_InitTick+0x54>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_InitTick+0x58>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 fc85 	bl	800560a <HAL_SYSTICK_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00e      	b.n	8003d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d80a      	bhi.n	8003d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d10:	2200      	movs	r2, #0
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	f001 fc4d 	bl	80055b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <HAL_InitTick+0x5c>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	2000005c 	.word	0x2000005c
 8003d34:	20000064 	.word	0x20000064
 8003d38:	20000060 	.word	0x20000060

08003d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_IncTick+0x20>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_IncTick+0x24>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_IncTick+0x24>)
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000064 	.word	0x20000064
 8003d60:	200007ec 	.word	0x200007ec

08003d64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return uwTick;  
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_GetTick+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	200007ec 	.word	0x200007ec

08003d7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d84:	f7ff ffee 	bl	8003d64 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d005      	beq.n	8003da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_Delay+0x44>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003da2:	bf00      	nop
 8003da4:	f7ff ffde 	bl	8003d64 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d8f7      	bhi.n	8003da4 <HAL_Delay+0x28>
  {
  }
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000064 	.word	0x20000064

08003dc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b09a      	sub	sp, #104	; 0x68
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e1c9      	b.n	80041a0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d176      	bne.n	8003f0c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d152      	bne.n	8003ecc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fc07 	bl	8003654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d13b      	bne.n	8003ecc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fa6d 	bl	8005334 <ADC_Disable>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d12f      	bne.n	8003ecc <HAL_ADC_Init+0xe0>
 8003e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d12b      	bne.n	8003ecc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e7c:	f023 0302 	bic.w	r3, r3, #2
 8003e80:	f043 0202 	orr.w	r2, r3, #2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e96:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ea6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea8:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <HAL_ADC_Init+0x2d8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a86      	ldr	r2, [pc, #536]	; (80040c8 <HAL_ADC_Init+0x2dc>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0c9a      	lsrs	r2, r3, #18
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ebe:	e002      	b.n	8003ec6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee8:	d110      	bne.n	8003f0c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f023 0312 	bic.w	r3, r3, #18
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 8136 	bne.w	8004186 <HAL_ADC_Init+0x39a>
 8003f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 8131 	bne.w	8004186 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8129 	bne.w	8004186 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f3c:	f043 0202 	orr.w	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4c:	d004      	beq.n	8003f58 <HAL_ADC_Init+0x16c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a5e      	ldr	r2, [pc, #376]	; (80040cc <HAL_ADC_Init+0x2e0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_ADC_Init+0x170>
 8003f58:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_ADC_Init+0x2e4>)
 8003f5a:	e000      	b.n	8003f5e <HAL_ADC_Init+0x172>
 8003f5c:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <HAL_ADC_Init+0x2e8>)
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f68:	d102      	bne.n	8003f70 <HAL_ADC_Init+0x184>
 8003f6a:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_ADC_Init+0x2e0>)
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e01a      	b.n	8003fa6 <HAL_ADC_Init+0x1ba>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a55      	ldr	r2, [pc, #340]	; (80040cc <HAL_ADC_Init+0x2e0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d103      	bne.n	8003f82 <HAL_ADC_Init+0x196>
 8003f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e011      	b.n	8003fa6 <HAL_ADC_Init+0x1ba>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a54      	ldr	r2, [pc, #336]	; (80040d8 <HAL_ADC_Init+0x2ec>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADC_Init+0x1a6>
 8003f8c:	4b53      	ldr	r3, [pc, #332]	; (80040dc <HAL_ADC_Init+0x2f0>)
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e009      	b.n	8003fa6 <HAL_ADC_Init+0x1ba>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a51      	ldr	r2, [pc, #324]	; (80040dc <HAL_ADC_Init+0x2f0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_ADC_Init+0x1b6>
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <HAL_ADC_Init+0x2ec>)
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e001      	b.n	8003fa6 <HAL_ADC_Init+0x1ba>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d108      	bne.n	8003fc6 <HAL_ADC_Init+0x1da>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Init+0x1da>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_ADC_Init+0x1dc>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11c      	bne.n	8004006 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d107      	bne.n	8003fee <HAL_ADC_Init+0x202>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Init+0x202>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_ADC_Init+0x204>
 8003fee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	431a      	orrs	r2, r3
 8004002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004004:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7e5b      	ldrb	r3, [r3, #25]
 800400a:	035b      	lsls	r3, r3, #13
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004010:	2a01      	cmp	r2, #1
 8004012:	d002      	beq.n	800401a <HAL_ADC_Init+0x22e>
 8004014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004018:	e000      	b.n	800401c <HAL_ADC_Init+0x230>
 800401a:	2200      	movs	r2, #0
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800402c:	4313      	orrs	r3, r2
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d11b      	bne.n	8004072 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7e5b      	ldrb	r3, [r3, #25]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	3b01      	subs	r3, #1
 8004048:	045a      	lsls	r2, r3, #17
 800404a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404c:	4313      	orrs	r3, r2
 800404e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	e00d      	b.n	8004072 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	2b01      	cmp	r3, #1
 8004078:	d03a      	beq.n	80040f0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_ADC_Init+0x2ec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_ADC_Init+0x2a2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <HAL_ADC_Init+0x2f0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d128      	bne.n	80040e0 <HAL_ADC_Init+0x2f4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004096:	d012      	beq.n	80040be <HAL_ADC_Init+0x2d2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a0:	d00a      	beq.n	80040b8 <HAL_ADC_Init+0x2cc>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80040aa:	d002      	beq.n	80040b2 <HAL_ADC_Init+0x2c6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	e018      	b.n	80040e4 <HAL_ADC_Init+0x2f8>
 80040b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040b6:	e015      	b.n	80040e4 <HAL_ADC_Init+0x2f8>
 80040b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80040bc:	e012      	b.n	80040e4 <HAL_ADC_Init+0x2f8>
 80040be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80040c2:	e00f      	b.n	80040e4 <HAL_ADC_Init+0x2f8>
 80040c4:	2000005c 	.word	0x2000005c
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	50000100 	.word	0x50000100
 80040d0:	50000300 	.word	0x50000300
 80040d4:	50000700 	.word	0x50000700
 80040d8:	50000400 	.word	0x50000400
 80040dc:	50000500 	.word	0x50000500
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040e8:	4313      	orrs	r3, r2
 80040ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ec:	4313      	orrs	r3, r2
 80040ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d114      	bne.n	8004128 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7e1b      	ldrb	r3, [r3, #24]
 8004116:	039a      	lsls	r2, r3, #14
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4313      	orrs	r3, r2
 8004122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004124:	4313      	orrs	r3, r2
 8004126:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <HAL_ADC_Init+0x3bc>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004138:	430b      	orrs	r3, r1
 800413a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10c      	bne.n	800415e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f023 010f 	bic.w	r1, r3, #15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
 800415c:	e007      	b.n	800416e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 020f 	bic.w	r2, r2, #15
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f023 0303 	bic.w	r3, r3, #3
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
 8004184:	e00a      	b.n	800419c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f023 0312 	bic.w	r3, r3, #18
 800418e:	f043 0210 	orr.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800419c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3768      	adds	r7, #104	; 0x68
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	fff0c007 	.word	0xfff0c007

080041ac <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 8123 	bne.w	800440e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_Start_IT+0x2a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e11e      	b.n	8004414 <HAL_ADC_Start_IT+0x268>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f001 f844 	bl	800526c <ADC_Enable>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 810a 	bne.w	8004404 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420c:	d004      	beq.n	8004218 <HAL_ADC_Start_IT+0x6c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a82      	ldr	r2, [pc, #520]	; (800441c <HAL_ADC_Start_IT+0x270>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d106      	bne.n	8004226 <HAL_ADC_Start_IT+0x7a>
 8004218:	4b81      	ldr	r3, [pc, #516]	; (8004420 <HAL_ADC_Start_IT+0x274>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_ADC_Start_IT+0x9a>
 8004224:	e005      	b.n	8004232 <HAL_ADC_Start_IT+0x86>
 8004226:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <HAL_ADC_Start_IT+0x278>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_ADC_Start_IT+0x9a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800423a:	d004      	beq.n	8004246 <HAL_ADC_Start_IT+0x9a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a79      	ldr	r2, [pc, #484]	; (8004428 <HAL_ADC_Start_IT+0x27c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d115      	bne.n	8004272 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d036      	beq.n	80042ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004268:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004270:	e02d      	b.n	80042ce <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004286:	d004      	beq.n	8004292 <HAL_ADC_Start_IT+0xe6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a63      	ldr	r2, [pc, #396]	; (800441c <HAL_ADC_Start_IT+0x270>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10a      	bne.n	80042a8 <HAL_ADC_Start_IT+0xfc>
 8004292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e008      	b.n	80042ba <HAL_ADC_Start_IT+0x10e>
 80042a8:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_ADC_Start_IT+0x27c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d106      	bne.n	80042ea <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f023 0206 	bic.w	r2, r3, #6
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
 80042e8:	e002      	b.n	80042f0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	221c      	movs	r2, #28
 80042fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d110      	bne.n	800432a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	605a      	str	r2, [r3, #4]
          break;
 8004328:	e008      	b.n	800433c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 020c 	orr.w	r2, r2, #12
 8004338:	605a      	str	r2, [r3, #4]
          break;
 800433a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0210 	bic.w	r2, r2, #16
 8004352:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435c:	d004      	beq.n	8004368 <HAL_ADC_Start_IT+0x1bc>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2e      	ldr	r2, [pc, #184]	; (800441c <HAL_ADC_Start_IT+0x270>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d106      	bne.n	8004376 <HAL_ADC_Start_IT+0x1ca>
 8004368:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_ADC_Start_IT+0x274>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2b00      	cmp	r3, #0
 8004372:	d03e      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 8004374:	e005      	b.n	8004382 <HAL_ADC_Start_IT+0x1d6>
 8004376:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_ADC_Start_IT+0x278>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2b00      	cmp	r3, #0
 8004380:	d037      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438a:	d004      	beq.n	8004396 <HAL_ADC_Start_IT+0x1ea>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <HAL_ADC_Start_IT+0x270>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d106      	bne.n	80043a4 <HAL_ADC_Start_IT+0x1f8>
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_ADC_Start_IT+0x274>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d027      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 80043a2:	e005      	b.n	80043b0 <HAL_ADC_Start_IT+0x204>
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_ADC_Start_IT+0x278>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d020      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b8:	d004      	beq.n	80043c4 <HAL_ADC_Start_IT+0x218>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_ADC_Start_IT+0x270>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d106      	bne.n	80043d2 <HAL_ADC_Start_IT+0x226>
 80043c4:	4b16      	ldr	r3, [pc, #88]	; (8004420 <HAL_ADC_Start_IT+0x274>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d010      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 80043d0:	e005      	b.n	80043de <HAL_ADC_Start_IT+0x232>
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_ADC_Start_IT+0x278>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d009      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_Start_IT+0x246>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_ADC_Start_IT+0x27c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10f      	bne.n	8004412 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0204 	orr.w	r2, r2, #4
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	e006      	b.n	8004412 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800440c:	e001      	b.n	8004412 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800440e:	2302      	movs	r3, #2
 8004410:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	50000100 	.word	0x50000100
 8004420:	50000300 	.word	0x50000300
 8004424:	50000700 	.word	0x50000700
 8004428:	50000400 	.word	0x50000400

0800442c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d106      	bne.n	8004478 <HAL_ADC_IRQHandler+0x30>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00f      	beq.n	8004498 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004482:	2b08      	cmp	r3, #8
 8004484:	f040 80c0 	bne.w	8004608 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b08      	cmp	r3, #8
 8004494:	f040 80b8 	bne.w	8004608 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b8:	d004      	beq.n	80044c4 <HAL_ADC_IRQHandler+0x7c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a95      	ldr	r2, [pc, #596]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d106      	bne.n	80044d2 <HAL_ADC_IRQHandler+0x8a>
 80044c4:	4b94      	ldr	r3, [pc, #592]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d03e      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 80044d0:	e005      	b.n	80044de <HAL_ADC_IRQHandler+0x96>
 80044d2:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d037      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e6:	d004      	beq.n	80044f2 <HAL_ADC_IRQHandler+0xaa>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a89      	ldr	r2, [pc, #548]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d106      	bne.n	8004500 <HAL_ADC_IRQHandler+0xb8>
 80044f2:	4b89      	ldr	r3, [pc, #548]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d027      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 80044fe:	e005      	b.n	800450c <HAL_ADC_IRQHandler+0xc4>
 8004500:	4b86      	ldr	r3, [pc, #536]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	2b05      	cmp	r3, #5
 800450a:	d020      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004514:	d004      	beq.n	8004520 <HAL_ADC_IRQHandler+0xd8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7e      	ldr	r2, [pc, #504]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d106      	bne.n	800452e <HAL_ADC_IRQHandler+0xe6>
 8004520:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2b09      	cmp	r3, #9
 800452a:	d010      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 800452c:	e005      	b.n	800453a <HAL_ADC_IRQHandler+0xf2>
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2b09      	cmp	r3, #9
 8004538:	d009      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004542:	d004      	beq.n	800454e <HAL_ADC_IRQHandler+0x106>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a75      	ldr	r2, [pc, #468]	; (8004720 <HAL_ADC_IRQHandler+0x2d8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d104      	bne.n	8004558 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e00f      	b.n	8004578 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004560:	d004      	beq.n	800456c <HAL_ADC_IRQHandler+0x124>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6b      	ldr	r2, [pc, #428]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d102      	bne.n	8004572 <HAL_ADC_IRQHandler+0x12a>
 800456c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004570:	e000      	b.n	8004574 <HAL_ADC_IRQHandler+0x12c>
 8004572:	4b6b      	ldr	r3, [pc, #428]	; (8004720 <HAL_ADC_IRQHandler+0x2d8>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004582:	2b00      	cmp	r3, #0
 8004584:	d139      	bne.n	80045fa <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800458c:	2b00      	cmp	r3, #0
 800458e:	d134      	bne.n	80045fa <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d12d      	bne.n	80045fa <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d11a      	bne.n	80045e2 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 020c 	bic.w	r2, r2, #12
 80045ba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d112      	bne.n	80045fa <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
 80045e0:	e00b      	b.n	80045fa <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fca6 	bl	8001f4c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	220c      	movs	r2, #12
 8004606:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d106      	bne.n	8004624 <HAL_ADC_IRQHandler+0x1dc>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d00f      	beq.n	8004644 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	f040 813c 	bne.w	80048ac <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	f040 8134 	bne.w	80048ac <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004658:	d004      	beq.n	8004664 <HAL_ADC_IRQHandler+0x21c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2d      	ldr	r2, [pc, #180]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d106      	bne.n	8004672 <HAL_ADC_IRQHandler+0x22a>
 8004664:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2b00      	cmp	r3, #0
 800466e:	d03e      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 8004670:	e005      	b.n	800467e <HAL_ADC_IRQHandler+0x236>
 8004672:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	2b00      	cmp	r3, #0
 800467c:	d037      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004686:	d004      	beq.n	8004692 <HAL_ADC_IRQHandler+0x24a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d106      	bne.n	80046a0 <HAL_ADC_IRQHandler+0x258>
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2b05      	cmp	r3, #5
 800469c:	d027      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 800469e:	e005      	b.n	80046ac <HAL_ADC_IRQHandler+0x264>
 80046a0:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d020      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b4:	d004      	beq.n	80046c0 <HAL_ADC_IRQHandler+0x278>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d106      	bne.n	80046ce <HAL_ADC_IRQHandler+0x286>
 80046c0:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_ADC_IRQHandler+0x2d0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	d010      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 80046cc:	e005      	b.n	80046da <HAL_ADC_IRQHandler+0x292>
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_ADC_IRQHandler+0x2d4>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d009      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e2:	d004      	beq.n	80046ee <HAL_ADC_IRQHandler+0x2a6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <HAL_ADC_IRQHandler+0x2d8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d104      	bne.n	80046f8 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	e018      	b.n	800472a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004700:	d004      	beq.n	800470c <HAL_ADC_IRQHandler+0x2c4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a03      	ldr	r2, [pc, #12]	; (8004714 <HAL_ADC_IRQHandler+0x2cc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10b      	bne.n	8004724 <HAL_ADC_IRQHandler+0x2dc>
 800470c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004710:	e009      	b.n	8004726 <HAL_ADC_IRQHandler+0x2de>
 8004712:	bf00      	nop
 8004714:	50000100 	.word	0x50000100
 8004718:	50000300 	.word	0x50000300
 800471c:	50000700 	.word	0x50000700
 8004720:	50000400 	.word	0x50000400
 8004724:	4b9d      	ldr	r3, [pc, #628]	; (800499c <HAL_ADC_IRQHandler+0x554>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 80b2 	bne.w	800489e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 80a5 	bne.w	800489e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 809f 	bne.w	800489e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	f040 8097 	bne.w	800489e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004778:	d004      	beq.n	8004784 <HAL_ADC_IRQHandler+0x33c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a88      	ldr	r2, [pc, #544]	; (80049a0 <HAL_ADC_IRQHandler+0x558>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d106      	bne.n	8004792 <HAL_ADC_IRQHandler+0x34a>
 8004784:	4b87      	ldr	r3, [pc, #540]	; (80049a4 <HAL_ADC_IRQHandler+0x55c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03e      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 8004790:	e005      	b.n	800479e <HAL_ADC_IRQHandler+0x356>
 8004792:	4b85      	ldr	r3, [pc, #532]	; (80049a8 <HAL_ADC_IRQHandler+0x560>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2b00      	cmp	r3, #0
 800479c:	d037      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a6:	d004      	beq.n	80047b2 <HAL_ADC_IRQHandler+0x36a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a7c      	ldr	r2, [pc, #496]	; (80049a0 <HAL_ADC_IRQHandler+0x558>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d106      	bne.n	80047c0 <HAL_ADC_IRQHandler+0x378>
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <HAL_ADC_IRQHandler+0x55c>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d027      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 80047be:	e005      	b.n	80047cc <HAL_ADC_IRQHandler+0x384>
 80047c0:	4b79      	ldr	r3, [pc, #484]	; (80049a8 <HAL_ADC_IRQHandler+0x560>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2b06      	cmp	r3, #6
 80047ca:	d020      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d4:	d004      	beq.n	80047e0 <HAL_ADC_IRQHandler+0x398>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a71      	ldr	r2, [pc, #452]	; (80049a0 <HAL_ADC_IRQHandler+0x558>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d106      	bne.n	80047ee <HAL_ADC_IRQHandler+0x3a6>
 80047e0:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <HAL_ADC_IRQHandler+0x55c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d010      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 80047ec:	e005      	b.n	80047fa <HAL_ADC_IRQHandler+0x3b2>
 80047ee:	4b6e      	ldr	r3, [pc, #440]	; (80049a8 <HAL_ADC_IRQHandler+0x560>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2b07      	cmp	r3, #7
 80047f8:	d009      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004802:	d004      	beq.n	800480e <HAL_ADC_IRQHandler+0x3c6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a64      	ldr	r2, [pc, #400]	; (800499c <HAL_ADC_IRQHandler+0x554>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d104      	bne.n	8004818 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e00f      	b.n	8004838 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004820:	d004      	beq.n	800482c <HAL_ADC_IRQHandler+0x3e4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5e      	ldr	r2, [pc, #376]	; (80049a0 <HAL_ADC_IRQHandler+0x558>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d102      	bne.n	8004832 <HAL_ADC_IRQHandler+0x3ea>
 800482c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004830:	e000      	b.n	8004834 <HAL_ADC_IRQHandler+0x3ec>
 8004832:	4b5a      	ldr	r3, [pc, #360]	; (800499c <HAL_ADC_IRQHandler+0x554>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d12d      	bne.n	800489e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11a      	bne.n	8004886 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800485e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d112      	bne.n	800489e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
 8004884:	e00b      	b.n	800489e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f043 0201 	orr.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8de 	bl	8004a60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2260      	movs	r2, #96	; 0x60
 80048aa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d113      	bne.n	80048e2 <HAL_ADC_IRQHandler+0x49a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d10c      	bne.n	80048e2 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fa75 	bl	8003dc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f0:	d115      	bne.n	800491e <HAL_ADC_IRQHandler+0x4d6>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d10d      	bne.n	800491e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8ba 	bl	8004a88 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d115      	bne.n	800495a <HAL_ADC_IRQHandler+0x512>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493c:	d10d      	bne.n	800495a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f8a6 	bl	8004a9c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d151      	bne.n	8004a0c <HAL_ADC_IRQHandler+0x5c4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b10      	cmp	r3, #16
 8004974:	d14a      	bne.n	8004a0c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	2b01      	cmp	r3, #1
 800497c:	d102      	bne.n	8004984 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800497e:	2301      	movs	r3, #1
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e02d      	b.n	80049e0 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800498c:	d004      	beq.n	8004998 <HAL_ADC_IRQHandler+0x550>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <HAL_ADC_IRQHandler+0x558>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <HAL_ADC_IRQHandler+0x564>
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <HAL_ADC_IRQHandler+0x55c>)
 800499a:	e008      	b.n	80049ae <HAL_ADC_IRQHandler+0x566>
 800499c:	50000400 	.word	0x50000400
 80049a0:	50000100 	.word	0x50000100
 80049a4:	50000300 	.word	0x50000300
 80049a8:	50000700 	.word	0x50000700
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_ADC_IRQHandler+0x614>)
 80049ae:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10a      	bne.n	80049e0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80049ca:	2301      	movs	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e007      	b.n	80049e0 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80049dc:	2301      	movs	r3, #1
 80049de:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f043 0202 	orr.w	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff f9ea 	bl	8003dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2210      	movs	r2, #16
 8004a0a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d11b      	bne.n	8004a54 <HAL_ADC_IRQHandler+0x60c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d113      	bne.n	8004a54 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	f043 0208 	orr.w	r2, r3, #8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f810 	bl	8004a74 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004a54:	bf00      	nop
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	50000700 	.word	0x50000700

08004a60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b09b      	sub	sp, #108	; 0x6c
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x22>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e2cb      	b.n	800506a <HAL_ADC_ConfigChannel+0x5ba>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 82af 	bne.w	8005048 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d81c      	bhi.n	8004b2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	461a      	mov	r2, r3
 8004b06:	231f      	movs	r3, #31
 8004b08:	4093      	lsls	r3, r2
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	4019      	ands	r1, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
 8004b2a:	e063      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d81e      	bhi.n	8004b72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	3b1e      	subs	r3, #30
 8004b48:	221f      	movs	r2, #31
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4019      	ands	r1, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	3b1e      	subs	r3, #30
 8004b64:	fa00 f203 	lsl.w	r2, r0, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b70:	e040      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b0e      	cmp	r3, #14
 8004b78:	d81e      	bhi.n	8004bb8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	3b3c      	subs	r3, #60	; 0x3c
 8004b8e:	221f      	movs	r2, #31
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	4019      	ands	r1, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	3b3c      	subs	r3, #60	; 0x3c
 8004baa:	fa00 f203 	lsl.w	r2, r0, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004bb6:	e01d      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	3b5a      	subs	r3, #90	; 0x5a
 8004bcc:	221f      	movs	r2, #31
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4019      	ands	r1, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	3b5a      	subs	r3, #90	; 0x5a
 8004be8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 80e5 	bne.w	8004dce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d91c      	bls.n	8004c46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b1e      	subs	r3, #30
 8004c1e:	2207      	movs	r2, #7
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	4019      	ands	r1, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6898      	ldr	r0, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	3b1e      	subs	r3, #30
 8004c38:	fa00 f203 	lsl.w	r2, r0, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
 8004c44:	e019      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6959      	ldr	r1, [r3, #20]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	2207      	movs	r2, #7
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	4019      	ands	r1, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6898      	ldr	r0, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d84f      	bhi.n	8004d3c <HAL_ADC_ConfigChannel+0x28c>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <HAL_ADC_ConfigChannel+0x1f4>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cd7 	.word	0x08004cd7
 8004cac:	08004cf9 	.word	0x08004cf9
 8004cb0:	08004d1b 	.word	0x08004d1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cba:	4b9f      	ldr	r3, [pc, #636]	; (8004f38 <HAL_ADC_ConfigChannel+0x488>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	0691      	lsls	r1, r2, #26
 8004cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cd2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004cd4:	e07e      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004cdc:	4b96      	ldr	r3, [pc, #600]	; (8004f38 <HAL_ADC_ConfigChannel+0x488>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	0691      	lsls	r1, r2, #26
 8004ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cf4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004cf6:	e06d      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004cfe:	4b8e      	ldr	r3, [pc, #568]	; (8004f38 <HAL_ADC_ConfigChannel+0x488>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	0691      	lsls	r1, r2, #26
 8004d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d18:	e05c      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d20:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <HAL_ADC_ConfigChannel+0x488>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	0691      	lsls	r1, r2, #26
 8004d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004d3a:	e04b      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d107      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	069b      	lsls	r3, r3, #26
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d107      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	069b      	lsls	r3, r3, #26
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d107      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004da6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	069b      	lsls	r3, r3, #26
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d10a      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004dcc:	e001      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004dce:	bf00      	nop
 8004dd0:	e000      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004dd2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d108      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x344>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x344>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x346>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 8131 	bne.w	800505e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d00f      	beq.n	8004e24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004e22:	e049      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d91c      	bls.n	8004e80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6999      	ldr	r1, [r3, #24]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	3b1b      	subs	r3, #27
 8004e58:	2207      	movs	r2, #7
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	4019      	ands	r1, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6898      	ldr	r0, [r3, #8]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	3b1b      	subs	r3, #27
 8004e72:	fa00 f203 	lsl.w	r2, r0, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	619a      	str	r2, [r3, #24]
 8004e7e:	e01b      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6959      	ldr	r1, [r3, #20]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	2207      	movs	r2, #7
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	4019      	ands	r1, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6898      	ldr	r0, [r3, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec0:	d004      	beq.n	8004ecc <HAL_ADC_ConfigChannel+0x41c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_ADC_ConfigChannel+0x48c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x420>
 8004ecc:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <HAL_ADC_ConfigChannel+0x490>)
 8004ece:	e000      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x422>
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <HAL_ADC_ConfigChannel+0x494>)
 8004ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d105      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004eec:	2b11      	cmp	r3, #17
 8004eee:	d105      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	f040 80ac 	bne.w	800505e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 80a5 	bne.w	800505e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f1c:	d102      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x474>
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_ADC_ConfigChannel+0x48c>)
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e023      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x4bc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_ADC_ConfigChannel+0x48c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10c      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x498>
 8004f2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e01a      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x4bc>
 8004f36:	bf00      	nop
 8004f38:	83fff000 	.word	0x83fff000
 8004f3c:	50000100 	.word	0x50000100
 8004f40:	50000300 	.word	0x50000300
 8004f44:	50000700 	.word	0x50000700
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a4a      	ldr	r2, [pc, #296]	; (8005078 <HAL_ADC_ConfigChannel+0x5c8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d102      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x4a8>
 8004f52:	4b4a      	ldr	r3, [pc, #296]	; (800507c <HAL_ADC_ConfigChannel+0x5cc>)
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e009      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x4bc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a47      	ldr	r2, [pc, #284]	; (800507c <HAL_ADC_ConfigChannel+0x5cc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d102      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x4b8>
 8004f62:	4b45      	ldr	r3, [pc, #276]	; (8005078 <HAL_ADC_ConfigChannel+0x5c8>)
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e001      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x4bc>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d108      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x4dc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x4dc>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x4de>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d150      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f92:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x504>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x504>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x506>
 8004fb4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13c      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d11d      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x54e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fca:	d118      	bne.n	8004ffe <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fd8:	4b29      	ldr	r3, [pc, #164]	; (8005080 <HAL_ADC_ConfigChannel+0x5d0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_ADC_ConfigChannel+0x5d4>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0c9a      	lsrs	r2, r3, #18
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fee:	e002      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f9      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ffc:	e02e      	b.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b11      	cmp	r3, #17
 8005004:	d10b      	bne.n	800501e <HAL_ADC_ConfigChannel+0x56e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800500e:	d106      	bne.n	800501e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800501c:	e01e      	b.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b12      	cmp	r3, #18
 8005024:	d11a      	bne.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800502e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005030:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005032:	e013      	b.n	800505c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005046:	e00a      	b.n	800505e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800505a:	e000      	b.n	800505e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800505c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005066:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800506a:	4618      	mov	r0, r3
 800506c:	376c      	adds	r7, #108	; 0x6c
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	50000400 	.word	0x50000400
 800507c:	50000500 	.word	0x50000500
 8005080:	2000005c 	.word	0x2000005c
 8005084:	431bde83 	.word	0x431bde83

08005088 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005088:	b480      	push	{r7}
 800508a:	b099      	sub	sp, #100	; 0x64
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050a0:	d102      	bne.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80050a2:	4b6d      	ldr	r3, [pc, #436]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	e01a      	b.n	80050de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d103      	bne.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80050b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	e011      	b.n	80050de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a67      	ldr	r2, [pc, #412]	; (800525c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d102      	bne.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050c4:	4b66      	ldr	r3, [pc, #408]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	e009      	b.n	80050de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a64      	ldr	r2, [pc, #400]	; (8005260 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d102      	bne.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80050d4:	4b61      	ldr	r3, [pc, #388]	; (800525c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	e001      	b.n	80050de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b0      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e0a9      	b.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 808d 	bne.w	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 8086 	bne.w	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005124:	d004      	beq.n	8005130 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4b      	ldr	r2, [pc, #300]	; (8005258 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005130:	4b4c      	ldr	r3, [pc, #304]	; (8005264 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005132:	e000      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005134:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005136:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d040      	beq.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005152:	035b      	lsls	r3, r3, #13
 8005154:	430b      	orrs	r3, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800515a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d108      	bne.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d15c      	bne.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d107      	bne.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800519e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d14b      	bne.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80051a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80051ac:	f023 030f 	bic.w	r3, r3, #15
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	6811      	ldr	r1, [r2, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	6892      	ldr	r2, [r2, #8]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	431a      	orrs	r2, r3
 80051bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80051c0:	e03c      	b.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80051c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d108      	bne.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d123      	bne.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005210:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	d112      	bne.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800521e:	f023 030f 	bic.w	r3, r3, #15
 8005222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005224:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005226:	e009      	b.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800523a:	e000      	b.n	800523e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800523c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800524a:	4618      	mov	r0, r3
 800524c:	3764      	adds	r7, #100	; 0x64
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	50000100 	.word	0x50000100
 800525c:	50000400 	.word	0x50000400
 8005260:	50000500 	.word	0x50000500
 8005264:	50000300 	.word	0x50000300
 8005268:	50000700 	.word	0x50000700

0800526c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d108      	bne.n	8005298 <ADC_Enable+0x2c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <ADC_Enable+0x2c>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <ADC_Enable+0x2e>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d143      	bne.n	8005326 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <ADC_Enable+0xc4>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f043 0210 	orr.w	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e02f      	b.n	8005328 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80052d8:	f7fe fd44 	bl	8003d64 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052de:	e01b      	b.n	8005318 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052e0:	f7fe fd40 	bl	8003d64 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d914      	bls.n	8005318 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d00d      	beq.n	8005318 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f043 0210 	orr.w	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f043 0201 	orr.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d1dc      	bne.n	80052e0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	8000003f 	.word	0x8000003f

08005334 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d108      	bne.n	8005360 <ADC_Disable+0x2c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <ADC_Disable+0x2c>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <ADC_Disable+0x2e>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d047      	beq.n	80053f6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030d 	and.w	r3, r3, #13
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10f      	bne.n	8005394 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0202 	orr.w	r2, r2, #2
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2203      	movs	r2, #3
 800538a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800538c:	f7fe fcea 	bl	8003d64 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005392:	e029      	b.n	80053e8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f043 0210 	orr.w	r2, r3, #16
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e023      	b.n	80053f8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053b0:	f7fe fcd8 	bl	8003d64 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d914      	bls.n	80053e8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0210 	orr.w	r2, r3, #16
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	f043 0201 	orr.w	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e007      	b.n	80053f8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d0dc      	beq.n	80053b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <__NVIC_SetPriorityGrouping+0x44>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800542c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005432:	4a04      	ldr	r2, [pc, #16]	; (8005444 <__NVIC_SetPriorityGrouping+0x44>)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	60d3      	str	r3, [r2, #12]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <__NVIC_GetPriorityGrouping+0x18>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 0307 	and.w	r3, r3, #7
}
 8005456:	4618      	mov	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800546e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005472:	2b00      	cmp	r3, #0
 8005474:	db0b      	blt.n	800548e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	f003 021f 	and.w	r2, r3, #31
 800547c:	4907      	ldr	r1, [pc, #28]	; (800549c <__NVIC_EnableIRQ+0x38>)
 800547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	2001      	movs	r0, #1
 8005486:	fa00 f202 	lsl.w	r2, r0, r2
 800548a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000e100 	.word	0xe000e100

080054a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	6039      	str	r1, [r7, #0]
 80054aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db0a      	blt.n	80054ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	490c      	ldr	r1, [pc, #48]	; (80054ec <__NVIC_SetPriority+0x4c>)
 80054ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054be:	0112      	lsls	r2, r2, #4
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054c8:	e00a      	b.n	80054e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	4908      	ldr	r1, [pc, #32]	; (80054f0 <__NVIC_SetPriority+0x50>)
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	3b04      	subs	r3, #4
 80054d8:	0112      	lsls	r2, r2, #4
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	440b      	add	r3, r1
 80054de:	761a      	strb	r2, [r3, #24]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000e100 	.word	0xe000e100
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f1c3 0307 	rsb	r3, r3, #7
 800550e:	2b04      	cmp	r3, #4
 8005510:	bf28      	it	cs
 8005512:	2304      	movcs	r3, #4
 8005514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3304      	adds	r3, #4
 800551a:	2b06      	cmp	r3, #6
 800551c:	d902      	bls.n	8005524 <NVIC_EncodePriority+0x30>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3b03      	subs	r3, #3
 8005522:	e000      	b.n	8005526 <NVIC_EncodePriority+0x32>
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	401a      	ands	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800553c:	f04f 31ff 	mov.w	r1, #4294967295
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	43d9      	mvns	r1, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800554c:	4313      	orrs	r3, r2
         );
}
 800554e:	4618      	mov	r0, r3
 8005550:	3724      	adds	r7, #36	; 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3b01      	subs	r3, #1
 8005568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800556c:	d301      	bcc.n	8005572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800556e:	2301      	movs	r3, #1
 8005570:	e00f      	b.n	8005592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <SysTick_Config+0x40>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800557a:	210f      	movs	r1, #15
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	f7ff ff8e 	bl	80054a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <SysTick_Config+0x40>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <SysTick_Config+0x40>)
 800558c:	2207      	movs	r2, #7
 800558e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	e000e010 	.word	0xe000e010

080055a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff29 	bl	8005400 <__NVIC_SetPriorityGrouping>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4603      	mov	r3, r0
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055c8:	f7ff ff3e 	bl	8005448 <__NVIC_GetPriorityGrouping>
 80055cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7ff ff8e 	bl	80054f4 <NVIC_EncodePriority>
 80055d8:	4602      	mov	r2, r0
 80055da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff5d 	bl	80054a0 <__NVIC_SetPriority>
}
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	4603      	mov	r3, r0
 80055f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff ff31 	bl	8005464 <__NVIC_EnableIRQ>
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff ffa2 	bl	800555c <SysTick_Config>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005632:	e154      	b.n	80058de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2101      	movs	r1, #1
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	4013      	ands	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8146 	beq.w	80058d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d005      	beq.n	8005664 <HAL_GPIO_Init+0x40>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d130      	bne.n	80056c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800569a:	2201      	movs	r2, #1
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0201 	and.w	r2, r3, #1
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d017      	beq.n	8005702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	2203      	movs	r2, #3
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d123      	bne.n	8005756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	08da      	lsrs	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3208      	adds	r2, #8
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	220f      	movs	r2, #15
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4013      	ands	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	08da      	lsrs	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3208      	adds	r2, #8
 8005750:	6939      	ldr	r1, [r7, #16]
 8005752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2203      	movs	r2, #3
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0203 	and.w	r2, r3, #3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a0 	beq.w	80058d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_GPIO_Init+0x2d8>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_GPIO_Init+0x2d8>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6193      	str	r3, [r2, #24]
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_GPIO_Init+0x2d8>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057b0:	4a53      	ldr	r2, [pc, #332]	; (8005900 <HAL_GPIO_Init+0x2dc>)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	3302      	adds	r3, #2
 80057b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	220f      	movs	r2, #15
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057da:	d019      	beq.n	8005810 <HAL_GPIO_Init+0x1ec>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a49      	ldr	r2, [pc, #292]	; (8005904 <HAL_GPIO_Init+0x2e0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <HAL_GPIO_Init+0x1e8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a48      	ldr	r2, [pc, #288]	; (8005908 <HAL_GPIO_Init+0x2e4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00d      	beq.n	8005808 <HAL_GPIO_Init+0x1e4>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a47      	ldr	r2, [pc, #284]	; (800590c <HAL_GPIO_Init+0x2e8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <HAL_GPIO_Init+0x1e0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a46      	ldr	r2, [pc, #280]	; (8005910 <HAL_GPIO_Init+0x2ec>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_GPIO_Init+0x1dc>
 80057fc:	2304      	movs	r3, #4
 80057fe:	e008      	b.n	8005812 <HAL_GPIO_Init+0x1ee>
 8005800:	2305      	movs	r3, #5
 8005802:	e006      	b.n	8005812 <HAL_GPIO_Init+0x1ee>
 8005804:	2303      	movs	r3, #3
 8005806:	e004      	b.n	8005812 <HAL_GPIO_Init+0x1ee>
 8005808:	2302      	movs	r3, #2
 800580a:	e002      	b.n	8005812 <HAL_GPIO_Init+0x1ee>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <HAL_GPIO_Init+0x1ee>
 8005810:	2300      	movs	r3, #0
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	f002 0203 	and.w	r2, r2, #3
 8005818:	0092      	lsls	r2, r2, #2
 800581a:	4093      	lsls	r3, r2
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005822:	4937      	ldr	r1, [pc, #220]	; (8005900 <HAL_GPIO_Init+0x2dc>)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	089b      	lsrs	r3, r3, #2
 8005828:	3302      	adds	r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005830:	4b38      	ldr	r3, [pc, #224]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	43db      	mvns	r3, r3
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4013      	ands	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	43db      	mvns	r3, r3
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4013      	ands	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800587e:	4a25      	ldr	r2, [pc, #148]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	43db      	mvns	r3, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058a8:	4a1a      	ldr	r2, [pc, #104]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058ae:	4b19      	ldr	r3, [pc, #100]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80058d2:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_GPIO_Init+0x2f0>)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	3301      	adds	r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f aea3 	bne.w	8005634 <HAL_GPIO_Init+0x10>
  }
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40021000 	.word	0x40021000
 8005900:	40010000 	.word	0x40010000
 8005904:	48000400 	.word	0x48000400
 8005908:	48000800 	.word	0x48000800
 800590c:	48000c00 	.word	0x48000c00
 8005910:	48001000 	.word	0x48001000
 8005914:	40010400 	.word	0x40010400

08005918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	887b      	ldrh	r3, [r7, #2]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e001      	b.n	800593a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
 8005954:	4613      	mov	r3, r2
 8005956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005958:	787b      	ldrb	r3, [r7, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800595e:	887a      	ldrh	r2, [r7, #2]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005964:	e002      	b.n	800596c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800598a:	887a      	ldrh	r2, [r7, #2]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4013      	ands	r3, r2
 8005990:	041a      	lsls	r2, r3, #16
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	43d9      	mvns	r1, r3
 8005996:	887b      	ldrh	r3, [r7, #2]
 8005998:	400b      	ands	r3, r1
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059b6:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d006      	beq.n	80059d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059c2:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fc f9c4 	bl	8001d58 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40010400 	.word	0x40010400

080059dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e081      	b.n	8005af2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fd fe6a 	bl	80036dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	e006      	b.n	8005a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d104      	bne.n	8005a76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d138      	bne.n	8005b82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e032      	b.n	8005b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	; 0x24
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d139      	bne.n	8005c1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e033      	b.n	8005c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005be2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e000      	b.n	8005c1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
  }
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2a:	b08b      	sub	sp, #44	; 0x2c
 8005c2c:	af06      	add	r7, sp, #24
 8005c2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0d0      	b.n	8005ddc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fd fe7a 	bl	8003948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2203      	movs	r2, #3
 8005c58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f002 fefd 	bl	8008a60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e04c      	b.n	8005d06 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	440b      	add	r3, r1
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	b298      	uxth	r0, r3
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3336      	adds	r3, #54	; 0x36
 8005caa:	4602      	mov	r2, r0
 8005cac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3303      	adds	r3, #3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cc4:	7bfa      	ldrb	r2, [r7, #15]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3338      	adds	r3, #56	; 0x38
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	333c      	adds	r3, #60	; 0x3c
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3340      	adds	r3, #64	; 0x40
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	3301      	adds	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3ad      	bcc.n	8005c6c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
 8005d14:	e044      	b.n	8005da0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d16:	7bfa      	ldrb	r2, [r7, #15]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	440b      	add	r3, r1
 8005d24:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	440b      	add	r3, r1
 8005d3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d3e:	7bfa      	ldrb	r2, [r7, #15]
 8005d40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d42:	7bfa      	ldrb	r2, [r7, #15]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	440b      	add	r3, r1
 8005d50:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d58:	7bfa      	ldrb	r2, [r7, #15]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	440b      	add	r3, r1
 8005d66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	440b      	add	r3, r1
 8005d92:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b5      	bcc.n	8005d16 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	687e      	ldr	r6, [r7, #4]
 8005db2:	466d      	mov	r5, sp
 8005db4:	f106 0410 	add.w	r4, r6, #16
 8005db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	1d33      	adds	r3, r6, #4
 8005dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f002 fe66 	bl	8008a96 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f000 bef4 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 816a 	beq.w	80060e2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e0e:	4bb3      	ldr	r3, [pc, #716]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d00c      	beq.n	8005e34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e1a:	4bb0      	ldr	r3, [pc, #704]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d159      	bne.n	8005eda <HAL_RCC_OscConfig+0xf6>
 8005e26:	4bad      	ldr	r3, [pc, #692]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e32:	d152      	bne.n	8005eda <HAL_RCC_OscConfig+0xf6>
 8005e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	fab3 f383 	clz	r3, r3
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_OscConfig+0x82>
 8005e60:	4b9e      	ldr	r3, [pc, #632]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0xae>
 8005e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005e72:	fa93 f3a3 	rbit	r3, r3
 8005e76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005e82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005e86:	fa93 f3a3 	rbit	r3, r3
 8005e8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005e8e:	4b93      	ldr	r3, [pc, #588]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005e9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005e9e:	fa92 f2a2 	rbit	r2, r2
 8005ea2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005ea6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005eaa:	fab2 f282 	clz	r2, r2
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	f042 0220 	orr.w	r2, r2, #32
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	f002 021f 	and.w	r2, r2, #31
 8005eba:	2101      	movs	r1, #1
 8005ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 810c 	beq.w	80060e0 <HAL_RCC_OscConfig+0x2fc>
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 8106 	bne.w	80060e0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f000 be86 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x110>
 8005ee6:	4b7d      	ldr	r3, [pc, #500]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7c      	ldr	r2, [pc, #496]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e030      	b.n	8005f56 <HAL_RCC_OscConfig+0x172>
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x134>
 8005efe:	4b77      	ldr	r3, [pc, #476]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a76      	ldr	r2, [pc, #472]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4b74      	ldr	r3, [pc, #464]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a73      	ldr	r2, [pc, #460]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e01e      	b.n	8005f56 <HAL_RCC_OscConfig+0x172>
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x15a>
 8005f24:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a6c      	ldr	r2, [pc, #432]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b6a      	ldr	r3, [pc, #424]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a69      	ldr	r2, [pc, #420]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e00b      	b.n	8005f56 <HAL_RCC_OscConfig+0x172>
 8005f3e:	4b67      	ldr	r3, [pc, #412]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a66      	ldr	r2, [pc, #408]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b64      	ldr	r3, [pc, #400]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a63      	ldr	r2, [pc, #396]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f56:	4b61      	ldr	r3, [pc, #388]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	f023 020f 	bic.w	r2, r3, #15
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	495d      	ldr	r1, [pc, #372]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d059      	beq.n	8006028 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fd fef6 	bl	8003d64 <HAL_GetTick>
 8005f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f7e:	f7fd fef1 	bl	8003d64 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b64      	cmp	r3, #100	; 0x64
 8005f8c:	d902      	bls.n	8005f94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	f000 be29 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
 8005f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005fa0:	fa93 f3a3 	rbit	r3, r3
 8005fa4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005fa8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fac:	fab3 f383 	clz	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x1e2>
 8005fc0:	4b46      	ldr	r3, [pc, #280]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	e015      	b.n	8005ff2 <HAL_RCC_OscConfig+0x20e>
 8005fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005fe2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005fe6:	fa93 f3a3 	rbit	r3, r3
 8005fea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005fee:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ff6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005ffa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005ffe:	fa92 f2a2 	rbit	r2, r2
 8006002:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006006:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800600a:	fab2 f282 	clz	r2, r2
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	f002 021f 	and.w	r2, r2, #31
 800601a:	2101      	movs	r1, #1
 800601c:	fa01 f202 	lsl.w	r2, r1, r2
 8006020:	4013      	ands	r3, r2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ab      	beq.n	8005f7e <HAL_RCC_OscConfig+0x19a>
 8006026:	e05c      	b.n	80060e2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fd fe9c 	bl	8003d64 <HAL_GetTick>
 800602c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006030:	e00a      	b.n	8006048 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006032:	f7fd fe97 	bl	8003d64 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d902      	bls.n	8006048 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	f000 bdcf 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
 8006048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800604c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006054:	fa93 f3a3 	rbit	r3, r3
 8006058:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800605c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006060:	fab3 f383 	clz	r3, r3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_RCC_OscConfig+0x296>
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	e015      	b.n	80060a6 <HAL_RCC_OscConfig+0x2c2>
 800607a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800607e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006086:	fa93 f3a3 	rbit	r3, r3
 800608a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800608e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006092:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006096:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <HAL_RCC_OscConfig+0x2f8>)
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80060ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80060b2:	fa92 f2a2 	rbit	r2, r2
 80060b6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80060ba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80060be:	fab2 f282 	clz	r2, r2
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	f042 0220 	orr.w	r2, r2, #32
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	f002 021f 	and.w	r2, r2, #31
 80060ce:	2101      	movs	r1, #1
 80060d0:	fa01 f202 	lsl.w	r2, r1, r2
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ab      	bne.n	8006032 <HAL_RCC_OscConfig+0x24e>
 80060da:	e002      	b.n	80060e2 <HAL_RCC_OscConfig+0x2fe>
 80060dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 816f 	beq.w	80063d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80060f2:	4bd0      	ldr	r3, [pc, #832]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80060fe:	4bcd      	ldr	r3, [pc, #820]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b08      	cmp	r3, #8
 8006108:	d16c      	bne.n	80061e4 <HAL_RCC_OscConfig+0x400>
 800610a:	4bca      	ldr	r3, [pc, #808]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d166      	bne.n	80061e4 <HAL_RCC_OscConfig+0x400>
 8006116:	2302      	movs	r3, #2
 8006118:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006120:	fa93 f3a3 	rbit	r3, r3
 8006124:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006128:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800612c:	fab3 f383 	clz	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d102      	bne.n	8006146 <HAL_RCC_OscConfig+0x362>
 8006140:	4bbc      	ldr	r3, [pc, #752]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	e013      	b.n	800616e <HAL_RCC_OscConfig+0x38a>
 8006146:	2302      	movs	r3, #2
 8006148:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006158:	2302      	movs	r3, #2
 800615a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800615e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006162:	fa93 f3a3 	rbit	r3, r3
 8006166:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800616a:	4bb2      	ldr	r3, [pc, #712]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2202      	movs	r2, #2
 8006170:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006174:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006178:	fa92 f2a2 	rbit	r2, r2
 800617c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006180:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006184:	fab2 f282 	clz	r2, r2
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	f042 0220 	orr.w	r2, r2, #32
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	f002 021f 	and.w	r2, r2, #31
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f202 	lsl.w	r2, r1, r2
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_RCC_OscConfig+0x3cc>
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f000 bd1b 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b0:	4ba0      	ldr	r3, [pc, #640]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	21f8      	movs	r1, #248	; 0xf8
 80061c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80061c8:	fa91 f1a1 	rbit	r1, r1
 80061cc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80061d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80061d4:	fab1 f181 	clz	r1, r1
 80061d8:	b2c9      	uxtb	r1, r1
 80061da:	408b      	lsls	r3, r1
 80061dc:	4995      	ldr	r1, [pc, #596]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e2:	e0f5      	b.n	80063d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8085 	beq.w	80062fa <HAL_RCC_OscConfig+0x516>
 80061f0:	2301      	movs	r3, #1
 80061f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006206:	fab3 f383 	clz	r3, r3
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	461a      	mov	r2, r3
 8006218:	2301      	movs	r3, #1
 800621a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fd fda2 	bl	8003d64 <HAL_GetTick>
 8006220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006224:	e00a      	b.n	800623c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006226:	f7fd fd9d 	bl	8003d64 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d902      	bls.n	800623c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	f000 bcd5 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
 800623c:	2302      	movs	r3, #2
 800623e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006246:	fa93 f3a3 	rbit	r3, r3
 800624a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800624e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006252:	fab3 f383 	clz	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d102      	bne.n	800626c <HAL_RCC_OscConfig+0x488>
 8006266:	4b73      	ldr	r3, [pc, #460]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	e013      	b.n	8006294 <HAL_RCC_OscConfig+0x4b0>
 800626c:	2302      	movs	r3, #2
 800626e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800627e:	2302      	movs	r3, #2
 8006280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006290:	4b68      	ldr	r3, [pc, #416]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2202      	movs	r2, #2
 8006296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800629a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800629e:	fa92 f2a2 	rbit	r2, r2
 80062a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80062a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80062aa:	fab2 f282 	clz	r2, r2
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	f042 0220 	orr.w	r2, r2, #32
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	f002 021f 	and.w	r2, r2, #31
 80062ba:	2101      	movs	r1, #1
 80062bc:	fa01 f202 	lsl.w	r2, r1, r2
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0af      	beq.n	8006226 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c6:	4b5b      	ldr	r3, [pc, #364]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	21f8      	movs	r1, #248	; 0xf8
 80062d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80062de:	fa91 f1a1 	rbit	r1, r1
 80062e2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80062e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80062ea:	fab1 f181 	clz	r1, r1
 80062ee:	b2c9      	uxtb	r1, r1
 80062f0:	408b      	lsls	r3, r1
 80062f2:	4950      	ldr	r1, [pc, #320]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
 80062f8:	e06a      	b.n	80063d0 <HAL_RCC_OscConfig+0x5ec>
 80062fa:	2301      	movs	r3, #1
 80062fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006304:	fa93 f3a3 	rbit	r3, r3
 8006308:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800630c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800631a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006326:	f7fd fd1d 	bl	8003d64 <HAL_GetTick>
 800632a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632e:	e00a      	b.n	8006346 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006330:	f7fd fd18 	bl	8003d64 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d902      	bls.n	8006346 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	f000 bc50 	b.w	8006be6 <HAL_RCC_OscConfig+0xe02>
 8006346:	2302      	movs	r3, #2
 8006348:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006350:	fa93 f3a3 	rbit	r3, r3
 8006354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635c:	fab3 f383 	clz	r3, r3
 8006360:	b2db      	uxtb	r3, r3
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <HAL_RCC_OscConfig+0x592>
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	e013      	b.n	800639e <HAL_RCC_OscConfig+0x5ba>
 8006376:	2302      	movs	r3, #2
 8006378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006380:	fa93 f3a3 	rbit	r3, r3
 8006384:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006388:	2302      	movs	r3, #2
 800638a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800638e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006392:	fa93 f3a3 	rbit	r3, r3
 8006396:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800639a:	4b26      	ldr	r3, [pc, #152]	; (8006434 <HAL_RCC_OscConfig+0x650>)
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2202      	movs	r2, #2
 80063a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80063a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80063a8:	fa92 f2a2 	rbit	r2, r2
 80063ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80063b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80063b4:	fab2 f282 	clz	r2, r2
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	f042 0220 	orr.w	r2, r2, #32
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	f002 021f 	and.w	r2, r2, #31
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1af      	bne.n	8006330 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80da 	beq.w	8006594 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d069      	beq.n	80064be <HAL_RCC_OscConfig+0x6da>
 80063ea:	2301      	movs	r3, #1
 80063ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063f4:	fa93 f3a3 	rbit	r3, r3
 80063f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80063fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006400:	fab3 f383 	clz	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_OscConfig+0x654>)
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	461a      	mov	r2, r3
 8006410:	2301      	movs	r3, #1
 8006412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006414:	f7fd fca6 	bl	8003d64 <HAL_GetTick>
 8006418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641c:	e00e      	b.n	800643c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800641e:	f7fd fca1 	bl	8003d64 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d906      	bls.n	800643c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e3d9      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	10908120 	.word	0x10908120
 800643c:	2302      	movs	r3, #2
 800643e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006446:	fa93 f3a3 	rbit	r3, r3
 800644a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800644e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006452:	2202      	movs	r2, #2
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	fa93 f2a3 	rbit	r2, r3
 8006460:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800646a:	2202      	movs	r2, #2
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	fa93 f2a3 	rbit	r2, r3
 8006478:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800647c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	4ba5      	ldr	r3, [pc, #660]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006482:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006486:	2102      	movs	r1, #2
 8006488:	6019      	str	r1, [r3, #0]
 800648a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	fa93 f1a3 	rbit	r1, r3
 8006494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006498:	6019      	str	r1, [r3, #0]
  return result;
 800649a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	fab3 f383 	clz	r3, r3
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0b0      	beq.n	800641e <HAL_RCC_OscConfig+0x63a>
 80064bc:	e06a      	b.n	8006594 <HAL_RCC_OscConfig+0x7b0>
 80064be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	fa93 f2a3 	rbit	r2, r3
 80064d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064d4:	601a      	str	r2, [r3, #0]
  return result;
 80064d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064dc:	fab3 f383 	clz	r3, r3
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	4b8c      	ldr	r3, [pc, #560]	; (8006718 <HAL_RCC_OscConfig+0x934>)
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	461a      	mov	r2, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f0:	f7fd fc38 	bl	8003d64 <HAL_GetTick>
 80064f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	e009      	b.n	800650e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fa:	f7fd fc33 	bl	8003d64 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e36b      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 800650e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006512:	2202      	movs	r2, #2
 8006514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006516:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	fa93 f2a3 	rbit	r2, r3
 8006520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800652a:	2202      	movs	r2, #2
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	fa93 f2a3 	rbit	r2, r3
 8006538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006542:	2202      	movs	r2, #2
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	fa93 f2a3 	rbit	r2, r3
 8006550:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006554:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006556:	4b6f      	ldr	r3, [pc, #444]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800655e:	2102      	movs	r1, #2
 8006560:	6019      	str	r1, [r3, #0]
 8006562:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	fa93 f1a3 	rbit	r1, r3
 800656c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006570:	6019      	str	r1, [r3, #0]
  return result;
 8006572:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	fab3 f383 	clz	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1b2      	bne.n	80064fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8158 	beq.w	8006854 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065aa:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d112      	bne.n	80065dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	4b57      	ldr	r3, [pc, #348]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	4a56      	ldr	r2, [pc, #344]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c0:	61d3      	str	r3, [r2, #28]
 80065c2:	4b54      	ldr	r3, [pc, #336]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80065ca:	f107 0308 	add.w	r3, r7, #8
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f107 0308 	add.w	r3, r7, #8
 80065d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065dc:	4b4f      	ldr	r3, [pc, #316]	; (800671c <HAL_RCC_OscConfig+0x938>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11a      	bne.n	800661e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e8:	4b4c      	ldr	r3, [pc, #304]	; (800671c <HAL_RCC_OscConfig+0x938>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a4b      	ldr	r2, [pc, #300]	; (800671c <HAL_RCC_OscConfig+0x938>)
 80065ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f4:	f7fd fbb6 	bl	8003d64 <HAL_GetTick>
 80065f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	e009      	b.n	8006612 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fe:	f7fd fbb1 	bl	8003d64 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e2e9      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006612:	4b42      	ldr	r3, [pc, #264]	; (800671c <HAL_RCC_OscConfig+0x938>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ef      	beq.n	80065fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d106      	bne.n	8006636 <HAL_RCC_OscConfig+0x852>
 8006628:	4b3a      	ldr	r3, [pc, #232]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	4a39      	ldr	r2, [pc, #228]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6213      	str	r3, [r2, #32]
 8006634:	e02f      	b.n	8006696 <HAL_RCC_OscConfig+0x8b2>
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10c      	bne.n	800665a <HAL_RCC_OscConfig+0x876>
 8006640:	4b34      	ldr	r3, [pc, #208]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	4a33      	ldr	r2, [pc, #204]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6213      	str	r3, [r2, #32]
 800664c:	4b31      	ldr	r3, [pc, #196]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	6213      	str	r3, [r2, #32]
 8006658:	e01d      	b.n	8006696 <HAL_RCC_OscConfig+0x8b2>
 800665a:	1d3b      	adds	r3, r7, #4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b05      	cmp	r3, #5
 8006662:	d10c      	bne.n	800667e <HAL_RCC_OscConfig+0x89a>
 8006664:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4a2a      	ldr	r2, [pc, #168]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800666a:	f043 0304 	orr.w	r3, r3, #4
 800666e:	6213      	str	r3, [r2, #32]
 8006670:	4b28      	ldr	r3, [pc, #160]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6213      	str	r3, [r2, #32]
 800667c:	e00b      	b.n	8006696 <HAL_RCC_OscConfig+0x8b2>
 800667e:	4b25      	ldr	r3, [pc, #148]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4a24      	ldr	r2, [pc, #144]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	6213      	str	r3, [r2, #32]
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d06b      	beq.n	8006778 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a0:	f7fd fb60 	bl	8003d64 <HAL_GetTick>
 80066a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	e00b      	b.n	80066c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fd fb5b 	bl	8003d64 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e291      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 80066c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066c6:	2202      	movs	r2, #2
 80066c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	fa93 f2a3 	rbit	r2, r3
 80066d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80066de:	2202      	movs	r2, #2
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	fa93 f2a3 	rbit	r2, r3
 80066ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80066f0:	601a      	str	r2, [r3, #0]
  return result;
 80066f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80066f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	fab3 f383 	clz	r3, r3
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f043 0302 	orr.w	r3, r3, #2
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d109      	bne.n	8006720 <HAL_RCC_OscConfig+0x93c>
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <HAL_RCC_OscConfig+0x930>)
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	e014      	b.n	800673c <HAL_RCC_OscConfig+0x958>
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	10908120 	.word	0x10908120
 800671c:	40007000 	.word	0x40007000
 8006720:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006724:	2202      	movs	r2, #2
 8006726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	fa93 f2a3 	rbit	r2, r3
 8006732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	4bbb      	ldr	r3, [pc, #748]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006740:	2102      	movs	r1, #2
 8006742:	6011      	str	r1, [r2, #0]
 8006744:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	fa92 f1a2 	rbit	r1, r2
 800674e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006752:	6011      	str	r1, [r2, #0]
  return result;
 8006754:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	fab2 f282 	clz	r2, r2
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	f002 021f 	and.w	r2, r2, #31
 800676a:	2101      	movs	r1, #1
 800676c:	fa01 f202 	lsl.w	r2, r1, r2
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d099      	beq.n	80066aa <HAL_RCC_OscConfig+0x8c6>
 8006776:	e063      	b.n	8006840 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006778:	f7fd faf4 	bl	8003d64 <HAL_GetTick>
 800677c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006780:	e00b      	b.n	800679a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006782:	f7fd faef 	bl	8003d64 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e225      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 800679a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800679e:	2202      	movs	r2, #2
 80067a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	fa93 f2a3 	rbit	r2, r3
 80067ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067b6:	2202      	movs	r2, #2
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	fa93 f2a3 	rbit	r2, r3
 80067c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80067c8:	601a      	str	r2, [r3, #0]
  return result;
 80067ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80067ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d0:	fab3 f383 	clz	r3, r3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d102      	bne.n	80067ea <HAL_RCC_OscConfig+0xa06>
 80067e4:	4b90      	ldr	r3, [pc, #576]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	e00d      	b.n	8006806 <HAL_RCC_OscConfig+0xa22>
 80067ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80067ee:	2202      	movs	r2, #2
 80067f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	fa93 f2a3 	rbit	r2, r3
 80067fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	4b89      	ldr	r3, [pc, #548]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800680a:	2102      	movs	r1, #2
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	fa92 f1a2 	rbit	r1, r2
 8006818:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800681c:	6011      	str	r1, [r2, #0]
  return result;
 800681e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	fab2 f282 	clz	r2, r2
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	f002 021f 	and.w	r2, r2, #31
 8006834:	2101      	movs	r1, #1
 8006836:	fa01 f202 	lsl.w	r2, r1, r2
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1a0      	bne.n	8006782 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006840:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006844:	2b01      	cmp	r3, #1
 8006846:	d105      	bne.n	8006854 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006848:	4b77      	ldr	r3, [pc, #476]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	4a76      	ldr	r2, [pc, #472]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 800684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006852:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 81c2 	beq.w	8006be4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006860:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 030c 	and.w	r3, r3, #12
 8006868:	2b08      	cmp	r3, #8
 800686a:	f000 819c 	beq.w	8006ba6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b02      	cmp	r3, #2
 8006876:	f040 8114 	bne.w	8006aa2 <HAL_RCC_OscConfig+0xcbe>
 800687a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800687e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	fa93 f2a3 	rbit	r2, r3
 800688e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006892:	601a      	str	r2, [r3, #0]
  return result;
 8006894:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006898:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689a:	fab3 f383 	clz	r3, r3
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80068a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	461a      	mov	r2, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b0:	f7fd fa58 	bl	8003d64 <HAL_GetTick>
 80068b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b8:	e009      	b.n	80068ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ba:	f7fd fa53 	bl	8003d64 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e18b      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 80068ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	fa93 f2a3 	rbit	r2, r3
 80068e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80068e6:	601a      	str	r2, [r3, #0]
  return result;
 80068e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80068ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d102      	bne.n	8006908 <HAL_RCC_OscConfig+0xb24>
 8006902:	4b49      	ldr	r3, [pc, #292]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	e01b      	b.n	8006940 <HAL_RCC_OscConfig+0xb5c>
 8006908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800690c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	fa93 f2a3 	rbit	r2, r3
 800691c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	fa93 f2a3 	rbit	r2, r3
 8006936:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	4b3a      	ldr	r3, [pc, #232]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006944:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006948:	6011      	str	r1, [r2, #0]
 800694a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	fa92 f1a2 	rbit	r1, r2
 8006954:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006958:	6011      	str	r1, [r2, #0]
  return result;
 800695a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	fab2 f282 	clz	r2, r2
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	f042 0220 	orr.w	r2, r2, #32
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	f002 021f 	and.w	r2, r2, #31
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f202 	lsl.w	r2, r1, r2
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d19e      	bne.n	80068ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697c:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	430b      	orrs	r3, r1
 8006992:	4925      	ldr	r1, [pc, #148]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]
 8006998:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800699c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	fa93 f2a3 	rbit	r2, r3
 80069ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069b0:	601a      	str	r2, [r3, #0]
  return result;
 80069b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b8:	fab3 f383 	clz	r3, r3
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	461a      	mov	r2, r3
 80069ca:	2301      	movs	r3, #1
 80069cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ce:	f7fd f9c9 	bl	8003d64 <HAL_GetTick>
 80069d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069d6:	e009      	b.n	80069ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fd f9c4 	bl	8003d64 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e0fc      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 80069ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	fa93 f2a3 	rbit	r2, r3
 8006a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a04:	601a      	str	r2, [r3, #0]
  return result;
 8006a06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a0c:	fab3 f383 	clz	r3, r3
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d105      	bne.n	8006a2c <HAL_RCC_OscConfig+0xc48>
 8006a20:	4b01      	ldr	r3, [pc, #4]	; (8006a28 <HAL_RCC_OscConfig+0xc44>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	e01e      	b.n	8006a64 <HAL_RCC_OscConfig+0xc80>
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	fa93 f2a3 	rbit	r2, r3
 8006a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	fa93 f2a3 	rbit	r2, r3
 8006a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_OscConfig+0xe0c>)
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	fa92 f1a2 	rbit	r1, r2
 8006a78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006a7c:	6011      	str	r1, [r2, #0]
  return result;
 8006a7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	fab2 f282 	clz	r2, r2
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	f042 0220 	orr.w	r2, r2, #32
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	f002 021f 	and.w	r2, r2, #31
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f202 	lsl.w	r2, r1, r2
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d09b      	beq.n	80069d8 <HAL_RCC_OscConfig+0xbf4>
 8006aa0:	e0a0      	b.n	8006be4 <HAL_RCC_OscConfig+0xe00>
 8006aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	fa93 f2a3 	rbit	r2, r3
 8006ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aba:	601a      	str	r2, [r3, #0]
  return result;
 8006abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ac0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac2:	fab3 f383 	clz	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad8:	f7fd f944 	bl	8003d64 <HAL_GetTick>
 8006adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ae0:	e009      	b.n	8006af6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae2:	f7fd f93f 	bl	8003d64 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e077      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
 8006af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	fa93 f2a3 	rbit	r2, r3
 8006b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b0e:	601a      	str	r2, [r3, #0]
  return result;
 8006b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b16:	fab3 f383 	clz	r3, r3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d102      	bne.n	8006b30 <HAL_RCC_OscConfig+0xd4c>
 8006b2a:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <HAL_RCC_OscConfig+0xe0c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	e01b      	b.n	8006b68 <HAL_RCC_OscConfig+0xd84>
 8006b30:	f107 0320 	add.w	r3, r7, #32
 8006b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3a:	f107 0320 	add.w	r3, r7, #32
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	fa93 f2a3 	rbit	r2, r3
 8006b44:	f107 031c 	add.w	r3, r7, #28
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f107 0318 	add.w	r3, r7, #24
 8006b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f107 0318 	add.w	r3, r7, #24
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	fa93 f2a3 	rbit	r2, r3
 8006b5e:	f107 0314 	add.w	r3, r7, #20
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_OscConfig+0xe0c>)
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	f107 0210 	add.w	r2, r7, #16
 8006b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b70:	6011      	str	r1, [r2, #0]
 8006b72:	f107 0210 	add.w	r2, r7, #16
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	fa92 f1a2 	rbit	r1, r2
 8006b7c:	f107 020c 	add.w	r2, r7, #12
 8006b80:	6011      	str	r1, [r2, #0]
  return result;
 8006b82:	f107 020c 	add.w	r2, r7, #12
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	fab2 f282 	clz	r2, r2
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	f042 0220 	orr.w	r2, r2, #32
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	f002 021f 	and.w	r2, r2, #31
 8006b98:	2101      	movs	r1, #1
 8006b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d19e      	bne.n	8006ae2 <HAL_RCC_OscConfig+0xcfe>
 8006ba4:	e01e      	b.n	8006be4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e018      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006bb4:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <HAL_RCC_OscConfig+0xe0c>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006bbc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d108      	bne.n	8006be0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006bce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40021000 	.word	0x40021000

08006bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b09e      	sub	sp, #120	; 0x78
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e162      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b90      	ldr	r3, [pc, #576]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d910      	bls.n	8006c3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b8d      	ldr	r3, [pc, #564]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f023 0207 	bic.w	r2, r3, #7
 8006c22:	498b      	ldr	r1, [pc, #556]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2a:	4b89      	ldr	r3, [pc, #548]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d001      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e14a      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b82      	ldr	r3, [pc, #520]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	497f      	ldr	r1, [pc, #508]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80dc 	beq.w	8006e20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d13c      	bne.n	8006cea <HAL_RCC_ClockConfig+0xf6>
 8006c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c78:	fa93 f3a3 	rbit	r3, r3
 8006c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c80:	fab3 f383 	clz	r3, r3
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d102      	bne.n	8006c9a <HAL_RCC_ClockConfig+0xa6>
 8006c94:	4b6f      	ldr	r3, [pc, #444]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	e00f      	b.n	8006cba <HAL_RCC_ClockConfig+0xc6>
 8006c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ca2:	fa93 f3a3 	rbit	r3, r3
 8006ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cac:	663b      	str	r3, [r7, #96]	; 0x60
 8006cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cb0:	fa93 f3a3 	rbit	r3, r3
 8006cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb6:	4b67      	ldr	r3, [pc, #412]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cc2:	fa92 f2a2 	rbit	r2, r2
 8006cc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cca:	fab2 f282 	clz	r2, r2
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	f042 0220 	orr.w	r2, r2, #32
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	f002 021f 	and.w	r2, r2, #31
 8006cda:	2101      	movs	r1, #1
 8006cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d17b      	bne.n	8006dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e0f3      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d13c      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x178>
 8006cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfa:	fa93 f3a3 	rbit	r3, r3
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d02:	fab3 f383 	clz	r3, r3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d102      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x128>
 8006d16:	4b4f      	ldr	r3, [pc, #316]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	e00f      	b.n	8006d3c <HAL_RCC_ClockConfig+0x148>
 8006d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d24:	fa93 f3a3 	rbit	r3, r3
 8006d28:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	fa93 f3a3 	rbit	r3, r3
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	4b46      	ldr	r3, [pc, #280]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d40:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d44:	fa92 f2a2 	rbit	r2, r2
 8006d48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d4c:	fab2 f282 	clz	r2, r2
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	f042 0220 	orr.w	r2, r2, #32
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	f002 021f 	and.w	r2, r2, #31
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d13a      	bne.n	8006dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0b2      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	fa93 f3a3 	rbit	r3, r3
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f043 0301 	orr.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d102      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x1a0>
 8006d8e:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	e00d      	b.n	8006db0 <HAL_RCC_ClockConfig+0x1bc>
 8006d94:	2302      	movs	r3, #2
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	fa93 f3a3 	rbit	r3, r3
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006da0:	2302      	movs	r3, #2
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	fa93 f3a3 	rbit	r3, r3
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	2202      	movs	r2, #2
 8006db2:	61ba      	str	r2, [r7, #24]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	fa92 f2a2 	rbit	r2, r2
 8006dba:	617a      	str	r2, [r7, #20]
  return result;
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	fab2 f282 	clz	r2, r2
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	f042 0220 	orr.w	r2, r2, #32
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	f002 021f 	and.w	r2, r2, #31
 8006dce:	2101      	movs	r1, #1
 8006dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e079      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dde:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f023 0203 	bic.w	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	491a      	ldr	r1, [pc, #104]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df0:	f7fc ffb8 	bl	8003d64 <HAL_GetTick>
 8006df4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df8:	f7fc ffb4 	bl	8003d64 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e061      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <HAL_RCC_ClockConfig+0x260>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 020c 	and.w	r2, r3, #12
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d1eb      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d214      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 0207 	bic.w	r2, r3, #7
 8006e36:	4906      	ldr	r1, [pc, #24]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <HAL_RCC_ClockConfig+0x25c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e040      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x2de>
 8006e50:	40022000 	.word	0x40022000
 8006e54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e64:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <HAL_RCC_ClockConfig+0x2e8>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	491a      	ldr	r1, [pc, #104]	; (8006edc <HAL_RCC_ClockConfig+0x2e8>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <HAL_RCC_ClockConfig+0x2e8>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4912      	ldr	r1, [pc, #72]	; (8006edc <HAL_RCC_ClockConfig+0x2e8>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006e96:	f000 f829 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <HAL_RCC_ClockConfig+0x2e8>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea4:	22f0      	movs	r2, #240	; 0xf0
 8006ea6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	fa92 f2a2 	rbit	r2, r2
 8006eae:	60fa      	str	r2, [r7, #12]
  return result;
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	fab2 f282 	clz	r2, r2
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	40d3      	lsrs	r3, r2
 8006eba:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <HAL_RCC_ClockConfig+0x2ec>)
 8006ebc:	5cd3      	ldrb	r3, [r2, r3]
 8006ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <HAL_RCC_ClockConfig+0x2f0>)
 8006ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006ec6:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <HAL_RCC_ClockConfig+0x2f4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fc ff06 	bl	8003cdc <HAL_InitTick>
  
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3778      	adds	r7, #120	; 0x78
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	0800c5d4 	.word	0x0800c5d4
 8006ee4:	2000005c 	.word	0x2000005c
 8006ee8:	20000060 	.word	0x20000060

08006eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b08b      	sub	sp, #44	; 0x2c
 8006ef0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	2300      	movs	r3, #0
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006f06:	4b29      	ldr	r3, [pc, #164]	; (8006fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 030c 	and.w	r3, r3, #12
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d002      	beq.n	8006f1c <HAL_RCC_GetSysClockFreq+0x30>
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d003      	beq.n	8006f22 <HAL_RCC_GetSysClockFreq+0x36>
 8006f1a:	e03c      	b.n	8006f96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f1c:	4b24      	ldr	r3, [pc, #144]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f1e:	623b      	str	r3, [r7, #32]
      break;
 8006f20:	e03c      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006f28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006f2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	fa92 f2a2 	rbit	r2, r2
 8006f34:	607a      	str	r2, [r7, #4]
  return result;
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	fab2 f282 	clz	r2, r2
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	40d3      	lsrs	r3, r2
 8006f40:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f42:	5cd3      	ldrb	r3, [r2, r3]
 8006f44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006f46:	4b19      	ldr	r3, [pc, #100]	; (8006fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	220f      	movs	r2, #15
 8006f50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	fa92 f2a2 	rbit	r2, r2
 8006f58:	60fa      	str	r2, [r7, #12]
  return result;
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	fab2 f282 	clz	r2, r2
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	40d3      	lsrs	r3, r2
 8006f64:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f66:	5cd3      	ldrb	r3, [r2, r3]
 8006f68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f74:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	fb02 f303 	mul.w	r3, r2, r3
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	e004      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4a0c      	ldr	r2, [pc, #48]	; (8006fbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	623b      	str	r3, [r7, #32]
      break;
 8006f94:	e002      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f98:	623b      	str	r3, [r7, #32]
      break;
 8006f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	372c      	adds	r7, #44	; 0x2c
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40021000 	.word	0x40021000
 8006fb0:	007a1200 	.word	0x007a1200
 8006fb4:	0800c5ec 	.word	0x0800c5ec
 8006fb8:	0800c5fc 	.word	0x0800c5fc
 8006fbc:	003d0900 	.word	0x003d0900

08006fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fc4:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	2000005c 	.word	0x2000005c

08006fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006fde:	f7ff ffef 	bl	8006fc0 <HAL_RCC_GetHCLKFreq>
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	fa92 f2a2 	rbit	r2, r2
 8006ff8:	603a      	str	r2, [r7, #0]
  return result;
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	fab2 f282 	clz	r2, r2
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	40d3      	lsrs	r3, r2
 8007004:	4a04      	ldr	r2, [pc, #16]	; (8007018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007006:	5cd3      	ldrb	r3, [r2, r3]
 8007008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40021000 	.word	0x40021000
 8007018:	0800c5e4 	.word	0x0800c5e4

0800701c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b092      	sub	sp, #72	; 0x48
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80d4 	beq.w	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007040:	4b4e      	ldr	r3, [pc, #312]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10e      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800704c:	4b4b      	ldr	r3, [pc, #300]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	4a4a      	ldr	r2, [pc, #296]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007056:	61d3      	str	r3, [r2, #28]
 8007058:	4b48      	ldr	r3, [pc, #288]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706a:	4b45      	ldr	r3, [pc, #276]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d118      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007076:	4b42      	ldr	r3, [pc, #264]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a41      	ldr	r2, [pc, #260]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800707c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007080:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007082:	f7fc fe6f 	bl	8003d64 <HAL_GetTick>
 8007086:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007088:	e008      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708a:	f7fc fe6b 	bl	8003d64 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b64      	cmp	r3, #100	; 0x64
 8007096:	d901      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e169      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709c:	4b38      	ldr	r3, [pc, #224]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070a8:	4b34      	ldr	r3, [pc, #208]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8084 	beq.w	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d07c      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	fa93 f3a3 	rbit	r3, r3
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070e2:	fab3 f383 	clz	r3, r3
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b26      	ldr	r3, [pc, #152]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	461a      	mov	r2, r3
 80070f2:	2301      	movs	r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	fa93 f3a3 	rbit	r3, r3
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007106:	fab3 f383 	clz	r3, r3
 800710a:	b2db      	uxtb	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	461a      	mov	r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04b      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712a:	f7fc fe1b 	bl	8003d64 <HAL_GetTick>
 800712e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fc fe17 	bl	8003d64 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e113      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007148:	2302      	movs	r3, #2
 800714a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	fa93 f3a3 	rbit	r3, r3
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
 8007154:	2302      	movs	r3, #2
 8007156:	623b      	str	r3, [r7, #32]
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	fa93 f3a3 	rbit	r3, r3
 800715e:	61fb      	str	r3, [r7, #28]
  return result;
 8007160:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007162:	fab3 f383 	clz	r3, r3
 8007166:	b2db      	uxtb	r3, r3
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d108      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007176:	4b01      	ldr	r3, [pc, #4]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	e00d      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800717c:	40021000 	.word	0x40021000
 8007180:	40007000 	.word	0x40007000
 8007184:	10908100 	.word	0x10908100
 8007188:	2302      	movs	r3, #2
 800718a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	fa93 f3a3 	rbit	r3, r3
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	4b78      	ldr	r3, [pc, #480]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2202      	movs	r2, #2
 800719a:	613a      	str	r2, [r7, #16]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	fa92 f2a2 	rbit	r2, r2
 80071a2:	60fa      	str	r2, [r7, #12]
  return result;
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	fab2 f282 	clz	r2, r2
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	f002 021f 	and.w	r2, r2, #31
 80071b6:	2101      	movs	r1, #1
 80071b8:	fa01 f202 	lsl.w	r2, r1, r2
 80071bc:	4013      	ands	r3, r2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0b7      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80071c2:	4b6d      	ldr	r3, [pc, #436]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	496a      	ldr	r1, [pc, #424]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d105      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071dc:	4b66      	ldr	r3, [pc, #408]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	4a65      	ldr	r2, [pc, #404]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071f4:	4b60      	ldr	r3, [pc, #384]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	f023 0203 	bic.w	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	495d      	ldr	r1, [pc, #372]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007212:	4b59      	ldr	r3, [pc, #356]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	4956      	ldr	r1, [pc, #344]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007230:	4b51      	ldr	r3, [pc, #324]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	494e      	ldr	r1, [pc, #312]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800724e:	4b4a      	ldr	r3, [pc, #296]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f023 0210 	bic.w	r2, r3, #16
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	4947      	ldr	r1, [pc, #284]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800725c:	4313      	orrs	r3, r2
 800725e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800726c:	4b42      	ldr	r3, [pc, #264]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	493f      	ldr	r1, [pc, #252]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800727a:	4313      	orrs	r3, r2
 800727c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d008      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800728a:	4b3b      	ldr	r3, [pc, #236]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f023 0220 	bic.w	r2, r3, #32
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	4938      	ldr	r1, [pc, #224]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007298:	4313      	orrs	r3, r2
 800729a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072a8:	4b33      	ldr	r3, [pc, #204]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	4930      	ldr	r1, [pc, #192]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072c6:	4b2c      	ldr	r3, [pc, #176]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	4929      	ldr	r1, [pc, #164]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	4921      	ldr	r1, [pc, #132]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007302:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	491a      	ldr	r1, [pc, #104]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007320:	4b15      	ldr	r3, [pc, #84]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	4912      	ldr	r1, [pc, #72]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800732e:	4313      	orrs	r3, r2
 8007330:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800733e:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	490b      	ldr	r1, [pc, #44]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	4903      	ldr	r1, [pc, #12]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3748      	adds	r7, #72	; 0x48
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40021000 	.word	0x40021000

0800737c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e09d      	b.n	80074ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800739e:	d009      	beq.n	80073b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	61da      	str	r2, [r3, #28]
 80073a6:	e005      	b.n	80073b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fc f9c8 	bl	8003764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073f4:	d902      	bls.n	80073fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	e002      	b.n	8007402 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007400:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800740a:	d007      	beq.n	800741c <HAL_SPI_Init+0xa0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007414:	d002      	beq.n	800741c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	ea42 0103 	orr.w	r1, r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	f003 0204 	and.w	r2, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007498:	ea42 0103 	orr.w	r1, r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e049      	b.n	8007578 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fc f975 	bl	80037e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f000 fde1 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e04a      	b.n	800762e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a21      	ldr	r2, [pc, #132]	; (800763c <HAL_TIM_Base_Start_IT+0xbc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d018      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d013      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <HAL_TIM_Base_Start_IT+0xc0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00e      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <HAL_TIM_Base_Start_IT+0xc4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HAL_TIM_Base_Start_IT+0xc8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <HAL_TIM_Base_Start_IT+0xcc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d115      	bne.n	8007618 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <HAL_TIM_Base_Start_IT+0xd0>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b06      	cmp	r3, #6
 80075fc:	d015      	beq.n	800762a <HAL_TIM_Base_Start_IT+0xaa>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007604:	d011      	beq.n	800762a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007616:	e008      	b.n	800762a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	e000      	b.n	800762c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40000400 	.word	0x40000400
 8007644:	40000800 	.word	0x40000800
 8007648:	40013400 	.word	0x40013400
 800764c:	40014000 	.word	0x40014000
 8007650:	00010007 	.word	0x00010007

08007654 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	f241 1311 	movw	r3, #4369	; 0x1111
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10f      	bne.n	800769c <HAL_TIM_Base_Stop_IT+0x48>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a1a      	ldr	r2, [r3, #32]
 8007682:	f240 4344 	movw	r3, #1092	; 0x444
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <HAL_TIM_Base_Stop_IT+0x48>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e049      	b.n	8007758 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fc f8e3 	bl	80038a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f000 fcf1 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d109      	bne.n	8007784 <HAL_TIM_PWM_Start+0x24>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	e03c      	b.n	80077fe <HAL_TIM_PWM_Start+0x9e>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b04      	cmp	r3, #4
 8007788:	d109      	bne.n	800779e <HAL_TIM_PWM_Start+0x3e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b01      	cmp	r3, #1
 8007794:	bf14      	ite	ne
 8007796:	2301      	movne	r3, #1
 8007798:	2300      	moveq	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	e02f      	b.n	80077fe <HAL_TIM_PWM_Start+0x9e>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d109      	bne.n	80077b8 <HAL_TIM_PWM_Start+0x58>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	e022      	b.n	80077fe <HAL_TIM_PWM_Start+0x9e>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b0c      	cmp	r3, #12
 80077bc:	d109      	bne.n	80077d2 <HAL_TIM_PWM_Start+0x72>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	e015      	b.n	80077fe <HAL_TIM_PWM_Start+0x9e>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d109      	bne.n	80077ec <HAL_TIM_PWM_Start+0x8c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e008      	b.n	80077fe <HAL_TIM_PWM_Start+0x9e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	bf14      	ite	ne
 80077f8:	2301      	movne	r3, #1
 80077fa:	2300      	moveq	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e097      	b.n	8007936 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xb6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007814:	e023      	b.n	800785e <HAL_TIM_PWM_Start+0xfe>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b04      	cmp	r3, #4
 800781a:	d104      	bne.n	8007826 <HAL_TIM_PWM_Start+0xc6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007824:	e01b      	b.n	800785e <HAL_TIM_PWM_Start+0xfe>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b08      	cmp	r3, #8
 800782a:	d104      	bne.n	8007836 <HAL_TIM_PWM_Start+0xd6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007834:	e013      	b.n	800785e <HAL_TIM_PWM_Start+0xfe>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d104      	bne.n	8007846 <HAL_TIM_PWM_Start+0xe6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007844:	e00b      	b.n	800785e <HAL_TIM_PWM_Start+0xfe>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b10      	cmp	r3, #16
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0xf6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007854:	e003      	b.n	800785e <HAL_TIM_PWM_Start+0xfe>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2201      	movs	r2, #1
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f001 f836 	bl	80088d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a33      	ldr	r2, [pc, #204]	; (8007940 <HAL_TIM_PWM_Start+0x1e0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_TIM_PWM_Start+0x13e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a32      	ldr	r2, [pc, #200]	; (8007944 <HAL_TIM_PWM_Start+0x1e4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_TIM_PWM_Start+0x13e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a30      	ldr	r2, [pc, #192]	; (8007948 <HAL_TIM_PWM_Start+0x1e8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIM_PWM_Start+0x13e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a2f      	ldr	r2, [pc, #188]	; (800794c <HAL_TIM_PWM_Start+0x1ec>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIM_PWM_Start+0x13e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a2d      	ldr	r2, [pc, #180]	; (8007950 <HAL_TIM_PWM_Start+0x1f0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_PWM_Start+0x142>
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <HAL_TIM_PWM_Start+0x144>
 80078a2:	2300      	movs	r3, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a20      	ldr	r2, [pc, #128]	; (8007940 <HAL_TIM_PWM_Start+0x1e0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d018      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x194>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ca:	d013      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x194>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a20      	ldr	r2, [pc, #128]	; (8007954 <HAL_TIM_PWM_Start+0x1f4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00e      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x194>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <HAL_TIM_PWM_Start+0x1f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x194>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a17      	ldr	r2, [pc, #92]	; (8007944 <HAL_TIM_PWM_Start+0x1e4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x194>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a16      	ldr	r2, [pc, #88]	; (8007948 <HAL_TIM_PWM_Start+0x1e8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d115      	bne.n	8007920 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	4b18      	ldr	r3, [pc, #96]	; (800795c <HAL_TIM_PWM_Start+0x1fc>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b06      	cmp	r3, #6
 8007904:	d015      	beq.n	8007932 <HAL_TIM_PWM_Start+0x1d2>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790c:	d011      	beq.n	8007932 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f042 0201 	orr.w	r2, r2, #1
 800791c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791e:	e008      	b.n	8007932 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e000      	b.n	8007934 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40013400 	.word	0x40013400
 8007948:	40014000 	.word	0x40014000
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	00010007 	.word	0x00010007

08007960 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2200      	movs	r2, #0
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 ffb0 	bl	80088d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a3e      	ldr	r2, [pc, #248]	; (8007a78 <HAL_TIM_PWM_Stop+0x118>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_TIM_PWM_Stop+0x4a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a3d      	ldr	r2, [pc, #244]	; (8007a7c <HAL_TIM_PWM_Stop+0x11c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_TIM_PWM_Stop+0x4a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a3b      	ldr	r2, [pc, #236]	; (8007a80 <HAL_TIM_PWM_Stop+0x120>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_TIM_PWM_Stop+0x4a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a3a      	ldr	r2, [pc, #232]	; (8007a84 <HAL_TIM_PWM_Stop+0x124>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_TIM_PWM_Stop+0x4a>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a38      	ldr	r2, [pc, #224]	; (8007a88 <HAL_TIM_PWM_Stop+0x128>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_PWM_Stop+0x4e>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_TIM_PWM_Stop+0x50>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1a      	ldr	r2, [r3, #32]
 80079ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10f      	bne.n	80079e4 <HAL_TIM_PWM_Stop+0x84>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6a1a      	ldr	r2, [r3, #32]
 80079ca:	f240 4344 	movw	r3, #1092	; 0x444
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_PWM_Stop+0x84>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10f      	bne.n	8007a14 <HAL_TIM_PWM_Stop+0xb4>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	f240 4344 	movw	r3, #1092	; 0x444
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d107      	bne.n	8007a14 <HAL_TIM_PWM_Stop+0xb4>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <HAL_TIM_PWM_Stop+0xc4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a22:	e023      	b.n	8007a6c <HAL_TIM_PWM_Stop+0x10c>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d104      	bne.n	8007a34 <HAL_TIM_PWM_Stop+0xd4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a32:	e01b      	b.n	8007a6c <HAL_TIM_PWM_Stop+0x10c>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d104      	bne.n	8007a44 <HAL_TIM_PWM_Stop+0xe4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a42:	e013      	b.n	8007a6c <HAL_TIM_PWM_Stop+0x10c>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b0c      	cmp	r3, #12
 8007a48:	d104      	bne.n	8007a54 <HAL_TIM_PWM_Stop+0xf4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a52:	e00b      	b.n	8007a6c <HAL_TIM_PWM_Stop+0x10c>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d104      	bne.n	8007a64 <HAL_TIM_PWM_Stop+0x104>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a62:	e003      	b.n	8007a6c <HAL_TIM_PWM_Stop+0x10c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40013400 	.word	0x40013400
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800

08007a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d122      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d11b      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0202 	mvn.w	r2, #2
 8007ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fae3 	bl	800809a <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fad5 	bl	8008086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fae6 	bl	80080ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d122      	bne.n	8007b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d11b      	bne.n	8007b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0204 	mvn.w	r2, #4
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fab9 	bl	800809a <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 faab 	bl	8008086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fabc 	bl	80080ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b08      	cmp	r3, #8
 8007b48:	d122      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d11b      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0208 	mvn.w	r2, #8
 8007b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2204      	movs	r2, #4
 8007b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa8f 	bl	800809a <HAL_TIM_IC_CaptureCallback>
 8007b7c:	e005      	b.n	8007b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa81 	bl	8008086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa92 	bl	80080ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d122      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b10      	cmp	r3, #16
 8007baa:	d11b      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0210 	mvn.w	r2, #16
 8007bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2208      	movs	r2, #8
 8007bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fa65 	bl	800809a <HAL_TIM_IC_CaptureCallback>
 8007bd0:	e005      	b.n	8007bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa57 	bl	8008086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa68 	bl	80080ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10e      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d107      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0201 	mvn.w	r2, #1
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa ffac 	bl	8002b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fefe 	bl	8008a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d10e      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c56:	2b80      	cmp	r3, #128	; 0x80
 8007c58:	d107      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fef1 	bl	8008a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b40      	cmp	r3, #64	; 0x40
 8007c76:	d10e      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d107      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa16 	bl	80080c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d10e      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d107      	bne.n	8007cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f06f 0220 	mvn.w	r2, #32
 8007cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 feb1 	bl	8008a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e0ff      	b.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b14      	cmp	r3, #20
 8007cf6:	f200 80f0 	bhi.w	8007eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007edb 	.word	0x08007edb
 8007d08:	08007edb 	.word	0x08007edb
 8007d0c:	08007edb 	.word	0x08007edb
 8007d10:	08007d95 	.word	0x08007d95
 8007d14:	08007edb 	.word	0x08007edb
 8007d18:	08007edb 	.word	0x08007edb
 8007d1c:	08007edb 	.word	0x08007edb
 8007d20:	08007dd7 	.word	0x08007dd7
 8007d24:	08007edb 	.word	0x08007edb
 8007d28:	08007edb 	.word	0x08007edb
 8007d2c:	08007edb 	.word	0x08007edb
 8007d30:	08007e17 	.word	0x08007e17
 8007d34:	08007edb 	.word	0x08007edb
 8007d38:	08007edb 	.word	0x08007edb
 8007d3c:	08007edb 	.word	0x08007edb
 8007d40:	08007e59 	.word	0x08007e59
 8007d44:	08007edb 	.word	0x08007edb
 8007d48:	08007edb 	.word	0x08007edb
 8007d4c:	08007edb 	.word	0x08007edb
 8007d50:	08007e99 	.word	0x08007e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fa4c 	bl	80081f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0208 	orr.w	r2, r2, #8
 8007d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0204 	bic.w	r2, r2, #4
 8007d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6999      	ldr	r1, [r3, #24]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	619a      	str	r2, [r3, #24]
      break;
 8007d92:	e0a5      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fabc 	bl	8008318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6999      	ldr	r1, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	021a      	lsls	r2, r3, #8
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	619a      	str	r2, [r3, #24]
      break;
 8007dd4:	e084      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 fb25 	bl	800842c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0208 	orr.w	r2, r2, #8
 8007df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0204 	bic.w	r2, r2, #4
 8007e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69d9      	ldr	r1, [r3, #28]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	61da      	str	r2, [r3, #28]
      break;
 8007e14:	e064      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fb8d 	bl	800853c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69d9      	ldr	r1, [r3, #28]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	021a      	lsls	r2, r3, #8
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	61da      	str	r2, [r3, #28]
      break;
 8007e56:	e043      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fbd6 	bl	8008610 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0208 	orr.w	r2, r2, #8
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0204 	bic.w	r2, r2, #4
 8007e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e96:	e023      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fc1a 	bl	80086d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	021a      	lsls	r2, r3, #8
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ed8:	e002      	b.n	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop

08007ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_TIM_ConfigClockSource+0x1c>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e0b6      	b.n	800807e <HAL_TIM_ConfigClockSource+0x18a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f4c:	d03e      	beq.n	8007fcc <HAL_TIM_ConfigClockSource+0xd8>
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f52:	f200 8087 	bhi.w	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	f000 8086 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x176>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f62:	d87f      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f64:	2b70      	cmp	r3, #112	; 0x70
 8007f66:	d01a      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0xaa>
 8007f68:	2b70      	cmp	r3, #112	; 0x70
 8007f6a:	d87b      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f6c:	2b60      	cmp	r3, #96	; 0x60
 8007f6e:	d050      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x11e>
 8007f70:	2b60      	cmp	r3, #96	; 0x60
 8007f72:	d877      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f74:	2b50      	cmp	r3, #80	; 0x50
 8007f76:	d03c      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0xfe>
 8007f78:	2b50      	cmp	r3, #80	; 0x50
 8007f7a:	d873      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f7c:	2b40      	cmp	r3, #64	; 0x40
 8007f7e:	d058      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x13e>
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d86f      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f84:	2b30      	cmp	r3, #48	; 0x30
 8007f86:	d064      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15e>
 8007f88:	2b30      	cmp	r3, #48	; 0x30
 8007f8a:	d86b      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d060      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15e>
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d867      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05c      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15e>
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d05a      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15e>
 8007f9c:	e062      	b.n	8008064 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6899      	ldr	r1, [r3, #8]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f000 fc73 	bl	8008898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	609a      	str	r2, [r3, #8]
      break;
 8007fca:	e04f      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6899      	ldr	r1, [r3, #8]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f000 fc5c 	bl	8008898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fee:	609a      	str	r2, [r3, #8]
      break;
 8007ff0:	e03c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6859      	ldr	r1, [r3, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	f000 fbd0 	bl	80087a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2150      	movs	r1, #80	; 0x50
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fc29 	bl	8008862 <TIM_ITRx_SetConfig>
      break;
 8008010:	e02c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6859      	ldr	r1, [r3, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	461a      	mov	r2, r3
 8008020:	f000 fbef 	bl	8008802 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2160      	movs	r1, #96	; 0x60
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fc19 	bl	8008862 <TIM_ITRx_SetConfig>
      break;
 8008030:	e01c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6859      	ldr	r1, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	461a      	mov	r2, r3
 8008040:	f000 fbb0 	bl	80087a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2140      	movs	r1, #64	; 0x40
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fc09 	bl	8008862 <TIM_ITRx_SetConfig>
      break;
 8008050:	e00c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f000 fc00 	bl	8008862 <TIM_ITRx_SetConfig>
      break;
 8008062:	e003      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
      break;
 8008068:	e000      	b.n	800806c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800806a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3c      	ldr	r2, [pc, #240]	; (80081dc <TIM_Base_SetConfig+0x104>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a39      	ldr	r2, [pc, #228]	; (80081e0 <TIM_Base_SetConfig+0x108>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <TIM_Base_SetConfig+0x10c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x38>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a37      	ldr	r2, [pc, #220]	; (80081e8 <TIM_Base_SetConfig+0x110>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2d      	ldr	r2, [pc, #180]	; (80081dc <TIM_Base_SetConfig+0x104>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01b      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d017      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2a      	ldr	r2, [pc, #168]	; (80081e0 <TIM_Base_SetConfig+0x108>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <TIM_Base_SetConfig+0x10c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a28      	ldr	r2, [pc, #160]	; (80081e8 <TIM_Base_SetConfig+0x110>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00b      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a27      	ldr	r2, [pc, #156]	; (80081ec <TIM_Base_SetConfig+0x114>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d007      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <TIM_Base_SetConfig+0x118>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d003      	beq.n	8008162 <TIM_Base_SetConfig+0x8a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <TIM_Base_SetConfig+0x11c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d108      	bne.n	8008174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	4313      	orrs	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a10      	ldr	r2, [pc, #64]	; (80081dc <TIM_Base_SetConfig+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00f      	beq.n	80081c0 <TIM_Base_SetConfig+0xe8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <TIM_Base_SetConfig+0x110>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00b      	beq.n	80081c0 <TIM_Base_SetConfig+0xe8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <TIM_Base_SetConfig+0x114>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d007      	beq.n	80081c0 <TIM_Base_SetConfig+0xe8>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <TIM_Base_SetConfig+0x118>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_Base_SetConfig+0xe8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a0e      	ldr	r2, [pc, #56]	; (80081f4 <TIM_Base_SetConfig+0x11c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d103      	bne.n	80081c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	615a      	str	r2, [r3, #20]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40012c00 	.word	0x40012c00
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40013400 	.word	0x40013400
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40014400 	.word	0x40014400
 80081f4:	40014800 	.word	0x40014800

080081f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0303 	bic.w	r3, r3, #3
 8008232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f023 0302 	bic.w	r3, r3, #2
 8008244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2c      	ldr	r2, [pc, #176]	; (8008304 <TIM_OC1_SetConfig+0x10c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00f      	beq.n	8008278 <TIM_OC1_SetConfig+0x80>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2b      	ldr	r2, [pc, #172]	; (8008308 <TIM_OC1_SetConfig+0x110>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00b      	beq.n	8008278 <TIM_OC1_SetConfig+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a2a      	ldr	r2, [pc, #168]	; (800830c <TIM_OC1_SetConfig+0x114>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <TIM_OC1_SetConfig+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a29      	ldr	r2, [pc, #164]	; (8008310 <TIM_OC1_SetConfig+0x118>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_OC1_SetConfig+0x80>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a28      	ldr	r2, [pc, #160]	; (8008314 <TIM_OC1_SetConfig+0x11c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d10c      	bne.n	8008292 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0308 	bic.w	r3, r3, #8
 800827e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f023 0304 	bic.w	r3, r3, #4
 8008290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <TIM_OC1_SetConfig+0x10c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_OC1_SetConfig+0xc2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <TIM_OC1_SetConfig+0x110>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_OC1_SetConfig+0xc2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a19      	ldr	r2, [pc, #100]	; (800830c <TIM_OC1_SetConfig+0x114>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_OC1_SetConfig+0xc2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a18      	ldr	r2, [pc, #96]	; (8008310 <TIM_OC1_SetConfig+0x118>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_OC1_SetConfig+0xc2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a17      	ldr	r2, [pc, #92]	; (8008314 <TIM_OC1_SetConfig+0x11c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d111      	bne.n	80082de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	bf00      	nop
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	40012c00 	.word	0x40012c00
 8008308:	40013400 	.word	0x40013400
 800830c:	40014000 	.word	0x40014000
 8008310:	40014400 	.word	0x40014400
 8008314:	40014800 	.word	0x40014800

08008318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	f023 0210 	bic.w	r2, r3, #16
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0320 	bic.w	r3, r3, #32
 8008366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a28      	ldr	r2, [pc, #160]	; (8008418 <TIM_OC2_SetConfig+0x100>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC2_SetConfig+0x6c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a27      	ldr	r2, [pc, #156]	; (800841c <TIM_OC2_SetConfig+0x104>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10d      	bne.n	80083a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800838a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <TIM_OC2_SetConfig+0x100>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_OC2_SetConfig+0xb0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a1c      	ldr	r2, [pc, #112]	; (800841c <TIM_OC2_SetConfig+0x104>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_OC2_SetConfig+0xb0>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1b      	ldr	r2, [pc, #108]	; (8008420 <TIM_OC2_SetConfig+0x108>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_OC2_SetConfig+0xb0>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a1a      	ldr	r2, [pc, #104]	; (8008424 <TIM_OC2_SetConfig+0x10c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_OC2_SetConfig+0xb0>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a19      	ldr	r2, [pc, #100]	; (8008428 <TIM_OC2_SetConfig+0x110>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d113      	bne.n	80083f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40012c00 	.word	0x40012c00
 800841c:	40013400 	.word	0x40013400
 8008420:	40014000 	.word	0x40014000
 8008424:	40014400 	.word	0x40014400
 8008428:	40014800 	.word	0x40014800

0800842c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a27      	ldr	r2, [pc, #156]	; (8008528 <TIM_OC3_SetConfig+0xfc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC3_SetConfig+0x6a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a26      	ldr	r2, [pc, #152]	; (800852c <TIM_OC3_SetConfig+0x100>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d10d      	bne.n	80084b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800849c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1c      	ldr	r2, [pc, #112]	; (8008528 <TIM_OC3_SetConfig+0xfc>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC3_SetConfig+0xae>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1b      	ldr	r2, [pc, #108]	; (800852c <TIM_OC3_SetConfig+0x100>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC3_SetConfig+0xae>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	; (8008530 <TIM_OC3_SetConfig+0x104>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC3_SetConfig+0xae>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <TIM_OC3_SetConfig+0x108>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC3_SetConfig+0xae>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a18      	ldr	r2, [pc, #96]	; (8008538 <TIM_OC3_SetConfig+0x10c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d113      	bne.n	8008502 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	40012c00 	.word	0x40012c00
 800852c:	40013400 	.word	0x40013400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800858a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	031b      	lsls	r3, r3, #12
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a18      	ldr	r2, [pc, #96]	; (80085fc <TIM_OC4_SetConfig+0xc0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00f      	beq.n	80085c0 <TIM_OC4_SetConfig+0x84>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a17      	ldr	r2, [pc, #92]	; (8008600 <TIM_OC4_SetConfig+0xc4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <TIM_OC4_SetConfig+0x84>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a16      	ldr	r2, [pc, #88]	; (8008604 <TIM_OC4_SetConfig+0xc8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d007      	beq.n	80085c0 <TIM_OC4_SetConfig+0x84>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <TIM_OC4_SetConfig+0xcc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC4_SetConfig+0x84>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a14      	ldr	r2, [pc, #80]	; (800860c <TIM_OC4_SetConfig+0xd0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d109      	bne.n	80085d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	019b      	lsls	r3, r3, #6
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	40013400 	.word	0x40013400
 8008604:	40014000 	.word	0x40014000
 8008608:	40014400 	.word	0x40014400
 800860c:	40014800 	.word	0x40014800

08008610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	041b      	lsls	r3, r3, #16
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4313      	orrs	r3, r2
 8008660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a17      	ldr	r2, [pc, #92]	; (80086c4 <TIM_OC5_SetConfig+0xb4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00f      	beq.n	800868a <TIM_OC5_SetConfig+0x7a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <TIM_OC5_SetConfig+0xb8>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00b      	beq.n	800868a <TIM_OC5_SetConfig+0x7a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a15      	ldr	r2, [pc, #84]	; (80086cc <TIM_OC5_SetConfig+0xbc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d007      	beq.n	800868a <TIM_OC5_SetConfig+0x7a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <TIM_OC5_SetConfig+0xc0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <TIM_OC5_SetConfig+0x7a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <TIM_OC5_SetConfig+0xc4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d109      	bne.n	800869e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40013400 	.word	0x40013400
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40014400 	.word	0x40014400
 80086d4:	40014800 	.word	0x40014800

080086d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800871e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	051b      	lsls	r3, r3, #20
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a18      	ldr	r2, [pc, #96]	; (8008790 <TIM_OC6_SetConfig+0xb8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00f      	beq.n	8008754 <TIM_OC6_SetConfig+0x7c>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a17      	ldr	r2, [pc, #92]	; (8008794 <TIM_OC6_SetConfig+0xbc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00b      	beq.n	8008754 <TIM_OC6_SetConfig+0x7c>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a16      	ldr	r2, [pc, #88]	; (8008798 <TIM_OC6_SetConfig+0xc0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d007      	beq.n	8008754 <TIM_OC6_SetConfig+0x7c>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a15      	ldr	r2, [pc, #84]	; (800879c <TIM_OC6_SetConfig+0xc4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <TIM_OC6_SetConfig+0x7c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a14      	ldr	r2, [pc, #80]	; (80087a0 <TIM_OC6_SetConfig+0xc8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d109      	bne.n	8008768 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800875a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	029b      	lsls	r3, r3, #10
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40013400 	.word	0x40013400
 8008798:	40014000 	.word	0x40014000
 800879c:	40014400 	.word	0x40014400
 80087a0:	40014800 	.word	0x40014800

080087a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f023 0201 	bic.w	r2, r3, #1
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f023 030a 	bic.w	r3, r3, #10
 80087e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	621a      	str	r2, [r3, #32]
}
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008802:	b480      	push	{r7}
 8008804:	b087      	sub	sp, #28
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	f023 0210 	bic.w	r2, r3, #16
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800882c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	031b      	lsls	r3, r3, #12
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800883e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	f043 0307 	orr.w	r3, r3, #7
 8008884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	609a      	str	r2, [r3, #8]
}
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4313      	orrs	r3, r2
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	609a      	str	r2, [r3, #8]
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f003 031f 	and.w	r3, r3, #31
 80088ea:	2201      	movs	r2, #1
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1a      	ldr	r2, [r3, #32]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	401a      	ands	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a1a      	ldr	r2, [r3, #32]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	fa01 f303 	lsl.w	r3, r1, r3
 8008910:	431a      	orrs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008938:	2302      	movs	r3, #2
 800893a:	e063      	b.n	8008a04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d004      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d108      	bne.n	8008982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d018      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ae:	d013      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00e      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d009      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a12      	ldr	r2, [pc, #72]	; (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a13      	ldr	r2, [pc, #76]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d10c      	bne.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	40012c00 	.word	0x40012c00
 8008a14:	40013400 	.word	0x40013400
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40014000 	.word	0x40014000

08008a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008a6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4013      	ands	r3, r2
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a96:	b084      	sub	sp, #16
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	f107 0014 	add.w	r0, r7, #20
 8008aa4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	b004      	add	sp, #16
 8008ad6:	4770      	bx	lr

08008ad8 <__errno>:
 8008ad8:	4b01      	ldr	r3, [pc, #4]	; (8008ae0 <__errno+0x8>)
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000068 	.word	0x20000068

08008ae4 <__libc_init_array>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4d0d      	ldr	r5, [pc, #52]	; (8008b1c <__libc_init_array+0x38>)
 8008ae8:	4c0d      	ldr	r4, [pc, #52]	; (8008b20 <__libc_init_array+0x3c>)
 8008aea:	1b64      	subs	r4, r4, r5
 8008aec:	10a4      	asrs	r4, r4, #2
 8008aee:	2600      	movs	r6, #0
 8008af0:	42a6      	cmp	r6, r4
 8008af2:	d109      	bne.n	8008b08 <__libc_init_array+0x24>
 8008af4:	4d0b      	ldr	r5, [pc, #44]	; (8008b24 <__libc_init_array+0x40>)
 8008af6:	4c0c      	ldr	r4, [pc, #48]	; (8008b28 <__libc_init_array+0x44>)
 8008af8:	f001 fa22 	bl	8009f40 <_init>
 8008afc:	1b64      	subs	r4, r4, r5
 8008afe:	10a4      	asrs	r4, r4, #2
 8008b00:	2600      	movs	r6, #0
 8008b02:	42a6      	cmp	r6, r4
 8008b04:	d105      	bne.n	8008b12 <__libc_init_array+0x2e>
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0c:	4798      	blx	r3
 8008b0e:	3601      	adds	r6, #1
 8008b10:	e7ee      	b.n	8008af0 <__libc_init_array+0xc>
 8008b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b16:	4798      	blx	r3
 8008b18:	3601      	adds	r6, #1
 8008b1a:	e7f2      	b.n	8008b02 <__libc_init_array+0x1e>
 8008b1c:	0800c758 	.word	0x0800c758
 8008b20:	0800c758 	.word	0x0800c758
 8008b24:	0800c758 	.word	0x0800c758
 8008b28:	0800c75c 	.word	0x0800c75c

08008b2c <memcpy>:
 8008b2c:	440a      	add	r2, r1
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b34:	d100      	bne.n	8008b38 <memcpy+0xc>
 8008b36:	4770      	bx	lr
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b42:	4291      	cmp	r1, r2
 8008b44:	d1f9      	bne.n	8008b3a <memcpy+0xe>
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <memset>:
 8008b48:	4402      	add	r2, r0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d100      	bne.n	8008b52 <memset+0xa>
 8008b50:	4770      	bx	lr
 8008b52:	f803 1b01 	strb.w	r1, [r3], #1
 8008b56:	e7f9      	b.n	8008b4c <memset+0x4>

08008b58 <srand>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <srand+0x44>)
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b60:	4604      	mov	r4, r0
 8008b62:	b9b3      	cbnz	r3, 8008b92 <srand+0x3a>
 8008b64:	2018      	movs	r0, #24
 8008b66:	f000 f8b5 	bl	8008cd4 <malloc>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	63a8      	str	r0, [r5, #56]	; 0x38
 8008b6e:	b920      	cbnz	r0, 8008b7a <srand+0x22>
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <srand+0x48>)
 8008b72:	480c      	ldr	r0, [pc, #48]	; (8008ba4 <srand+0x4c>)
 8008b74:	2142      	movs	r1, #66	; 0x42
 8008b76:	f000 f87d 	bl	8008c74 <__assert_func>
 8008b7a:	490b      	ldr	r1, [pc, #44]	; (8008ba8 <srand+0x50>)
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <srand+0x54>)
 8008b7e:	e9c0 1300 	strd	r1, r3, [r0]
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <srand+0x58>)
 8008b84:	6083      	str	r3, [r0, #8]
 8008b86:	230b      	movs	r3, #11
 8008b88:	8183      	strh	r3, [r0, #12]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b94:	2200      	movs	r2, #0
 8008b96:	611c      	str	r4, [r3, #16]
 8008b98:	615a      	str	r2, [r3, #20]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20000068 	.word	0x20000068
 8008ba0:	0800c610 	.word	0x0800c610
 8008ba4:	0800c627 	.word	0x0800c627
 8008ba8:	abcd330e 	.word	0xabcd330e
 8008bac:	e66d1234 	.word	0xe66d1234
 8008bb0:	0005deec 	.word	0x0005deec

08008bb4 <rand>:
 8008bb4:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <rand+0x60>)
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	681c      	ldr	r4, [r3, #0]
 8008bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bbc:	b9b3      	cbnz	r3, 8008bec <rand+0x38>
 8008bbe:	2018      	movs	r0, #24
 8008bc0:	f000 f888 	bl	8008cd4 <malloc>
 8008bc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8008bc6:	b928      	cbnz	r0, 8008bd4 <rand+0x20>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <rand+0x64>)
 8008bcc:	4813      	ldr	r0, [pc, #76]	; (8008c1c <rand+0x68>)
 8008bce:	214e      	movs	r1, #78	; 0x4e
 8008bd0:	f000 f850 	bl	8008c74 <__assert_func>
 8008bd4:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <rand+0x6c>)
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <rand+0x70>)
 8008bd8:	e9c0 2300 	strd	r2, r3, [r0]
 8008bdc:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <rand+0x74>)
 8008bde:	6083      	str	r3, [r0, #8]
 8008be0:	230b      	movs	r3, #11
 8008be2:	8183      	strh	r3, [r0, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	2300      	movs	r3, #0
 8008be8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008bec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008bee:	480f      	ldr	r0, [pc, #60]	; (8008c2c <rand+0x78>)
 8008bf0:	690a      	ldr	r2, [r1, #16]
 8008bf2:	694b      	ldr	r3, [r1, #20]
 8008bf4:	4c0e      	ldr	r4, [pc, #56]	; (8008c30 <rand+0x7c>)
 8008bf6:	4350      	muls	r0, r2
 8008bf8:	fb04 0003 	mla	r0, r4, r3, r0
 8008bfc:	fba2 3404 	umull	r3, r4, r2, r4
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	4404      	add	r4, r0
 8008c04:	f144 0000 	adc.w	r0, r4, #0
 8008c08:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008c0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	bf00      	nop
 8008c14:	20000068 	.word	0x20000068
 8008c18:	0800c610 	.word	0x0800c610
 8008c1c:	0800c627 	.word	0x0800c627
 8008c20:	abcd330e 	.word	0xabcd330e
 8008c24:	e66d1234 	.word	0xe66d1234
 8008c28:	0005deec 	.word	0x0005deec
 8008c2c:	5851f42d 	.word	0x5851f42d
 8008c30:	4c957f2d 	.word	0x4c957f2d

08008c34 <siprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	b500      	push	{lr}
 8008c38:	b09c      	sub	sp, #112	; 0x70
 8008c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	9006      	str	r0, [sp, #24]
 8008c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c44:	4809      	ldr	r0, [pc, #36]	; (8008c6c <siprintf+0x38>)
 8008c46:	9107      	str	r1, [sp, #28]
 8008c48:	9104      	str	r1, [sp, #16]
 8008c4a:	4909      	ldr	r1, [pc, #36]	; (8008c70 <siprintf+0x3c>)
 8008c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	a902      	add	r1, sp, #8
 8008c58:	f000 f94a 	bl	8008ef0 <_svfiprintf_r>
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	b01c      	add	sp, #112	; 0x70
 8008c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c68:	b003      	add	sp, #12
 8008c6a:	4770      	bx	lr
 8008c6c:	20000068 	.word	0x20000068
 8008c70:	ffff0208 	.word	0xffff0208

08008c74 <__assert_func>:
 8008c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c76:	4614      	mov	r4, r2
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <__assert_func+0x2c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4605      	mov	r5, r0
 8008c80:	68d8      	ldr	r0, [r3, #12]
 8008c82:	b14c      	cbz	r4, 8008c98 <__assert_func+0x24>
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <__assert_func+0x30>)
 8008c86:	9100      	str	r1, [sp, #0]
 8008c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c8c:	4906      	ldr	r1, [pc, #24]	; (8008ca8 <__assert_func+0x34>)
 8008c8e:	462b      	mov	r3, r5
 8008c90:	f000 f80e 	bl	8008cb0 <fiprintf>
 8008c94:	f000 fdea 	bl	800986c <abort>
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <__assert_func+0x38>)
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	e7f3      	b.n	8008c86 <__assert_func+0x12>
 8008c9e:	bf00      	nop
 8008ca0:	20000068 	.word	0x20000068
 8008ca4:	0800c686 	.word	0x0800c686
 8008ca8:	0800c693 	.word	0x0800c693
 8008cac:	0800c6c1 	.word	0x0800c6c1

08008cb0 <fiprintf>:
 8008cb0:	b40e      	push	{r1, r2, r3}
 8008cb2:	b503      	push	{r0, r1, lr}
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	ab03      	add	r3, sp, #12
 8008cb8:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <fiprintf+0x20>)
 8008cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbe:	6800      	ldr	r0, [r0, #0]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	f000 fa3f 	bl	8009144 <_vfiprintf_r>
 8008cc6:	b002      	add	sp, #8
 8008cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ccc:	b003      	add	sp, #12
 8008cce:	4770      	bx	lr
 8008cd0:	20000068 	.word	0x20000068

08008cd4 <malloc>:
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <malloc+0xc>)
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	f000 b853 	b.w	8008d84 <_malloc_r>
 8008cde:	bf00      	nop
 8008ce0:	20000068 	.word	0x20000068

08008ce4 <_free_r>:
 8008ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	d048      	beq.n	8008d7c <_free_r+0x98>
 8008cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cee:	9001      	str	r0, [sp, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8008cf6:	bfb8      	it	lt
 8008cf8:	18e4      	addlt	r4, r4, r3
 8008cfa:	f000 fff7 	bl	8009cec <__malloc_lock>
 8008cfe:	4a20      	ldr	r2, [pc, #128]	; (8008d80 <_free_r+0x9c>)
 8008d00:	9801      	ldr	r0, [sp, #4]
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	4615      	mov	r5, r2
 8008d06:	b933      	cbnz	r3, 8008d16 <_free_r+0x32>
 8008d08:	6063      	str	r3, [r4, #4]
 8008d0a:	6014      	str	r4, [r2, #0]
 8008d0c:	b003      	add	sp, #12
 8008d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d12:	f000 bff1 	b.w	8009cf8 <__malloc_unlock>
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	d90b      	bls.n	8008d32 <_free_r+0x4e>
 8008d1a:	6821      	ldr	r1, [r4, #0]
 8008d1c:	1862      	adds	r2, r4, r1
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	bf04      	itt	eq
 8008d22:	681a      	ldreq	r2, [r3, #0]
 8008d24:	685b      	ldreq	r3, [r3, #4]
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	bf04      	itt	eq
 8008d2a:	1852      	addeq	r2, r2, r1
 8008d2c:	6022      	streq	r2, [r4, #0]
 8008d2e:	602c      	str	r4, [r5, #0]
 8008d30:	e7ec      	b.n	8008d0c <_free_r+0x28>
 8008d32:	461a      	mov	r2, r3
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	b10b      	cbz	r3, 8008d3c <_free_r+0x58>
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d9fa      	bls.n	8008d32 <_free_r+0x4e>
 8008d3c:	6811      	ldr	r1, [r2, #0]
 8008d3e:	1855      	adds	r5, r2, r1
 8008d40:	42a5      	cmp	r5, r4
 8008d42:	d10b      	bne.n	8008d5c <_free_r+0x78>
 8008d44:	6824      	ldr	r4, [r4, #0]
 8008d46:	4421      	add	r1, r4
 8008d48:	1854      	adds	r4, r2, r1
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	6011      	str	r1, [r2, #0]
 8008d4e:	d1dd      	bne.n	8008d0c <_free_r+0x28>
 8008d50:	681c      	ldr	r4, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	6053      	str	r3, [r2, #4]
 8008d56:	4421      	add	r1, r4
 8008d58:	6011      	str	r1, [r2, #0]
 8008d5a:	e7d7      	b.n	8008d0c <_free_r+0x28>
 8008d5c:	d902      	bls.n	8008d64 <_free_r+0x80>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	6003      	str	r3, [r0, #0]
 8008d62:	e7d3      	b.n	8008d0c <_free_r+0x28>
 8008d64:	6825      	ldr	r5, [r4, #0]
 8008d66:	1961      	adds	r1, r4, r5
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	bf04      	itt	eq
 8008d6c:	6819      	ldreq	r1, [r3, #0]
 8008d6e:	685b      	ldreq	r3, [r3, #4]
 8008d70:	6063      	str	r3, [r4, #4]
 8008d72:	bf04      	itt	eq
 8008d74:	1949      	addeq	r1, r1, r5
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	6054      	str	r4, [r2, #4]
 8008d7a:	e7c7      	b.n	8008d0c <_free_r+0x28>
 8008d7c:	b003      	add	sp, #12
 8008d7e:	bd30      	pop	{r4, r5, pc}
 8008d80:	2000011c 	.word	0x2000011c

08008d84 <_malloc_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	1ccd      	adds	r5, r1, #3
 8008d88:	f025 0503 	bic.w	r5, r5, #3
 8008d8c:	3508      	adds	r5, #8
 8008d8e:	2d0c      	cmp	r5, #12
 8008d90:	bf38      	it	cc
 8008d92:	250c      	movcc	r5, #12
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	4606      	mov	r6, r0
 8008d98:	db01      	blt.n	8008d9e <_malloc_r+0x1a>
 8008d9a:	42a9      	cmp	r1, r5
 8008d9c:	d903      	bls.n	8008da6 <_malloc_r+0x22>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	2000      	movs	r0, #0
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da6:	f000 ffa1 	bl	8009cec <__malloc_lock>
 8008daa:	4921      	ldr	r1, [pc, #132]	; (8008e30 <_malloc_r+0xac>)
 8008dac:	680a      	ldr	r2, [r1, #0]
 8008dae:	4614      	mov	r4, r2
 8008db0:	b99c      	cbnz	r4, 8008dda <_malloc_r+0x56>
 8008db2:	4f20      	ldr	r7, [pc, #128]	; (8008e34 <_malloc_r+0xb0>)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	b923      	cbnz	r3, 8008dc2 <_malloc_r+0x3e>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 fc86 	bl	80096cc <_sbrk_r>
 8008dc0:	6038      	str	r0, [r7, #0]
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	f000 fc81 	bl	80096cc <_sbrk_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	d123      	bne.n	8008e16 <_malloc_r+0x92>
 8008dce:	230c      	movs	r3, #12
 8008dd0:	6033      	str	r3, [r6, #0]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f000 ff90 	bl	8009cf8 <__malloc_unlock>
 8008dd8:	e7e3      	b.n	8008da2 <_malloc_r+0x1e>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	1b5b      	subs	r3, r3, r5
 8008dde:	d417      	bmi.n	8008e10 <_malloc_r+0x8c>
 8008de0:	2b0b      	cmp	r3, #11
 8008de2:	d903      	bls.n	8008dec <_malloc_r+0x68>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	441c      	add	r4, r3
 8008de8:	6025      	str	r5, [r4, #0]
 8008dea:	e004      	b.n	8008df6 <_malloc_r+0x72>
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	42a2      	cmp	r2, r4
 8008df0:	bf0c      	ite	eq
 8008df2:	600b      	streq	r3, [r1, #0]
 8008df4:	6053      	strne	r3, [r2, #4]
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 ff7e 	bl	8009cf8 <__malloc_unlock>
 8008dfc:	f104 000b 	add.w	r0, r4, #11
 8008e00:	1d23      	adds	r3, r4, #4
 8008e02:	f020 0007 	bic.w	r0, r0, #7
 8008e06:	1ac2      	subs	r2, r0, r3
 8008e08:	d0cc      	beq.n	8008da4 <_malloc_r+0x20>
 8008e0a:	1a1b      	subs	r3, r3, r0
 8008e0c:	50a3      	str	r3, [r4, r2]
 8008e0e:	e7c9      	b.n	8008da4 <_malloc_r+0x20>
 8008e10:	4622      	mov	r2, r4
 8008e12:	6864      	ldr	r4, [r4, #4]
 8008e14:	e7cc      	b.n	8008db0 <_malloc_r+0x2c>
 8008e16:	1cc4      	adds	r4, r0, #3
 8008e18:	f024 0403 	bic.w	r4, r4, #3
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d0e3      	beq.n	8008de8 <_malloc_r+0x64>
 8008e20:	1a21      	subs	r1, r4, r0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f000 fc52 	bl	80096cc <_sbrk_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d1dd      	bne.n	8008de8 <_malloc_r+0x64>
 8008e2c:	e7cf      	b.n	8008dce <_malloc_r+0x4a>
 8008e2e:	bf00      	nop
 8008e30:	2000011c 	.word	0x2000011c
 8008e34:	20000120 	.word	0x20000120

08008e38 <__ssputs_r>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	688e      	ldr	r6, [r1, #8]
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	4682      	mov	sl, r0
 8008e42:	460c      	mov	r4, r1
 8008e44:	4690      	mov	r8, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	d838      	bhi.n	8008ebc <__ssputs_r+0x84>
 8008e4a:	898a      	ldrh	r2, [r1, #12]
 8008e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e50:	d032      	beq.n	8008eb8 <__ssputs_r+0x80>
 8008e52:	6825      	ldr	r5, [r4, #0]
 8008e54:	6909      	ldr	r1, [r1, #16]
 8008e56:	eba5 0901 	sub.w	r9, r5, r1
 8008e5a:	6965      	ldr	r5, [r4, #20]
 8008e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e64:	3301      	adds	r3, #1
 8008e66:	444b      	add	r3, r9
 8008e68:	106d      	asrs	r5, r5, #1
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	bf38      	it	cc
 8008e6e:	461d      	movcc	r5, r3
 8008e70:	0553      	lsls	r3, r2, #21
 8008e72:	d531      	bpl.n	8008ed8 <__ssputs_r+0xa0>
 8008e74:	4629      	mov	r1, r5
 8008e76:	f7ff ff85 	bl	8008d84 <_malloc_r>
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	b950      	cbnz	r0, 8008e94 <__ssputs_r+0x5c>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	f8ca 3000 	str.w	r3, [sl]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e94:	6921      	ldr	r1, [r4, #16]
 8008e96:	464a      	mov	r2, r9
 8008e98:	f7ff fe48 	bl	8008b2c <memcpy>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	6126      	str	r6, [r4, #16]
 8008eaa:	6165      	str	r5, [r4, #20]
 8008eac:	444e      	add	r6, r9
 8008eae:	eba5 0509 	sub.w	r5, r5, r9
 8008eb2:	6026      	str	r6, [r4, #0]
 8008eb4:	60a5      	str	r5, [r4, #8]
 8008eb6:	463e      	mov	r6, r7
 8008eb8:	42be      	cmp	r6, r7
 8008eba:	d900      	bls.n	8008ebe <__ssputs_r+0x86>
 8008ebc:	463e      	mov	r6, r7
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	4641      	mov	r1, r8
 8008ec4:	f000 fef8 	bl	8009cb8 <memmove>
 8008ec8:	68a3      	ldr	r3, [r4, #8]
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	4432      	add	r2, r6
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	6022      	str	r2, [r4, #0]
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7db      	b.n	8008e90 <__ssputs_r+0x58>
 8008ed8:	462a      	mov	r2, r5
 8008eda:	f000 ff13 	bl	8009d04 <_realloc_r>
 8008ede:	4606      	mov	r6, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1e1      	bne.n	8008ea8 <__ssputs_r+0x70>
 8008ee4:	6921      	ldr	r1, [r4, #16]
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	f7ff fefc 	bl	8008ce4 <_free_r>
 8008eec:	e7c7      	b.n	8008e7e <__ssputs_r+0x46>
	...

08008ef0 <_svfiprintf_r>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4698      	mov	r8, r3
 8008ef6:	898b      	ldrh	r3, [r1, #12]
 8008ef8:	061b      	lsls	r3, r3, #24
 8008efa:	b09d      	sub	sp, #116	; 0x74
 8008efc:	4607      	mov	r7, r0
 8008efe:	460d      	mov	r5, r1
 8008f00:	4614      	mov	r4, r2
 8008f02:	d50e      	bpl.n	8008f22 <_svfiprintf_r+0x32>
 8008f04:	690b      	ldr	r3, [r1, #16]
 8008f06:	b963      	cbnz	r3, 8008f22 <_svfiprintf_r+0x32>
 8008f08:	2140      	movs	r1, #64	; 0x40
 8008f0a:	f7ff ff3b 	bl	8008d84 <_malloc_r>
 8008f0e:	6028      	str	r0, [r5, #0]
 8008f10:	6128      	str	r0, [r5, #16]
 8008f12:	b920      	cbnz	r0, 8008f1e <_svfiprintf_r+0x2e>
 8008f14:	230c      	movs	r3, #12
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	e0d1      	b.n	80090c2 <_svfiprintf_r+0x1d2>
 8008f1e:	2340      	movs	r3, #64	; 0x40
 8008f20:	616b      	str	r3, [r5, #20]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9309      	str	r3, [sp, #36]	; 0x24
 8008f26:	2320      	movs	r3, #32
 8008f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f30:	2330      	movs	r3, #48	; 0x30
 8008f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090dc <_svfiprintf_r+0x1ec>
 8008f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f3a:	f04f 0901 	mov.w	r9, #1
 8008f3e:	4623      	mov	r3, r4
 8008f40:	469a      	mov	sl, r3
 8008f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f46:	b10a      	cbz	r2, 8008f4c <_svfiprintf_r+0x5c>
 8008f48:	2a25      	cmp	r2, #37	; 0x25
 8008f4a:	d1f9      	bne.n	8008f40 <_svfiprintf_r+0x50>
 8008f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f50:	d00b      	beq.n	8008f6a <_svfiprintf_r+0x7a>
 8008f52:	465b      	mov	r3, fp
 8008f54:	4622      	mov	r2, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f7ff ff6d 	bl	8008e38 <__ssputs_r>
 8008f5e:	3001      	adds	r0, #1
 8008f60:	f000 80aa 	beq.w	80090b8 <_svfiprintf_r+0x1c8>
 8008f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f66:	445a      	add	r2, fp
 8008f68:	9209      	str	r2, [sp, #36]	; 0x24
 8008f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80a2 	beq.w	80090b8 <_svfiprintf_r+0x1c8>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7e:	f10a 0a01 	add.w	sl, sl, #1
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8c:	4654      	mov	r4, sl
 8008f8e:	2205      	movs	r2, #5
 8008f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f94:	4851      	ldr	r0, [pc, #324]	; (80090dc <_svfiprintf_r+0x1ec>)
 8008f96:	f7f7 f923 	bl	80001e0 <memchr>
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	b9d8      	cbnz	r0, 8008fd6 <_svfiprintf_r+0xe6>
 8008f9e:	06d0      	lsls	r0, r2, #27
 8008fa0:	bf44      	itt	mi
 8008fa2:	2320      	movmi	r3, #32
 8008fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa8:	0711      	lsls	r1, r2, #28
 8008faa:	bf44      	itt	mi
 8008fac:	232b      	movmi	r3, #43	; 0x2b
 8008fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb8:	d015      	beq.n	8008fe6 <_svfiprintf_r+0xf6>
 8008fba:	9a07      	ldr	r2, [sp, #28]
 8008fbc:	4654      	mov	r4, sl
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f04f 0c0a 	mov.w	ip, #10
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fca:	3b30      	subs	r3, #48	; 0x30
 8008fcc:	2b09      	cmp	r3, #9
 8008fce:	d94e      	bls.n	800906e <_svfiprintf_r+0x17e>
 8008fd0:	b1b0      	cbz	r0, 8009000 <_svfiprintf_r+0x110>
 8008fd2:	9207      	str	r2, [sp, #28]
 8008fd4:	e014      	b.n	8009000 <_svfiprintf_r+0x110>
 8008fd6:	eba0 0308 	sub.w	r3, r0, r8
 8008fda:	fa09 f303 	lsl.w	r3, r9, r3
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	46a2      	mov	sl, r4
 8008fe4:	e7d2      	b.n	8008f8c <_svfiprintf_r+0x9c>
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	9103      	str	r1, [sp, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfbb      	ittet	lt
 8008ff2:	425b      	neglt	r3, r3
 8008ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff8:	9307      	strge	r3, [sp, #28]
 8008ffa:	9307      	strlt	r3, [sp, #28]
 8008ffc:	bfb8      	it	lt
 8008ffe:	9204      	strlt	r2, [sp, #16]
 8009000:	7823      	ldrb	r3, [r4, #0]
 8009002:	2b2e      	cmp	r3, #46	; 0x2e
 8009004:	d10c      	bne.n	8009020 <_svfiprintf_r+0x130>
 8009006:	7863      	ldrb	r3, [r4, #1]
 8009008:	2b2a      	cmp	r3, #42	; 0x2a
 800900a:	d135      	bne.n	8009078 <_svfiprintf_r+0x188>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	1d1a      	adds	r2, r3, #4
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	9203      	str	r2, [sp, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	bfb8      	it	lt
 8009018:	f04f 33ff 	movlt.w	r3, #4294967295
 800901c:	3402      	adds	r4, #2
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090ec <_svfiprintf_r+0x1fc>
 8009024:	7821      	ldrb	r1, [r4, #0]
 8009026:	2203      	movs	r2, #3
 8009028:	4650      	mov	r0, sl
 800902a:	f7f7 f8d9 	bl	80001e0 <memchr>
 800902e:	b140      	cbz	r0, 8009042 <_svfiprintf_r+0x152>
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	eba0 000a 	sub.w	r0, r0, sl
 8009036:	fa03 f000 	lsl.w	r0, r3, r0
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	4303      	orrs	r3, r0
 800903e:	3401      	adds	r4, #1
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4826      	ldr	r0, [pc, #152]	; (80090e0 <_svfiprintf_r+0x1f0>)
 8009048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904c:	2206      	movs	r2, #6
 800904e:	f7f7 f8c7 	bl	80001e0 <memchr>
 8009052:	2800      	cmp	r0, #0
 8009054:	d038      	beq.n	80090c8 <_svfiprintf_r+0x1d8>
 8009056:	4b23      	ldr	r3, [pc, #140]	; (80090e4 <_svfiprintf_r+0x1f4>)
 8009058:	bb1b      	cbnz	r3, 80090a2 <_svfiprintf_r+0x1b2>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	3307      	adds	r3, #7
 800905e:	f023 0307 	bic.w	r3, r3, #7
 8009062:	3308      	adds	r3, #8
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009068:	4433      	add	r3, r6
 800906a:	9309      	str	r3, [sp, #36]	; 0x24
 800906c:	e767      	b.n	8008f3e <_svfiprintf_r+0x4e>
 800906e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009072:	460c      	mov	r4, r1
 8009074:	2001      	movs	r0, #1
 8009076:	e7a5      	b.n	8008fc4 <_svfiprintf_r+0xd4>
 8009078:	2300      	movs	r3, #0
 800907a:	3401      	adds	r4, #1
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	4619      	mov	r1, r3
 8009080:	f04f 0c0a 	mov.w	ip, #10
 8009084:	4620      	mov	r0, r4
 8009086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800908a:	3a30      	subs	r2, #48	; 0x30
 800908c:	2a09      	cmp	r2, #9
 800908e:	d903      	bls.n	8009098 <_svfiprintf_r+0x1a8>
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0c5      	beq.n	8009020 <_svfiprintf_r+0x130>
 8009094:	9105      	str	r1, [sp, #20]
 8009096:	e7c3      	b.n	8009020 <_svfiprintf_r+0x130>
 8009098:	fb0c 2101 	mla	r1, ip, r1, r2
 800909c:	4604      	mov	r4, r0
 800909e:	2301      	movs	r3, #1
 80090a0:	e7f0      	b.n	8009084 <_svfiprintf_r+0x194>
 80090a2:	ab03      	add	r3, sp, #12
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	462a      	mov	r2, r5
 80090a8:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <_svfiprintf_r+0x1f8>)
 80090aa:	a904      	add	r1, sp, #16
 80090ac:	4638      	mov	r0, r7
 80090ae:	f3af 8000 	nop.w
 80090b2:	1c42      	adds	r2, r0, #1
 80090b4:	4606      	mov	r6, r0
 80090b6:	d1d6      	bne.n	8009066 <_svfiprintf_r+0x176>
 80090b8:	89ab      	ldrh	r3, [r5, #12]
 80090ba:	065b      	lsls	r3, r3, #25
 80090bc:	f53f af2c 	bmi.w	8008f18 <_svfiprintf_r+0x28>
 80090c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c2:	b01d      	add	sp, #116	; 0x74
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	ab03      	add	r3, sp, #12
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	462a      	mov	r2, r5
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <_svfiprintf_r+0x1f8>)
 80090d0:	a904      	add	r1, sp, #16
 80090d2:	4638      	mov	r0, r7
 80090d4:	f000 f9d4 	bl	8009480 <_printf_i>
 80090d8:	e7eb      	b.n	80090b2 <_svfiprintf_r+0x1c2>
 80090da:	bf00      	nop
 80090dc:	0800c6c2 	.word	0x0800c6c2
 80090e0:	0800c6cc 	.word	0x0800c6cc
 80090e4:	00000000 	.word	0x00000000
 80090e8:	08008e39 	.word	0x08008e39
 80090ec:	0800c6c8 	.word	0x0800c6c8

080090f0 <__sfputc_r>:
 80090f0:	6893      	ldr	r3, [r2, #8]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	b410      	push	{r4}
 80090f8:	6093      	str	r3, [r2, #8]
 80090fa:	da08      	bge.n	800910e <__sfputc_r+0x1e>
 80090fc:	6994      	ldr	r4, [r2, #24]
 80090fe:	42a3      	cmp	r3, r4
 8009100:	db01      	blt.n	8009106 <__sfputc_r+0x16>
 8009102:	290a      	cmp	r1, #10
 8009104:	d103      	bne.n	800910e <__sfputc_r+0x1e>
 8009106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910a:	f000 baef 	b.w	80096ec <__swbuf_r>
 800910e:	6813      	ldr	r3, [r2, #0]
 8009110:	1c58      	adds	r0, r3, #1
 8009112:	6010      	str	r0, [r2, #0]
 8009114:	7019      	strb	r1, [r3, #0]
 8009116:	4608      	mov	r0, r1
 8009118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800911c:	4770      	bx	lr

0800911e <__sfputs_r>:
 800911e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009120:	4606      	mov	r6, r0
 8009122:	460f      	mov	r7, r1
 8009124:	4614      	mov	r4, r2
 8009126:	18d5      	adds	r5, r2, r3
 8009128:	42ac      	cmp	r4, r5
 800912a:	d101      	bne.n	8009130 <__sfputs_r+0x12>
 800912c:	2000      	movs	r0, #0
 800912e:	e007      	b.n	8009140 <__sfputs_r+0x22>
 8009130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009134:	463a      	mov	r2, r7
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ffda 	bl	80090f0 <__sfputc_r>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d1f3      	bne.n	8009128 <__sfputs_r+0xa>
 8009140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009144 <_vfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	460d      	mov	r5, r1
 800914a:	b09d      	sub	sp, #116	; 0x74
 800914c:	4614      	mov	r4, r2
 800914e:	4698      	mov	r8, r3
 8009150:	4606      	mov	r6, r0
 8009152:	b118      	cbz	r0, 800915c <_vfiprintf_r+0x18>
 8009154:	6983      	ldr	r3, [r0, #24]
 8009156:	b90b      	cbnz	r3, 800915c <_vfiprintf_r+0x18>
 8009158:	f000 fcaa 	bl	8009ab0 <__sinit>
 800915c:	4b89      	ldr	r3, [pc, #548]	; (8009384 <_vfiprintf_r+0x240>)
 800915e:	429d      	cmp	r5, r3
 8009160:	d11b      	bne.n	800919a <_vfiprintf_r+0x56>
 8009162:	6875      	ldr	r5, [r6, #4]
 8009164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d405      	bmi.n	8009176 <_vfiprintf_r+0x32>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d402      	bmi.n	8009176 <_vfiprintf_r+0x32>
 8009170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009172:	f000 fd3b 	bl	8009bec <__retarget_lock_acquire_recursive>
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	071b      	lsls	r3, r3, #28
 800917a:	d501      	bpl.n	8009180 <_vfiprintf_r+0x3c>
 800917c:	692b      	ldr	r3, [r5, #16]
 800917e:	b9eb      	cbnz	r3, 80091bc <_vfiprintf_r+0x78>
 8009180:	4629      	mov	r1, r5
 8009182:	4630      	mov	r0, r6
 8009184:	f000 fb04 	bl	8009790 <__swsetup_r>
 8009188:	b1c0      	cbz	r0, 80091bc <_vfiprintf_r+0x78>
 800918a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800918c:	07dc      	lsls	r4, r3, #31
 800918e:	d50e      	bpl.n	80091ae <_vfiprintf_r+0x6a>
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	b01d      	add	sp, #116	; 0x74
 8009196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919a:	4b7b      	ldr	r3, [pc, #492]	; (8009388 <_vfiprintf_r+0x244>)
 800919c:	429d      	cmp	r5, r3
 800919e:	d101      	bne.n	80091a4 <_vfiprintf_r+0x60>
 80091a0:	68b5      	ldr	r5, [r6, #8]
 80091a2:	e7df      	b.n	8009164 <_vfiprintf_r+0x20>
 80091a4:	4b79      	ldr	r3, [pc, #484]	; (800938c <_vfiprintf_r+0x248>)
 80091a6:	429d      	cmp	r5, r3
 80091a8:	bf08      	it	eq
 80091aa:	68f5      	ldreq	r5, [r6, #12]
 80091ac:	e7da      	b.n	8009164 <_vfiprintf_r+0x20>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	0598      	lsls	r0, r3, #22
 80091b2:	d4ed      	bmi.n	8009190 <_vfiprintf_r+0x4c>
 80091b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b6:	f000 fd1a 	bl	8009bee <__retarget_lock_release_recursive>
 80091ba:	e7e9      	b.n	8009190 <_vfiprintf_r+0x4c>
 80091bc:	2300      	movs	r3, #0
 80091be:	9309      	str	r3, [sp, #36]	; 0x24
 80091c0:	2320      	movs	r3, #32
 80091c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ca:	2330      	movs	r3, #48	; 0x30
 80091cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009390 <_vfiprintf_r+0x24c>
 80091d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091d4:	f04f 0901 	mov.w	r9, #1
 80091d8:	4623      	mov	r3, r4
 80091da:	469a      	mov	sl, r3
 80091dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e0:	b10a      	cbz	r2, 80091e6 <_vfiprintf_r+0xa2>
 80091e2:	2a25      	cmp	r2, #37	; 0x25
 80091e4:	d1f9      	bne.n	80091da <_vfiprintf_r+0x96>
 80091e6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ea:	d00b      	beq.n	8009204 <_vfiprintf_r+0xc0>
 80091ec:	465b      	mov	r3, fp
 80091ee:	4622      	mov	r2, r4
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ff93 	bl	800911e <__sfputs_r>
 80091f8:	3001      	adds	r0, #1
 80091fa:	f000 80aa 	beq.w	8009352 <_vfiprintf_r+0x20e>
 80091fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009200:	445a      	add	r2, fp
 8009202:	9209      	str	r2, [sp, #36]	; 0x24
 8009204:	f89a 3000 	ldrb.w	r3, [sl]
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80a2 	beq.w	8009352 <_vfiprintf_r+0x20e>
 800920e:	2300      	movs	r3, #0
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009218:	f10a 0a01 	add.w	sl, sl, #1
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	9307      	str	r3, [sp, #28]
 8009220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009224:	931a      	str	r3, [sp, #104]	; 0x68
 8009226:	4654      	mov	r4, sl
 8009228:	2205      	movs	r2, #5
 800922a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922e:	4858      	ldr	r0, [pc, #352]	; (8009390 <_vfiprintf_r+0x24c>)
 8009230:	f7f6 ffd6 	bl	80001e0 <memchr>
 8009234:	9a04      	ldr	r2, [sp, #16]
 8009236:	b9d8      	cbnz	r0, 8009270 <_vfiprintf_r+0x12c>
 8009238:	06d1      	lsls	r1, r2, #27
 800923a:	bf44      	itt	mi
 800923c:	2320      	movmi	r3, #32
 800923e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009242:	0713      	lsls	r3, r2, #28
 8009244:	bf44      	itt	mi
 8009246:	232b      	movmi	r3, #43	; 0x2b
 8009248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800924c:	f89a 3000 	ldrb.w	r3, [sl]
 8009250:	2b2a      	cmp	r3, #42	; 0x2a
 8009252:	d015      	beq.n	8009280 <_vfiprintf_r+0x13c>
 8009254:	9a07      	ldr	r2, [sp, #28]
 8009256:	4654      	mov	r4, sl
 8009258:	2000      	movs	r0, #0
 800925a:	f04f 0c0a 	mov.w	ip, #10
 800925e:	4621      	mov	r1, r4
 8009260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009264:	3b30      	subs	r3, #48	; 0x30
 8009266:	2b09      	cmp	r3, #9
 8009268:	d94e      	bls.n	8009308 <_vfiprintf_r+0x1c4>
 800926a:	b1b0      	cbz	r0, 800929a <_vfiprintf_r+0x156>
 800926c:	9207      	str	r2, [sp, #28]
 800926e:	e014      	b.n	800929a <_vfiprintf_r+0x156>
 8009270:	eba0 0308 	sub.w	r3, r0, r8
 8009274:	fa09 f303 	lsl.w	r3, r9, r3
 8009278:	4313      	orrs	r3, r2
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	46a2      	mov	sl, r4
 800927e:	e7d2      	b.n	8009226 <_vfiprintf_r+0xe2>
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	1d19      	adds	r1, r3, #4
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	9103      	str	r1, [sp, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfbb      	ittet	lt
 800928c:	425b      	neglt	r3, r3
 800928e:	f042 0202 	orrlt.w	r2, r2, #2
 8009292:	9307      	strge	r3, [sp, #28]
 8009294:	9307      	strlt	r3, [sp, #28]
 8009296:	bfb8      	it	lt
 8009298:	9204      	strlt	r2, [sp, #16]
 800929a:	7823      	ldrb	r3, [r4, #0]
 800929c:	2b2e      	cmp	r3, #46	; 0x2e
 800929e:	d10c      	bne.n	80092ba <_vfiprintf_r+0x176>
 80092a0:	7863      	ldrb	r3, [r4, #1]
 80092a2:	2b2a      	cmp	r3, #42	; 0x2a
 80092a4:	d135      	bne.n	8009312 <_vfiprintf_r+0x1ce>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9203      	str	r2, [sp, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfb8      	it	lt
 80092b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80092b6:	3402      	adds	r4, #2
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093a0 <_vfiprintf_r+0x25c>
 80092be:	7821      	ldrb	r1, [r4, #0]
 80092c0:	2203      	movs	r2, #3
 80092c2:	4650      	mov	r0, sl
 80092c4:	f7f6 ff8c 	bl	80001e0 <memchr>
 80092c8:	b140      	cbz	r0, 80092dc <_vfiprintf_r+0x198>
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	eba0 000a 	sub.w	r0, r0, sl
 80092d0:	fa03 f000 	lsl.w	r0, r3, r0
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	4303      	orrs	r3, r0
 80092d8:	3401      	adds	r4, #1
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e0:	482c      	ldr	r0, [pc, #176]	; (8009394 <_vfiprintf_r+0x250>)
 80092e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092e6:	2206      	movs	r2, #6
 80092e8:	f7f6 ff7a 	bl	80001e0 <memchr>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d03f      	beq.n	8009370 <_vfiprintf_r+0x22c>
 80092f0:	4b29      	ldr	r3, [pc, #164]	; (8009398 <_vfiprintf_r+0x254>)
 80092f2:	bb1b      	cbnz	r3, 800933c <_vfiprintf_r+0x1f8>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	3307      	adds	r3, #7
 80092f8:	f023 0307 	bic.w	r3, r3, #7
 80092fc:	3308      	adds	r3, #8
 80092fe:	9303      	str	r3, [sp, #12]
 8009300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009302:	443b      	add	r3, r7
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	e767      	b.n	80091d8 <_vfiprintf_r+0x94>
 8009308:	fb0c 3202 	mla	r2, ip, r2, r3
 800930c:	460c      	mov	r4, r1
 800930e:	2001      	movs	r0, #1
 8009310:	e7a5      	b.n	800925e <_vfiprintf_r+0x11a>
 8009312:	2300      	movs	r3, #0
 8009314:	3401      	adds	r4, #1
 8009316:	9305      	str	r3, [sp, #20]
 8009318:	4619      	mov	r1, r3
 800931a:	f04f 0c0a 	mov.w	ip, #10
 800931e:	4620      	mov	r0, r4
 8009320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009324:	3a30      	subs	r2, #48	; 0x30
 8009326:	2a09      	cmp	r2, #9
 8009328:	d903      	bls.n	8009332 <_vfiprintf_r+0x1ee>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0c5      	beq.n	80092ba <_vfiprintf_r+0x176>
 800932e:	9105      	str	r1, [sp, #20]
 8009330:	e7c3      	b.n	80092ba <_vfiprintf_r+0x176>
 8009332:	fb0c 2101 	mla	r1, ip, r1, r2
 8009336:	4604      	mov	r4, r0
 8009338:	2301      	movs	r3, #1
 800933a:	e7f0      	b.n	800931e <_vfiprintf_r+0x1da>
 800933c:	ab03      	add	r3, sp, #12
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	462a      	mov	r2, r5
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <_vfiprintf_r+0x258>)
 8009344:	a904      	add	r1, sp, #16
 8009346:	4630      	mov	r0, r6
 8009348:	f3af 8000 	nop.w
 800934c:	4607      	mov	r7, r0
 800934e:	1c78      	adds	r0, r7, #1
 8009350:	d1d6      	bne.n	8009300 <_vfiprintf_r+0x1bc>
 8009352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009354:	07d9      	lsls	r1, r3, #31
 8009356:	d405      	bmi.n	8009364 <_vfiprintf_r+0x220>
 8009358:	89ab      	ldrh	r3, [r5, #12]
 800935a:	059a      	lsls	r2, r3, #22
 800935c:	d402      	bmi.n	8009364 <_vfiprintf_r+0x220>
 800935e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009360:	f000 fc45 	bl	8009bee <__retarget_lock_release_recursive>
 8009364:	89ab      	ldrh	r3, [r5, #12]
 8009366:	065b      	lsls	r3, r3, #25
 8009368:	f53f af12 	bmi.w	8009190 <_vfiprintf_r+0x4c>
 800936c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800936e:	e711      	b.n	8009194 <_vfiprintf_r+0x50>
 8009370:	ab03      	add	r3, sp, #12
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	462a      	mov	r2, r5
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <_vfiprintf_r+0x258>)
 8009378:	a904      	add	r1, sp, #16
 800937a:	4630      	mov	r0, r6
 800937c:	f000 f880 	bl	8009480 <_printf_i>
 8009380:	e7e4      	b.n	800934c <_vfiprintf_r+0x208>
 8009382:	bf00      	nop
 8009384:	0800c718 	.word	0x0800c718
 8009388:	0800c738 	.word	0x0800c738
 800938c:	0800c6f8 	.word	0x0800c6f8
 8009390:	0800c6c2 	.word	0x0800c6c2
 8009394:	0800c6cc 	.word	0x0800c6cc
 8009398:	00000000 	.word	0x00000000
 800939c:	0800911f 	.word	0x0800911f
 80093a0:	0800c6c8 	.word	0x0800c6c8

080093a4 <_printf_common>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	4616      	mov	r6, r2
 80093aa:	4699      	mov	r9, r3
 80093ac:	688a      	ldr	r2, [r1, #8]
 80093ae:	690b      	ldr	r3, [r1, #16]
 80093b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	bfb8      	it	lt
 80093b8:	4613      	movlt	r3, r2
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093c0:	4607      	mov	r7, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b10a      	cbz	r2, 80093ca <_printf_common+0x26>
 80093c6:	3301      	adds	r3, #1
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	0699      	lsls	r1, r3, #26
 80093ce:	bf42      	ittt	mi
 80093d0:	6833      	ldrmi	r3, [r6, #0]
 80093d2:	3302      	addmi	r3, #2
 80093d4:	6033      	strmi	r3, [r6, #0]
 80093d6:	6825      	ldr	r5, [r4, #0]
 80093d8:	f015 0506 	ands.w	r5, r5, #6
 80093dc:	d106      	bne.n	80093ec <_printf_common+0x48>
 80093de:	f104 0a19 	add.w	sl, r4, #25
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	6832      	ldr	r2, [r6, #0]
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	dc26      	bgt.n	800943a <_printf_common+0x96>
 80093ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093f0:	1e13      	subs	r3, r2, #0
 80093f2:	6822      	ldr	r2, [r4, #0]
 80093f4:	bf18      	it	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	0692      	lsls	r2, r2, #26
 80093fa:	d42b      	bmi.n	8009454 <_printf_common+0xb0>
 80093fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009400:	4649      	mov	r1, r9
 8009402:	4638      	mov	r0, r7
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d01e      	beq.n	8009448 <_printf_common+0xa4>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	68e5      	ldr	r5, [r4, #12]
 800940e:	6832      	ldr	r2, [r6, #0]
 8009410:	f003 0306 	and.w	r3, r3, #6
 8009414:	2b04      	cmp	r3, #4
 8009416:	bf08      	it	eq
 8009418:	1aad      	subeq	r5, r5, r2
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	6922      	ldr	r2, [r4, #16]
 800941e:	bf0c      	ite	eq
 8009420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009424:	2500      	movne	r5, #0
 8009426:	4293      	cmp	r3, r2
 8009428:	bfc4      	itt	gt
 800942a:	1a9b      	subgt	r3, r3, r2
 800942c:	18ed      	addgt	r5, r5, r3
 800942e:	2600      	movs	r6, #0
 8009430:	341a      	adds	r4, #26
 8009432:	42b5      	cmp	r5, r6
 8009434:	d11a      	bne.n	800946c <_printf_common+0xc8>
 8009436:	2000      	movs	r0, #0
 8009438:	e008      	b.n	800944c <_printf_common+0xa8>
 800943a:	2301      	movs	r3, #1
 800943c:	4652      	mov	r2, sl
 800943e:	4649      	mov	r1, r9
 8009440:	4638      	mov	r0, r7
 8009442:	47c0      	blx	r8
 8009444:	3001      	adds	r0, #1
 8009446:	d103      	bne.n	8009450 <_printf_common+0xac>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	3501      	adds	r5, #1
 8009452:	e7c6      	b.n	80093e2 <_printf_common+0x3e>
 8009454:	18e1      	adds	r1, r4, r3
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	2030      	movs	r0, #48	; 0x30
 800945a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800945e:	4422      	add	r2, r4
 8009460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009468:	3302      	adds	r3, #2
 800946a:	e7c7      	b.n	80093fc <_printf_common+0x58>
 800946c:	2301      	movs	r3, #1
 800946e:	4622      	mov	r2, r4
 8009470:	4649      	mov	r1, r9
 8009472:	4638      	mov	r0, r7
 8009474:	47c0      	blx	r8
 8009476:	3001      	adds	r0, #1
 8009478:	d0e6      	beq.n	8009448 <_printf_common+0xa4>
 800947a:	3601      	adds	r6, #1
 800947c:	e7d9      	b.n	8009432 <_printf_common+0x8e>
	...

08009480 <_printf_i>:
 8009480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	460c      	mov	r4, r1
 8009486:	4691      	mov	r9, r2
 8009488:	7e27      	ldrb	r7, [r4, #24]
 800948a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800948c:	2f78      	cmp	r7, #120	; 0x78
 800948e:	4680      	mov	r8, r0
 8009490:	469a      	mov	sl, r3
 8009492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009496:	d807      	bhi.n	80094a8 <_printf_i+0x28>
 8009498:	2f62      	cmp	r7, #98	; 0x62
 800949a:	d80a      	bhi.n	80094b2 <_printf_i+0x32>
 800949c:	2f00      	cmp	r7, #0
 800949e:	f000 80d8 	beq.w	8009652 <_printf_i+0x1d2>
 80094a2:	2f58      	cmp	r7, #88	; 0x58
 80094a4:	f000 80a3 	beq.w	80095ee <_printf_i+0x16e>
 80094a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094b0:	e03a      	b.n	8009528 <_printf_i+0xa8>
 80094b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094b6:	2b15      	cmp	r3, #21
 80094b8:	d8f6      	bhi.n	80094a8 <_printf_i+0x28>
 80094ba:	a001      	add	r0, pc, #4	; (adr r0, 80094c0 <_printf_i+0x40>)
 80094bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094c0:	08009519 	.word	0x08009519
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	080094a9 	.word	0x080094a9
 80094cc:	080094a9 	.word	0x080094a9
 80094d0:	080094a9 	.word	0x080094a9
 80094d4:	080094a9 	.word	0x080094a9
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	080094a9 	.word	0x080094a9
 80094e0:	080094a9 	.word	0x080094a9
 80094e4:	080094a9 	.word	0x080094a9
 80094e8:	080094a9 	.word	0x080094a9
 80094ec:	08009639 	.word	0x08009639
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	0800961b 	.word	0x0800961b
 80094f8:	080094a9 	.word	0x080094a9
 80094fc:	080094a9 	.word	0x080094a9
 8009500:	0800965b 	.word	0x0800965b
 8009504:	080094a9 	.word	0x080094a9
 8009508:	0800955d 	.word	0x0800955d
 800950c:	080094a9 	.word	0x080094a9
 8009510:	080094a9 	.word	0x080094a9
 8009514:	08009623 	.word	0x08009623
 8009518:	680b      	ldr	r3, [r1, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	600a      	str	r2, [r1, #0]
 8009520:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009528:	2301      	movs	r3, #1
 800952a:	e0a3      	b.n	8009674 <_printf_i+0x1f4>
 800952c:	6825      	ldr	r5, [r4, #0]
 800952e:	6808      	ldr	r0, [r1, #0]
 8009530:	062e      	lsls	r6, r5, #24
 8009532:	f100 0304 	add.w	r3, r0, #4
 8009536:	d50a      	bpl.n	800954e <_printf_i+0xce>
 8009538:	6805      	ldr	r5, [r0, #0]
 800953a:	600b      	str	r3, [r1, #0]
 800953c:	2d00      	cmp	r5, #0
 800953e:	da03      	bge.n	8009548 <_printf_i+0xc8>
 8009540:	232d      	movs	r3, #45	; 0x2d
 8009542:	426d      	negs	r5, r5
 8009544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009548:	485e      	ldr	r0, [pc, #376]	; (80096c4 <_printf_i+0x244>)
 800954a:	230a      	movs	r3, #10
 800954c:	e019      	b.n	8009582 <_printf_i+0x102>
 800954e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009552:	6805      	ldr	r5, [r0, #0]
 8009554:	600b      	str	r3, [r1, #0]
 8009556:	bf18      	it	ne
 8009558:	b22d      	sxthne	r5, r5
 800955a:	e7ef      	b.n	800953c <_printf_i+0xbc>
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	6825      	ldr	r5, [r4, #0]
 8009560:	1d18      	adds	r0, r3, #4
 8009562:	6008      	str	r0, [r1, #0]
 8009564:	0628      	lsls	r0, r5, #24
 8009566:	d501      	bpl.n	800956c <_printf_i+0xec>
 8009568:	681d      	ldr	r5, [r3, #0]
 800956a:	e002      	b.n	8009572 <_printf_i+0xf2>
 800956c:	0669      	lsls	r1, r5, #25
 800956e:	d5fb      	bpl.n	8009568 <_printf_i+0xe8>
 8009570:	881d      	ldrh	r5, [r3, #0]
 8009572:	4854      	ldr	r0, [pc, #336]	; (80096c4 <_printf_i+0x244>)
 8009574:	2f6f      	cmp	r7, #111	; 0x6f
 8009576:	bf0c      	ite	eq
 8009578:	2308      	moveq	r3, #8
 800957a:	230a      	movne	r3, #10
 800957c:	2100      	movs	r1, #0
 800957e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009582:	6866      	ldr	r6, [r4, #4]
 8009584:	60a6      	str	r6, [r4, #8]
 8009586:	2e00      	cmp	r6, #0
 8009588:	bfa2      	ittt	ge
 800958a:	6821      	ldrge	r1, [r4, #0]
 800958c:	f021 0104 	bicge.w	r1, r1, #4
 8009590:	6021      	strge	r1, [r4, #0]
 8009592:	b90d      	cbnz	r5, 8009598 <_printf_i+0x118>
 8009594:	2e00      	cmp	r6, #0
 8009596:	d04d      	beq.n	8009634 <_printf_i+0x1b4>
 8009598:	4616      	mov	r6, r2
 800959a:	fbb5 f1f3 	udiv	r1, r5, r3
 800959e:	fb03 5711 	mls	r7, r3, r1, r5
 80095a2:	5dc7      	ldrb	r7, [r0, r7]
 80095a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095a8:	462f      	mov	r7, r5
 80095aa:	42bb      	cmp	r3, r7
 80095ac:	460d      	mov	r5, r1
 80095ae:	d9f4      	bls.n	800959a <_printf_i+0x11a>
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d10b      	bne.n	80095cc <_printf_i+0x14c>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	07df      	lsls	r7, r3, #31
 80095b8:	d508      	bpl.n	80095cc <_printf_i+0x14c>
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6861      	ldr	r1, [r4, #4]
 80095be:	4299      	cmp	r1, r3
 80095c0:	bfde      	ittt	le
 80095c2:	2330      	movle	r3, #48	; 0x30
 80095c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095cc:	1b92      	subs	r2, r2, r6
 80095ce:	6122      	str	r2, [r4, #16]
 80095d0:	f8cd a000 	str.w	sl, [sp]
 80095d4:	464b      	mov	r3, r9
 80095d6:	aa03      	add	r2, sp, #12
 80095d8:	4621      	mov	r1, r4
 80095da:	4640      	mov	r0, r8
 80095dc:	f7ff fee2 	bl	80093a4 <_printf_common>
 80095e0:	3001      	adds	r0, #1
 80095e2:	d14c      	bne.n	800967e <_printf_i+0x1fe>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	b004      	add	sp, #16
 80095ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ee:	4835      	ldr	r0, [pc, #212]	; (80096c4 <_printf_i+0x244>)
 80095f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	680e      	ldr	r6, [r1, #0]
 80095f8:	061f      	lsls	r7, r3, #24
 80095fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80095fe:	600e      	str	r6, [r1, #0]
 8009600:	d514      	bpl.n	800962c <_printf_i+0x1ac>
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	bf44      	itt	mi
 8009606:	f043 0320 	orrmi.w	r3, r3, #32
 800960a:	6023      	strmi	r3, [r4, #0]
 800960c:	b91d      	cbnz	r5, 8009616 <_printf_i+0x196>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	f023 0320 	bic.w	r3, r3, #32
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	2310      	movs	r3, #16
 8009618:	e7b0      	b.n	800957c <_printf_i+0xfc>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f043 0320 	orr.w	r3, r3, #32
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	2378      	movs	r3, #120	; 0x78
 8009624:	4828      	ldr	r0, [pc, #160]	; (80096c8 <_printf_i+0x248>)
 8009626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800962a:	e7e3      	b.n	80095f4 <_printf_i+0x174>
 800962c:	065e      	lsls	r6, r3, #25
 800962e:	bf48      	it	mi
 8009630:	b2ad      	uxthmi	r5, r5
 8009632:	e7e6      	b.n	8009602 <_printf_i+0x182>
 8009634:	4616      	mov	r6, r2
 8009636:	e7bb      	b.n	80095b0 <_printf_i+0x130>
 8009638:	680b      	ldr	r3, [r1, #0]
 800963a:	6826      	ldr	r6, [r4, #0]
 800963c:	6960      	ldr	r0, [r4, #20]
 800963e:	1d1d      	adds	r5, r3, #4
 8009640:	600d      	str	r5, [r1, #0]
 8009642:	0635      	lsls	r5, r6, #24
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	d501      	bpl.n	800964c <_printf_i+0x1cc>
 8009648:	6018      	str	r0, [r3, #0]
 800964a:	e002      	b.n	8009652 <_printf_i+0x1d2>
 800964c:	0671      	lsls	r1, r6, #25
 800964e:	d5fb      	bpl.n	8009648 <_printf_i+0x1c8>
 8009650:	8018      	strh	r0, [r3, #0]
 8009652:	2300      	movs	r3, #0
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	4616      	mov	r6, r2
 8009658:	e7ba      	b.n	80095d0 <_printf_i+0x150>
 800965a:	680b      	ldr	r3, [r1, #0]
 800965c:	1d1a      	adds	r2, r3, #4
 800965e:	600a      	str	r2, [r1, #0]
 8009660:	681e      	ldr	r6, [r3, #0]
 8009662:	6862      	ldr	r2, [r4, #4]
 8009664:	2100      	movs	r1, #0
 8009666:	4630      	mov	r0, r6
 8009668:	f7f6 fdba 	bl	80001e0 <memchr>
 800966c:	b108      	cbz	r0, 8009672 <_printf_i+0x1f2>
 800966e:	1b80      	subs	r0, r0, r6
 8009670:	6060      	str	r0, [r4, #4]
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	2300      	movs	r3, #0
 8009678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800967c:	e7a8      	b.n	80095d0 <_printf_i+0x150>
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	47d0      	blx	sl
 8009688:	3001      	adds	r0, #1
 800968a:	d0ab      	beq.n	80095e4 <_printf_i+0x164>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	079b      	lsls	r3, r3, #30
 8009690:	d413      	bmi.n	80096ba <_printf_i+0x23a>
 8009692:	68e0      	ldr	r0, [r4, #12]
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	4298      	cmp	r0, r3
 8009698:	bfb8      	it	lt
 800969a:	4618      	movlt	r0, r3
 800969c:	e7a4      	b.n	80095e8 <_printf_i+0x168>
 800969e:	2301      	movs	r3, #1
 80096a0:	4632      	mov	r2, r6
 80096a2:	4649      	mov	r1, r9
 80096a4:	4640      	mov	r0, r8
 80096a6:	47d0      	blx	sl
 80096a8:	3001      	adds	r0, #1
 80096aa:	d09b      	beq.n	80095e4 <_printf_i+0x164>
 80096ac:	3501      	adds	r5, #1
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	9903      	ldr	r1, [sp, #12]
 80096b2:	1a5b      	subs	r3, r3, r1
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dcf2      	bgt.n	800969e <_printf_i+0x21e>
 80096b8:	e7eb      	b.n	8009692 <_printf_i+0x212>
 80096ba:	2500      	movs	r5, #0
 80096bc:	f104 0619 	add.w	r6, r4, #25
 80096c0:	e7f5      	b.n	80096ae <_printf_i+0x22e>
 80096c2:	bf00      	nop
 80096c4:	0800c6d3 	.word	0x0800c6d3
 80096c8:	0800c6e4 	.word	0x0800c6e4

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d06      	ldr	r5, [pc, #24]	; (80096e8 <_sbrk_r+0x1c>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	f7fa fa78 	bl	8003bcc <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	200007fc 	.word	0x200007fc

080096ec <__swbuf_r>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	460e      	mov	r6, r1
 80096f0:	4614      	mov	r4, r2
 80096f2:	4605      	mov	r5, r0
 80096f4:	b118      	cbz	r0, 80096fe <__swbuf_r+0x12>
 80096f6:	6983      	ldr	r3, [r0, #24]
 80096f8:	b90b      	cbnz	r3, 80096fe <__swbuf_r+0x12>
 80096fa:	f000 f9d9 	bl	8009ab0 <__sinit>
 80096fe:	4b21      	ldr	r3, [pc, #132]	; (8009784 <__swbuf_r+0x98>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d12b      	bne.n	800975c <__swbuf_r+0x70>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	071a      	lsls	r2, r3, #28
 800970e:	d52f      	bpl.n	8009770 <__swbuf_r+0x84>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	b36b      	cbz	r3, 8009770 <__swbuf_r+0x84>
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	6820      	ldr	r0, [r4, #0]
 8009718:	1ac0      	subs	r0, r0, r3
 800971a:	6963      	ldr	r3, [r4, #20]
 800971c:	b2f6      	uxtb	r6, r6
 800971e:	4283      	cmp	r3, r0
 8009720:	4637      	mov	r7, r6
 8009722:	dc04      	bgt.n	800972e <__swbuf_r+0x42>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f92e 	bl	8009988 <_fflush_r>
 800972c:	bb30      	cbnz	r0, 800977c <__swbuf_r+0x90>
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	60a3      	str	r3, [r4, #8]
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	701e      	strb	r6, [r3, #0]
 800973c:	6963      	ldr	r3, [r4, #20]
 800973e:	3001      	adds	r0, #1
 8009740:	4283      	cmp	r3, r0
 8009742:	d004      	beq.n	800974e <__swbuf_r+0x62>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	07db      	lsls	r3, r3, #31
 8009748:	d506      	bpl.n	8009758 <__swbuf_r+0x6c>
 800974a:	2e0a      	cmp	r6, #10
 800974c:	d104      	bne.n	8009758 <__swbuf_r+0x6c>
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f000 f919 	bl	8009988 <_fflush_r>
 8009756:	b988      	cbnz	r0, 800977c <__swbuf_r+0x90>
 8009758:	4638      	mov	r0, r7
 800975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <__swbuf_r+0x9c>)
 800975e:	429c      	cmp	r4, r3
 8009760:	d101      	bne.n	8009766 <__swbuf_r+0x7a>
 8009762:	68ac      	ldr	r4, [r5, #8]
 8009764:	e7cf      	b.n	8009706 <__swbuf_r+0x1a>
 8009766:	4b09      	ldr	r3, [pc, #36]	; (800978c <__swbuf_r+0xa0>)
 8009768:	429c      	cmp	r4, r3
 800976a:	bf08      	it	eq
 800976c:	68ec      	ldreq	r4, [r5, #12]
 800976e:	e7ca      	b.n	8009706 <__swbuf_r+0x1a>
 8009770:	4621      	mov	r1, r4
 8009772:	4628      	mov	r0, r5
 8009774:	f000 f80c 	bl	8009790 <__swsetup_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	d0cb      	beq.n	8009714 <__swbuf_r+0x28>
 800977c:	f04f 37ff 	mov.w	r7, #4294967295
 8009780:	e7ea      	b.n	8009758 <__swbuf_r+0x6c>
 8009782:	bf00      	nop
 8009784:	0800c718 	.word	0x0800c718
 8009788:	0800c738 	.word	0x0800c738
 800978c:	0800c6f8 	.word	0x0800c6f8

08009790 <__swsetup_r>:
 8009790:	4b32      	ldr	r3, [pc, #200]	; (800985c <__swsetup_r+0xcc>)
 8009792:	b570      	push	{r4, r5, r6, lr}
 8009794:	681d      	ldr	r5, [r3, #0]
 8009796:	4606      	mov	r6, r0
 8009798:	460c      	mov	r4, r1
 800979a:	b125      	cbz	r5, 80097a6 <__swsetup_r+0x16>
 800979c:	69ab      	ldr	r3, [r5, #24]
 800979e:	b913      	cbnz	r3, 80097a6 <__swsetup_r+0x16>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f000 f985 	bl	8009ab0 <__sinit>
 80097a6:	4b2e      	ldr	r3, [pc, #184]	; (8009860 <__swsetup_r+0xd0>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	d10f      	bne.n	80097cc <__swsetup_r+0x3c>
 80097ac:	686c      	ldr	r4, [r5, #4]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097b4:	0719      	lsls	r1, r3, #28
 80097b6:	d42c      	bmi.n	8009812 <__swsetup_r+0x82>
 80097b8:	06dd      	lsls	r5, r3, #27
 80097ba:	d411      	bmi.n	80097e0 <__swsetup_r+0x50>
 80097bc:	2309      	movs	r3, #9
 80097be:	6033      	str	r3, [r6, #0]
 80097c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	e03e      	b.n	800984a <__swsetup_r+0xba>
 80097cc:	4b25      	ldr	r3, [pc, #148]	; (8009864 <__swsetup_r+0xd4>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <__swsetup_r+0x46>
 80097d2:	68ac      	ldr	r4, [r5, #8]
 80097d4:	e7eb      	b.n	80097ae <__swsetup_r+0x1e>
 80097d6:	4b24      	ldr	r3, [pc, #144]	; (8009868 <__swsetup_r+0xd8>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68ec      	ldreq	r4, [r5, #12]
 80097de:	e7e6      	b.n	80097ae <__swsetup_r+0x1e>
 80097e0:	0758      	lsls	r0, r3, #29
 80097e2:	d512      	bpl.n	800980a <__swsetup_r+0x7a>
 80097e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e6:	b141      	cbz	r1, 80097fa <__swsetup_r+0x6a>
 80097e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ec:	4299      	cmp	r1, r3
 80097ee:	d002      	beq.n	80097f6 <__swsetup_r+0x66>
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fa77 	bl	8008ce4 <_free_r>
 80097f6:	2300      	movs	r3, #0
 80097f8:	6363      	str	r3, [r4, #52]	; 0x34
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	2300      	movs	r3, #0
 8009804:	6063      	str	r3, [r4, #4]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f043 0308 	orr.w	r3, r3, #8
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	6923      	ldr	r3, [r4, #16]
 8009814:	b94b      	cbnz	r3, 800982a <__swsetup_r+0x9a>
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800981c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009820:	d003      	beq.n	800982a <__swsetup_r+0x9a>
 8009822:	4621      	mov	r1, r4
 8009824:	4630      	mov	r0, r6
 8009826:	f000 fa07 	bl	8009c38 <__smakebuf_r>
 800982a:	89a0      	ldrh	r0, [r4, #12]
 800982c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009830:	f010 0301 	ands.w	r3, r0, #1
 8009834:	d00a      	beq.n	800984c <__swsetup_r+0xbc>
 8009836:	2300      	movs	r3, #0
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	6963      	ldr	r3, [r4, #20]
 800983c:	425b      	negs	r3, r3
 800983e:	61a3      	str	r3, [r4, #24]
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	b943      	cbnz	r3, 8009856 <__swsetup_r+0xc6>
 8009844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009848:	d1ba      	bne.n	80097c0 <__swsetup_r+0x30>
 800984a:	bd70      	pop	{r4, r5, r6, pc}
 800984c:	0781      	lsls	r1, r0, #30
 800984e:	bf58      	it	pl
 8009850:	6963      	ldrpl	r3, [r4, #20]
 8009852:	60a3      	str	r3, [r4, #8]
 8009854:	e7f4      	b.n	8009840 <__swsetup_r+0xb0>
 8009856:	2000      	movs	r0, #0
 8009858:	e7f7      	b.n	800984a <__swsetup_r+0xba>
 800985a:	bf00      	nop
 800985c:	20000068 	.word	0x20000068
 8009860:	0800c718 	.word	0x0800c718
 8009864:	0800c738 	.word	0x0800c738
 8009868:	0800c6f8 	.word	0x0800c6f8

0800986c <abort>:
 800986c:	b508      	push	{r3, lr}
 800986e:	2006      	movs	r0, #6
 8009870:	f000 fa96 	bl	8009da0 <raise>
 8009874:	2001      	movs	r0, #1
 8009876:	f7fa f931 	bl	8003adc <_exit>
	...

0800987c <__sflush_r>:
 800987c:	898a      	ldrh	r2, [r1, #12]
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	4605      	mov	r5, r0
 8009884:	0710      	lsls	r0, r2, #28
 8009886:	460c      	mov	r4, r1
 8009888:	d458      	bmi.n	800993c <__sflush_r+0xc0>
 800988a:	684b      	ldr	r3, [r1, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dc05      	bgt.n	800989c <__sflush_r+0x20>
 8009890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	dc02      	bgt.n	800989c <__sflush_r+0x20>
 8009896:	2000      	movs	r0, #0
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800989e:	2e00      	cmp	r6, #0
 80098a0:	d0f9      	beq.n	8009896 <__sflush_r+0x1a>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a8:	682f      	ldr	r7, [r5, #0]
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	d032      	beq.n	8009914 <__sflush_r+0x98>
 80098ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	075a      	lsls	r2, r3, #29
 80098b4:	d505      	bpl.n	80098c2 <__sflush_r+0x46>
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	1ac0      	subs	r0, r0, r3
 80098ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098bc:	b10b      	cbz	r3, 80098c2 <__sflush_r+0x46>
 80098be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c0:	1ac0      	subs	r0, r0, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	4602      	mov	r2, r0
 80098c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b0      	blx	r6
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	d106      	bne.n	80098e2 <__sflush_r+0x66>
 80098d4:	6829      	ldr	r1, [r5, #0]
 80098d6:	291d      	cmp	r1, #29
 80098d8:	d82c      	bhi.n	8009934 <__sflush_r+0xb8>
 80098da:	4a2a      	ldr	r2, [pc, #168]	; (8009984 <__sflush_r+0x108>)
 80098dc:	40ca      	lsrs	r2, r1
 80098de:	07d6      	lsls	r6, r2, #31
 80098e0:	d528      	bpl.n	8009934 <__sflush_r+0xb8>
 80098e2:	2200      	movs	r2, #0
 80098e4:	6062      	str	r2, [r4, #4]
 80098e6:	04d9      	lsls	r1, r3, #19
 80098e8:	6922      	ldr	r2, [r4, #16]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	d504      	bpl.n	80098f8 <__sflush_r+0x7c>
 80098ee:	1c42      	adds	r2, r0, #1
 80098f0:	d101      	bne.n	80098f6 <__sflush_r+0x7a>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	b903      	cbnz	r3, 80098f8 <__sflush_r+0x7c>
 80098f6:	6560      	str	r0, [r4, #84]	; 0x54
 80098f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fa:	602f      	str	r7, [r5, #0]
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d0ca      	beq.n	8009896 <__sflush_r+0x1a>
 8009900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009904:	4299      	cmp	r1, r3
 8009906:	d002      	beq.n	800990e <__sflush_r+0x92>
 8009908:	4628      	mov	r0, r5
 800990a:	f7ff f9eb 	bl	8008ce4 <_free_r>
 800990e:	2000      	movs	r0, #0
 8009910:	6360      	str	r0, [r4, #52]	; 0x34
 8009912:	e7c1      	b.n	8009898 <__sflush_r+0x1c>
 8009914:	6a21      	ldr	r1, [r4, #32]
 8009916:	2301      	movs	r3, #1
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	1c41      	adds	r1, r0, #1
 800991e:	d1c7      	bne.n	80098b0 <__sflush_r+0x34>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0c4      	beq.n	80098b0 <__sflush_r+0x34>
 8009926:	2b1d      	cmp	r3, #29
 8009928:	d001      	beq.n	800992e <__sflush_r+0xb2>
 800992a:	2b16      	cmp	r3, #22
 800992c:	d101      	bne.n	8009932 <__sflush_r+0xb6>
 800992e:	602f      	str	r7, [r5, #0]
 8009930:	e7b1      	b.n	8009896 <__sflush_r+0x1a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	e7ad      	b.n	8009898 <__sflush_r+0x1c>
 800993c:	690f      	ldr	r7, [r1, #16]
 800993e:	2f00      	cmp	r7, #0
 8009940:	d0a9      	beq.n	8009896 <__sflush_r+0x1a>
 8009942:	0793      	lsls	r3, r2, #30
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	bf08      	it	eq
 8009948:	694b      	ldreq	r3, [r1, #20]
 800994a:	600f      	str	r7, [r1, #0]
 800994c:	bf18      	it	ne
 800994e:	2300      	movne	r3, #0
 8009950:	eba6 0807 	sub.w	r8, r6, r7
 8009954:	608b      	str	r3, [r1, #8]
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	dd9c      	ble.n	8009896 <__sflush_r+0x1a>
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009960:	4643      	mov	r3, r8
 8009962:	463a      	mov	r2, r7
 8009964:	4628      	mov	r0, r5
 8009966:	47b0      	blx	r6
 8009968:	2800      	cmp	r0, #0
 800996a:	dc06      	bgt.n	800997a <__sflush_r+0xfe>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	e78e      	b.n	8009898 <__sflush_r+0x1c>
 800997a:	4407      	add	r7, r0
 800997c:	eba8 0800 	sub.w	r8, r8, r0
 8009980:	e7e9      	b.n	8009956 <__sflush_r+0xda>
 8009982:	bf00      	nop
 8009984:	20400001 	.word	0x20400001

08009988 <_fflush_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	b913      	cbnz	r3, 8009998 <_fflush_r+0x10>
 8009992:	2500      	movs	r5, #0
 8009994:	4628      	mov	r0, r5
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	b118      	cbz	r0, 80099a2 <_fflush_r+0x1a>
 800999a:	6983      	ldr	r3, [r0, #24]
 800999c:	b90b      	cbnz	r3, 80099a2 <_fflush_r+0x1a>
 800999e:	f000 f887 	bl	8009ab0 <__sinit>
 80099a2:	4b14      	ldr	r3, [pc, #80]	; (80099f4 <_fflush_r+0x6c>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	d11b      	bne.n	80099e0 <_fflush_r+0x58>
 80099a8:	686c      	ldr	r4, [r5, #4]
 80099aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ef      	beq.n	8009992 <_fflush_r+0xa>
 80099b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099b4:	07d0      	lsls	r0, r2, #31
 80099b6:	d404      	bmi.n	80099c2 <_fflush_r+0x3a>
 80099b8:	0599      	lsls	r1, r3, #22
 80099ba:	d402      	bmi.n	80099c2 <_fflush_r+0x3a>
 80099bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099be:	f000 f915 	bl	8009bec <__retarget_lock_acquire_recursive>
 80099c2:	4628      	mov	r0, r5
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7ff ff59 	bl	800987c <__sflush_r>
 80099ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099cc:	07da      	lsls	r2, r3, #31
 80099ce:	4605      	mov	r5, r0
 80099d0:	d4e0      	bmi.n	8009994 <_fflush_r+0xc>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	059b      	lsls	r3, r3, #22
 80099d6:	d4dd      	bmi.n	8009994 <_fflush_r+0xc>
 80099d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099da:	f000 f908 	bl	8009bee <__retarget_lock_release_recursive>
 80099de:	e7d9      	b.n	8009994 <_fflush_r+0xc>
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <_fflush_r+0x70>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	d101      	bne.n	80099ea <_fflush_r+0x62>
 80099e6:	68ac      	ldr	r4, [r5, #8]
 80099e8:	e7df      	b.n	80099aa <_fflush_r+0x22>
 80099ea:	4b04      	ldr	r3, [pc, #16]	; (80099fc <_fflush_r+0x74>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	bf08      	it	eq
 80099f0:	68ec      	ldreq	r4, [r5, #12]
 80099f2:	e7da      	b.n	80099aa <_fflush_r+0x22>
 80099f4:	0800c718 	.word	0x0800c718
 80099f8:	0800c738 	.word	0x0800c738
 80099fc:	0800c6f8 	.word	0x0800c6f8

08009a00 <std>:
 8009a00:	2300      	movs	r3, #0
 8009a02:	b510      	push	{r4, lr}
 8009a04:	4604      	mov	r4, r0
 8009a06:	e9c0 3300 	strd	r3, r3, [r0]
 8009a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a0e:	6083      	str	r3, [r0, #8]
 8009a10:	8181      	strh	r1, [r0, #12]
 8009a12:	6643      	str	r3, [r0, #100]	; 0x64
 8009a14:	81c2      	strh	r2, [r0, #14]
 8009a16:	6183      	str	r3, [r0, #24]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	2208      	movs	r2, #8
 8009a1c:	305c      	adds	r0, #92	; 0x5c
 8009a1e:	f7ff f893 	bl	8008b48 <memset>
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <std+0x38>)
 8009a24:	6263      	str	r3, [r4, #36]	; 0x24
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <std+0x3c>)
 8009a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <std+0x40>)
 8009a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <std+0x44>)
 8009a30:	6224      	str	r4, [r4, #32]
 8009a32:	6323      	str	r3, [r4, #48]	; 0x30
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	bf00      	nop
 8009a38:	08009dd9 	.word	0x08009dd9
 8009a3c:	08009dfb 	.word	0x08009dfb
 8009a40:	08009e33 	.word	0x08009e33
 8009a44:	08009e57 	.word	0x08009e57

08009a48 <_cleanup_r>:
 8009a48:	4901      	ldr	r1, [pc, #4]	; (8009a50 <_cleanup_r+0x8>)
 8009a4a:	f000 b8af 	b.w	8009bac <_fwalk_reent>
 8009a4e:	bf00      	nop
 8009a50:	08009989 	.word	0x08009989

08009a54 <__sfmoreglue>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	1e4a      	subs	r2, r1, #1
 8009a58:	2568      	movs	r5, #104	; 0x68
 8009a5a:	4355      	muls	r5, r2
 8009a5c:	460e      	mov	r6, r1
 8009a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a62:	f7ff f98f 	bl	8008d84 <_malloc_r>
 8009a66:	4604      	mov	r4, r0
 8009a68:	b140      	cbz	r0, 8009a7c <__sfmoreglue+0x28>
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009a70:	300c      	adds	r0, #12
 8009a72:	60a0      	str	r0, [r4, #8]
 8009a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a78:	f7ff f866 	bl	8008b48 <memset>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}

08009a80 <__sfp_lock_acquire>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__sfp_lock_acquire+0x8>)
 8009a82:	f000 b8b3 	b.w	8009bec <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	200007f8 	.word	0x200007f8

08009a8c <__sfp_lock_release>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__sfp_lock_release+0x8>)
 8009a8e:	f000 b8ae 	b.w	8009bee <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	200007f8 	.word	0x200007f8

08009a98 <__sinit_lock_acquire>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sinit_lock_acquire+0x8>)
 8009a9a:	f000 b8a7 	b.w	8009bec <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	200007f3 	.word	0x200007f3

08009aa4 <__sinit_lock_release>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sinit_lock_release+0x8>)
 8009aa6:	f000 b8a2 	b.w	8009bee <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	200007f3 	.word	0x200007f3

08009ab0 <__sinit>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	f7ff fff0 	bl	8009a98 <__sinit_lock_acquire>
 8009ab8:	69a3      	ldr	r3, [r4, #24]
 8009aba:	b11b      	cbz	r3, 8009ac4 <__sinit+0x14>
 8009abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac0:	f7ff bff0 	b.w	8009aa4 <__sinit_lock_release>
 8009ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <__sinit+0x68>)
 8009acc:	4a13      	ldr	r2, [pc, #76]	; (8009b1c <__sinit+0x6c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ad2:	42a3      	cmp	r3, r4
 8009ad4:	bf04      	itt	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	61a3      	streq	r3, [r4, #24]
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 f820 	bl	8009b20 <__sfp>
 8009ae0:	6060      	str	r0, [r4, #4]
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 f81c 	bl	8009b20 <__sfp>
 8009ae8:	60a0      	str	r0, [r4, #8]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f818 	bl	8009b20 <__sfp>
 8009af0:	2200      	movs	r2, #0
 8009af2:	60e0      	str	r0, [r4, #12]
 8009af4:	2104      	movs	r1, #4
 8009af6:	6860      	ldr	r0, [r4, #4]
 8009af8:	f7ff ff82 	bl	8009a00 <std>
 8009afc:	68a0      	ldr	r0, [r4, #8]
 8009afe:	2201      	movs	r2, #1
 8009b00:	2109      	movs	r1, #9
 8009b02:	f7ff ff7d 	bl	8009a00 <std>
 8009b06:	68e0      	ldr	r0, [r4, #12]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	2112      	movs	r1, #18
 8009b0c:	f7ff ff78 	bl	8009a00 <std>
 8009b10:	2301      	movs	r3, #1
 8009b12:	61a3      	str	r3, [r4, #24]
 8009b14:	e7d2      	b.n	8009abc <__sinit+0xc>
 8009b16:	bf00      	nop
 8009b18:	0800c60c 	.word	0x0800c60c
 8009b1c:	08009a49 	.word	0x08009a49

08009b20 <__sfp>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	4607      	mov	r7, r0
 8009b24:	f7ff ffac 	bl	8009a80 <__sfp_lock_acquire>
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <__sfp+0x84>)
 8009b2a:	681e      	ldr	r6, [r3, #0]
 8009b2c:	69b3      	ldr	r3, [r6, #24]
 8009b2e:	b913      	cbnz	r3, 8009b36 <__sfp+0x16>
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff ffbd 	bl	8009ab0 <__sinit>
 8009b36:	3648      	adds	r6, #72	; 0x48
 8009b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	d503      	bpl.n	8009b48 <__sfp+0x28>
 8009b40:	6833      	ldr	r3, [r6, #0]
 8009b42:	b30b      	cbz	r3, 8009b88 <__sfp+0x68>
 8009b44:	6836      	ldr	r6, [r6, #0]
 8009b46:	e7f7      	b.n	8009b38 <__sfp+0x18>
 8009b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b4c:	b9d5      	cbnz	r5, 8009b84 <__sfp+0x64>
 8009b4e:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <__sfp+0x88>)
 8009b50:	60e3      	str	r3, [r4, #12]
 8009b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b56:	6665      	str	r5, [r4, #100]	; 0x64
 8009b58:	f000 f847 	bl	8009bea <__retarget_lock_init_recursive>
 8009b5c:	f7ff ff96 	bl	8009a8c <__sfp_lock_release>
 8009b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b68:	6025      	str	r5, [r4, #0]
 8009b6a:	61a5      	str	r5, [r4, #24]
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b74:	f7fe ffe8 	bl	8008b48 <memset>
 8009b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b80:	4620      	mov	r0, r4
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	3468      	adds	r4, #104	; 0x68
 8009b86:	e7d9      	b.n	8009b3c <__sfp+0x1c>
 8009b88:	2104      	movs	r1, #4
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	f7ff ff62 	bl	8009a54 <__sfmoreglue>
 8009b90:	4604      	mov	r4, r0
 8009b92:	6030      	str	r0, [r6, #0]
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1d5      	bne.n	8009b44 <__sfp+0x24>
 8009b98:	f7ff ff78 	bl	8009a8c <__sfp_lock_release>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	e7ee      	b.n	8009b80 <__sfp+0x60>
 8009ba2:	bf00      	nop
 8009ba4:	0800c60c 	.word	0x0800c60c
 8009ba8:	ffff0001 	.word	0xffff0001

08009bac <_fwalk_reent>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	4688      	mov	r8, r1
 8009bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bb8:	2700      	movs	r7, #0
 8009bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009bc2:	d505      	bpl.n	8009bd0 <_fwalk_reent+0x24>
 8009bc4:	6824      	ldr	r4, [r4, #0]
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	d1f7      	bne.n	8009bba <_fwalk_reent+0xe>
 8009bca:	4638      	mov	r0, r7
 8009bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	89ab      	ldrh	r3, [r5, #12]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d907      	bls.n	8009be6 <_fwalk_reent+0x3a>
 8009bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	d003      	beq.n	8009be6 <_fwalk_reent+0x3a>
 8009bde:	4629      	mov	r1, r5
 8009be0:	4630      	mov	r0, r6
 8009be2:	47c0      	blx	r8
 8009be4:	4307      	orrs	r7, r0
 8009be6:	3568      	adds	r5, #104	; 0x68
 8009be8:	e7e9      	b.n	8009bbe <_fwalk_reent+0x12>

08009bea <__retarget_lock_init_recursive>:
 8009bea:	4770      	bx	lr

08009bec <__retarget_lock_acquire_recursive>:
 8009bec:	4770      	bx	lr

08009bee <__retarget_lock_release_recursive>:
 8009bee:	4770      	bx	lr

08009bf0 <__swhatbuf_r>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	b096      	sub	sp, #88	; 0x58
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	461d      	mov	r5, r3
 8009c00:	da07      	bge.n	8009c12 <__swhatbuf_r+0x22>
 8009c02:	2300      	movs	r3, #0
 8009c04:	602b      	str	r3, [r5, #0]
 8009c06:	89b3      	ldrh	r3, [r6, #12]
 8009c08:	061a      	lsls	r2, r3, #24
 8009c0a:	d410      	bmi.n	8009c2e <__swhatbuf_r+0x3e>
 8009c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c10:	e00e      	b.n	8009c30 <__swhatbuf_r+0x40>
 8009c12:	466a      	mov	r2, sp
 8009c14:	f000 f946 	bl	8009ea4 <_fstat_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	dbf2      	blt.n	8009c02 <__swhatbuf_r+0x12>
 8009c1c:	9a01      	ldr	r2, [sp, #4]
 8009c1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c26:	425a      	negs	r2, r3
 8009c28:	415a      	adcs	r2, r3
 8009c2a:	602a      	str	r2, [r5, #0]
 8009c2c:	e7ee      	b.n	8009c0c <__swhatbuf_r+0x1c>
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	2000      	movs	r0, #0
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	b016      	add	sp, #88	; 0x58
 8009c36:	bd70      	pop	{r4, r5, r6, pc}

08009c38 <__smakebuf_r>:
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c3c:	079d      	lsls	r5, r3, #30
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460c      	mov	r4, r1
 8009c42:	d507      	bpl.n	8009c54 <__smakebuf_r+0x1c>
 8009c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	b002      	add	sp, #8
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	ab01      	add	r3, sp, #4
 8009c56:	466a      	mov	r2, sp
 8009c58:	f7ff ffca 	bl	8009bf0 <__swhatbuf_r>
 8009c5c:	9900      	ldr	r1, [sp, #0]
 8009c5e:	4605      	mov	r5, r0
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff f88f 	bl	8008d84 <_malloc_r>
 8009c66:	b948      	cbnz	r0, 8009c7c <__smakebuf_r+0x44>
 8009c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d4ef      	bmi.n	8009c50 <__smakebuf_r+0x18>
 8009c70:	f023 0303 	bic.w	r3, r3, #3
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	e7e3      	b.n	8009c44 <__smakebuf_r+0xc>
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <__smakebuf_r+0x7c>)
 8009c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	6020      	str	r0, [r4, #0]
 8009c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	9b00      	ldr	r3, [sp, #0]
 8009c8c:	6163      	str	r3, [r4, #20]
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	6120      	str	r0, [r4, #16]
 8009c92:	b15b      	cbz	r3, 8009cac <__smakebuf_r+0x74>
 8009c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f915 	bl	8009ec8 <_isatty_r>
 8009c9e:	b128      	cbz	r0, 8009cac <__smakebuf_r+0x74>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	89a0      	ldrh	r0, [r4, #12]
 8009cae:	4305      	orrs	r5, r0
 8009cb0:	81a5      	strh	r5, [r4, #12]
 8009cb2:	e7cd      	b.n	8009c50 <__smakebuf_r+0x18>
 8009cb4:	08009a49 	.word	0x08009a49

08009cb8 <memmove>:
 8009cb8:	4288      	cmp	r0, r1
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	eb01 0402 	add.w	r4, r1, r2
 8009cc0:	d902      	bls.n	8009cc8 <memmove+0x10>
 8009cc2:	4284      	cmp	r4, r0
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	d807      	bhi.n	8009cd8 <memmove+0x20>
 8009cc8:	1e43      	subs	r3, r0, #1
 8009cca:	42a1      	cmp	r1, r4
 8009ccc:	d008      	beq.n	8009ce0 <memmove+0x28>
 8009cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cd6:	e7f8      	b.n	8009cca <memmove+0x12>
 8009cd8:	4402      	add	r2, r0
 8009cda:	4601      	mov	r1, r0
 8009cdc:	428a      	cmp	r2, r1
 8009cde:	d100      	bne.n	8009ce2 <memmove+0x2a>
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cea:	e7f7      	b.n	8009cdc <memmove+0x24>

08009cec <__malloc_lock>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__malloc_lock+0x8>)
 8009cee:	f7ff bf7d 	b.w	8009bec <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	200007f4 	.word	0x200007f4

08009cf8 <__malloc_unlock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__malloc_unlock+0x8>)
 8009cfa:	f7ff bf78 	b.w	8009bee <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	200007f4 	.word	0x200007f4

08009d04 <_realloc_r>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	4607      	mov	r7, r0
 8009d08:	4614      	mov	r4, r2
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	b921      	cbnz	r1, 8009d18 <_realloc_r+0x14>
 8009d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d12:	4611      	mov	r1, r2
 8009d14:	f7ff b836 	b.w	8008d84 <_malloc_r>
 8009d18:	b922      	cbnz	r2, 8009d24 <_realloc_r+0x20>
 8009d1a:	f7fe ffe3 	bl	8008ce4 <_free_r>
 8009d1e:	4625      	mov	r5, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	f000 f8f2 	bl	8009f0c <_malloc_usable_size_r>
 8009d28:	42a0      	cmp	r0, r4
 8009d2a:	d20f      	bcs.n	8009d4c <_realloc_r+0x48>
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f7ff f828 	bl	8008d84 <_malloc_r>
 8009d34:	4605      	mov	r5, r0
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0f2      	beq.n	8009d20 <_realloc_r+0x1c>
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	f7fe fef5 	bl	8008b2c <memcpy>
 8009d42:	4631      	mov	r1, r6
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7fe ffcd 	bl	8008ce4 <_free_r>
 8009d4a:	e7e9      	b.n	8009d20 <_realloc_r+0x1c>
 8009d4c:	4635      	mov	r5, r6
 8009d4e:	e7e7      	b.n	8009d20 <_realloc_r+0x1c>

08009d50 <_raise_r>:
 8009d50:	291f      	cmp	r1, #31
 8009d52:	b538      	push	{r3, r4, r5, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	d904      	bls.n	8009d64 <_raise_r+0x14>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d66:	b112      	cbz	r2, 8009d6e <_raise_r+0x1e>
 8009d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <_raise_r+0x32>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 f830 	bl	8009dd4 <_getpid_r>
 8009d74:	462a      	mov	r2, r5
 8009d76:	4601      	mov	r1, r0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7e:	f000 b817 	b.w	8009db0 <_kill_r>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d00a      	beq.n	8009d9c <_raise_r+0x4c>
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	d103      	bne.n	8009d92 <_raise_r+0x42>
 8009d8a:	2316      	movs	r3, #22
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7e7      	b.n	8009d62 <_raise_r+0x12>
 8009d92:	2400      	movs	r4, #0
 8009d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d98:	4628      	mov	r0, r5
 8009d9a:	4798      	blx	r3
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7e0      	b.n	8009d62 <_raise_r+0x12>

08009da0 <raise>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <raise+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff bfd3 	b.w	8009d50 <_raise_r>
 8009daa:	bf00      	nop
 8009dac:	20000068 	.word	0x20000068

08009db0 <_kill_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	; (8009dd0 <_kill_r+0x20>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f7f9 fe7d 	bl	8003abc <_kill>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d102      	bne.n	8009dcc <_kill_r+0x1c>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	b103      	cbz	r3, 8009dcc <_kill_r+0x1c>
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	200007fc 	.word	0x200007fc

08009dd4 <_getpid_r>:
 8009dd4:	f7f9 be6a 	b.w	8003aac <_getpid>

08009dd8 <__sread>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de0:	f000 f89c 	bl	8009f1c <_read_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	bfab      	itete	ge
 8009de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dea:	89a3      	ldrhlt	r3, [r4, #12]
 8009dec:	181b      	addge	r3, r3, r0
 8009dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009df2:	bfac      	ite	ge
 8009df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df6:	81a3      	strhlt	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__swrite>:
 8009dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	461f      	mov	r7, r3
 8009e00:	898b      	ldrh	r3, [r1, #12]
 8009e02:	05db      	lsls	r3, r3, #23
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4616      	mov	r6, r2
 8009e0a:	d505      	bpl.n	8009e18 <__swrite+0x1e>
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	2302      	movs	r3, #2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f000 f868 	bl	8009ee8 <_lseek_r>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f000 b817 	b.w	8009e60 <_write_r>

08009e32 <__sseek>:
 8009e32:	b510      	push	{r4, lr}
 8009e34:	460c      	mov	r4, r1
 8009e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3a:	f000 f855 	bl	8009ee8 <_lseek_r>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	bf15      	itete	ne
 8009e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strheq	r3, [r4, #12]
 8009e50:	bf18      	it	ne
 8009e52:	81a3      	strhne	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__sclose>:
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 b813 	b.w	8009e84 <_close_r>
	...

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f9 fe5b 	bl	8003b2a <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	200007fc 	.word	0x200007fc

08009e84 <_close_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_close_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7f9 fe67 	bl	8003b62 <_close>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_close_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_close_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	200007fc 	.word	0x200007fc

08009ea4 <_fstat_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	; (8009ec4 <_fstat_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7f9 fe62 	bl	8003b7a <_fstat>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_fstat_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_fstat_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	200007fc 	.word	0x200007fc

08009ec8 <_isatty_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	; (8009ee4 <_isatty_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f9 fe61 	bl	8003b9a <_isatty>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_isatty_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_isatty_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	200007fc 	.word	0x200007fc

08009ee8 <_lseek_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_lseek_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f9 fe5a 	bl	8003bb0 <_lseek>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_lseek_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_lseek_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	200007fc 	.word	0x200007fc

08009f0c <_malloc_usable_size_r>:
 8009f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f10:	1f18      	subs	r0, r3, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfbc      	itt	lt
 8009f16:	580b      	ldrlt	r3, [r1, r0]
 8009f18:	18c0      	addlt	r0, r0, r3
 8009f1a:	4770      	bx	lr

08009f1c <_read_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_read_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f9 fde0 	bl	8003af0 <_read>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_read_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_read_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	200007fc 	.word	0x200007fc

08009f40 <_init>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr

08009f4c <_fini>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr
